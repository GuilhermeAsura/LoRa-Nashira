
LoRinha.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000506c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e60  0800520c  0800520c  0000620c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800606c  0800606c  00008058  2**0
                  CONTENTS
  4 .ARM          00000008  0800606c  0800606c  0000706c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006074  08006074  00008058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006074  08006074  00007074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006078  08006078  00007078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800607c  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004d0  20000058  080060d4  00008058  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000528  080060d4  00008528  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f263  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024fb  00000000  00000000  000172eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e00  00000000  00000000  000197e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ac8  00000000  00000000  0001a5e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003980  00000000  00000000  0001b0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010022  00000000  00000000  0001ea30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c5ce  00000000  00000000  0002ea52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bb020  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e68  00000000  00000000  000bb064  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000beecc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000058 	.word	0x20000058
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080051f4 	.word	0x080051f4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000005c 	.word	0x2000005c
 80001dc:	080051f4 	.word	0x080051f4

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <delay_ms>:
 * @brief     delay ms
 * @param[in] ms
 * @note      none
 */
void delay_ms(uint32_t ms)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
    /* use the hal delay */
    HAL_Delay(ms);
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f002 fd43 	bl	8003500 <HAL_Delay>
}
 8000a7a:	bf00      	nop
 8000a7c:	3708      	adds	r7, #8
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <a_llcc68_spi_read>:
 *             - 0 success
 *             - 1 spi read failed
 * @note       none
 */
static uint8_t a_llcc68_spi_read(llcc68_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8000a82:	b590      	push	{r4, r7, lr}
 8000a84:	b085      	sub	sp, #20
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	60f8      	str	r0, [r7, #12]
 8000a8a:	607a      	str	r2, [r7, #4]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	460b      	mov	r3, r1
 8000a90:	72fb      	strb	r3, [r7, #11]
 8000a92:	4613      	mov	r3, r2
 8000a94:	813b      	strh	r3, [r7, #8]
    if (handle->spi_write_read(&reg, 1, buf, len) != 0)   /* spi read */
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6a1c      	ldr	r4, [r3, #32]
 8000a9a:	893b      	ldrh	r3, [r7, #8]
 8000a9c:	f107 000b 	add.w	r0, r7, #11
 8000aa0:	687a      	ldr	r2, [r7, #4]
 8000aa2:	2101      	movs	r1, #1
 8000aa4:	47a0      	blx	r4
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <a_llcc68_spi_read+0x2e>
    {
        return 1;                                         /* return error */
 8000aac:	2301      	movs	r3, #1
 8000aae:	e000      	b.n	8000ab2 <a_llcc68_spi_read+0x30>
    }
    else
    {
        return 0;                                         /* success return 0 */
 8000ab0:	2300      	movs	r3, #0
    }
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd90      	pop	{r4, r7, pc}
	...

08000abc <a_llcc68_spi_write>:
 *            - 1 spi write failed
 *            - 2 len is over 383
 * @note      none
 */
static uint8_t a_llcc68_spi_write(llcc68_handle_t *handle, uint8_t reg, uint8_t *buf, uint16_t len)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b085      	sub	sp, #20
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	607a      	str	r2, [r7, #4]
 8000ac6:	461a      	mov	r2, r3
 8000ac8:	460b      	mov	r3, r1
 8000aca:	72fb      	strb	r3, [r7, #11]
 8000acc:	4613      	mov	r3, r2
 8000ace:	813b      	strh	r3, [r7, #8]
    if (len > (384 - 1))                                              /* check the length */
 8000ad0:	893b      	ldrh	r3, [r7, #8]
 8000ad2:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8000ad6:	d305      	bcc.n	8000ae4 <a_llcc68_spi_write+0x28>
    {
        handle->debug_print("llcc68: len is over 383.\n");            /* len is over 383 */
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000adc:	4815      	ldr	r0, [pc, #84]	@ (8000b34 <a_llcc68_spi_write+0x78>)
 8000ade:	4798      	blx	r3
        
        return 2;                                                     /* return error */
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	e023      	b.n	8000b2c <a_llcc68_spi_write+0x70>
    }
    
    memset(handle->buf, 0, sizeof(uint8_t) * 384);                    /* clear the buffer */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	3336      	adds	r3, #54	@ 0x36
 8000ae8:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000aec:	2100      	movs	r1, #0
 8000aee:	4618      	mov	r0, r3
 8000af0:	f003 ff00 	bl	80048f4 <memset>
    handle->buf[0] = reg;                                             /* set the reg */
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	7afa      	ldrb	r2, [r7, #11]
 8000af8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    memcpy(&handle->buf[1], buf, len);                                /* copy the buffer */
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	3337      	adds	r3, #55	@ 0x37
 8000b00:	893a      	ldrh	r2, [r7, #8]
 8000b02:	6879      	ldr	r1, [r7, #4]
 8000b04:	4618      	mov	r0, r3
 8000b06:	f003 ff29 	bl	800495c <memcpy>
    if (handle->spi_write_read(handle->buf, len + 1, NULL, 0) != 0)   /* spi write */
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	6a1c      	ldr	r4, [r3, #32]
 8000b0e:	68fb      	ldr	r3, [r7, #12]
 8000b10:	f103 0036 	add.w	r0, r3, #54	@ 0x36
 8000b14:	893b      	ldrh	r3, [r7, #8]
 8000b16:	3301      	adds	r3, #1
 8000b18:	4619      	mov	r1, r3
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	47a0      	blx	r4
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d001      	beq.n	8000b2a <a_llcc68_spi_write+0x6e>
    {
        return 1;                                                     /* return error */
 8000b26:	2301      	movs	r3, #1
 8000b28:	e000      	b.n	8000b2c <a_llcc68_spi_write+0x70>
    }
    else
    {
        return 0;                                                     /* success return 0 */
 8000b2a:	2300      	movs	r3, #0
    }
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3714      	adds	r7, #20
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd90      	pop	{r4, r7, pc}
 8000b34:	0800520c 	.word	0x0800520c

08000b38 <a_llcc68_spi_read_register>:
 *             - 1 spi read register failed
 *             - 2 len is over 383
 * @note       none
 */
static uint8_t a_llcc68_spi_read_register(llcc68_handle_t *handle, uint16_t reg, uint8_t *buf, uint16_t len)
{
 8000b38:	b590      	push	{r4, r7, lr}
 8000b3a:	b087      	sub	sp, #28
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	60f8      	str	r0, [r7, #12]
 8000b40:	607a      	str	r2, [r7, #4]
 8000b42:	461a      	mov	r2, r3
 8000b44:	460b      	mov	r3, r1
 8000b46:	817b      	strh	r3, [r7, #10]
 8000b48:	4613      	mov	r3, r2
 8000b4a:	813b      	strh	r3, [r7, #8]
    uint8_t reg_buf[3];
    
    if (len > (384 - 1))                                                            /* check the length */
 8000b4c:	893b      	ldrh	r3, [r7, #8]
 8000b4e:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8000b52:	d305      	bcc.n	8000b60 <a_llcc68_spi_read_register+0x28>
    {
        handle->debug_print("llcc68: len is over 383.\n");                          /* len is over 383 */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b58:	4819      	ldr	r0, [pc, #100]	@ (8000bc0 <a_llcc68_spi_read_register+0x88>)
 8000b5a:	4798      	blx	r3
        
        return 2;                                                                   /* return error */
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	e02a      	b.n	8000bb6 <a_llcc68_spi_read_register+0x7e>
    }
    
    memset(handle->buf, 0, sizeof(uint8_t) * 384);                                  /* clear the buffer */
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	3336      	adds	r3, #54	@ 0x36
 8000b64:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 fec2 	bl	80048f4 <memset>
    reg_buf[0] = LLCC68_COMMAND_READ_REGISTER;                                      /* set the command */
 8000b70:	231d      	movs	r3, #29
 8000b72:	753b      	strb	r3, [r7, #20]
    reg_buf[1] = (reg >> 8) & 0xFF;                                                 /* set msb */
 8000b74:	897b      	ldrh	r3, [r7, #10]
 8000b76:	0a1b      	lsrs	r3, r3, #8
 8000b78:	b29b      	uxth	r3, r3
 8000b7a:	b2db      	uxtb	r3, r3
 8000b7c:	757b      	strb	r3, [r7, #21]
    reg_buf[2] = (reg >> 0) & 0xFF;                                                 /* set lsb */
 8000b7e:	897b      	ldrh	r3, [r7, #10]
 8000b80:	b2db      	uxtb	r3, r3
 8000b82:	75bb      	strb	r3, [r7, #22]
    if (handle->spi_write_read((uint8_t *)reg_buf, 3, handle->buf, len + 1) != 0)   /* spi read */
 8000b84:	68fb      	ldr	r3, [r7, #12]
 8000b86:	6a1c      	ldr	r4, [r3, #32]
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 8000b8e:	893b      	ldrh	r3, [r7, #8]
 8000b90:	3301      	adds	r3, #1
 8000b92:	f107 0014 	add.w	r0, r7, #20
 8000b96:	2103      	movs	r1, #3
 8000b98:	47a0      	blx	r4
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <a_llcc68_spi_read_register+0x6c>
    {
        return 1;                                                                   /* return error */
 8000ba0:	2301      	movs	r3, #1
 8000ba2:	e008      	b.n	8000bb6 <a_llcc68_spi_read_register+0x7e>
    }
    else
    {
        memcpy(buf, handle->buf + 1, len);                                          /* copy the data */
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	3336      	adds	r3, #54	@ 0x36
 8000ba8:	3301      	adds	r3, #1
 8000baa:	893a      	ldrh	r2, [r7, #8]
 8000bac:	4619      	mov	r1, r3
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f003 fed4 	bl	800495c <memcpy>
        
        return 0;                                                                   /* success return 0 */
 8000bb4:	2300      	movs	r3, #0
    }
}
 8000bb6:	4618      	mov	r0, r3
 8000bb8:	371c      	adds	r7, #28
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bd90      	pop	{r4, r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	0800520c 	.word	0x0800520c

08000bc4 <a_llcc68_spi_write_register>:
 *            - 1 spi write register failed
 *            - 2 len is over 381
 * @note      none
 */
static uint8_t a_llcc68_spi_write_register(llcc68_handle_t *handle, uint16_t reg, uint8_t *buf, uint16_t len)
{
 8000bc4:	b590      	push	{r4, r7, lr}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	607a      	str	r2, [r7, #4]
 8000bce:	461a      	mov	r2, r3
 8000bd0:	460b      	mov	r3, r1
 8000bd2:	817b      	strh	r3, [r7, #10]
 8000bd4:	4613      	mov	r3, r2
 8000bd6:	813b      	strh	r3, [r7, #8]
    if (len > (384 - 3))                                              /* check the length */
 8000bd8:	893b      	ldrh	r3, [r7, #8]
 8000bda:	f5b3 7fbf 	cmp.w	r3, #382	@ 0x17e
 8000bde:	d305      	bcc.n	8000bec <a_llcc68_spi_write_register+0x28>
    {
        handle->debug_print("llcc68: len is over 381.\n");            /* len is over 381 */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000be4:	481b      	ldr	r0, [pc, #108]	@ (8000c54 <a_llcc68_spi_write_register+0x90>)
 8000be6:	4798      	blx	r3
        
        return 2;                                                     /* return error */
 8000be8:	2302      	movs	r3, #2
 8000bea:	e02f      	b.n	8000c4c <a_llcc68_spi_write_register+0x88>
    }
    
    memset(handle->buf, 0, sizeof(uint8_t) * 384);                    /* clear the buffer */
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	3336      	adds	r3, #54	@ 0x36
 8000bf0:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000bf4:	2100      	movs	r1, #0
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f003 fe7c 	bl	80048f4 <memset>
    handle->buf[0] = LLCC68_COMMAND_WRITE_REGISTER;                   /* set the command */
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	220d      	movs	r2, #13
 8000c00:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    handle->buf[1] = (reg >> 8) & 0xFF;                               /* set reg msb */
 8000c04:	897b      	ldrh	r3, [r7, #10]
 8000c06:	0a1b      	lsrs	r3, r3, #8
 8000c08:	b29b      	uxth	r3, r3
 8000c0a:	b2da      	uxtb	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    handle->buf[2] = (reg >> 0) & 0xFF;                               /* set reg lsb */
 8000c12:	897b      	ldrh	r3, [r7, #10]
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    memcpy(&handle->buf[3], buf, len);                                /* copy the buffer */
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	3339      	adds	r3, #57	@ 0x39
 8000c20:	893a      	ldrh	r2, [r7, #8]
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	4618      	mov	r0, r3
 8000c26:	f003 fe99 	bl	800495c <memcpy>
    if (handle->spi_write_read(handle->buf, len + 3, NULL, 0) != 0)   /* spi write */
 8000c2a:	68fb      	ldr	r3, [r7, #12]
 8000c2c:	6a1c      	ldr	r4, [r3, #32]
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	f103 0036 	add.w	r0, r3, #54	@ 0x36
 8000c34:	893b      	ldrh	r3, [r7, #8]
 8000c36:	3303      	adds	r3, #3
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	47a0      	blx	r4
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <a_llcc68_spi_write_register+0x86>
    {
        return 1;                                                     /* return error */
 8000c46:	2301      	movs	r3, #1
 8000c48:	e000      	b.n	8000c4c <a_llcc68_spi_write_register+0x88>
    }
    else
    {
        return 0;                                                     /* success return 0 */
 8000c4a:	2300      	movs	r3, #0
    }
}
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	3714      	adds	r7, #20
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd90      	pop	{r4, r7, pc}
 8000c54:	08005228 	.word	0x08005228

08000c58 <a_llcc68_spi_write_buffer>:
 *            - 1 spi write buffer failed
 *            - 2 len is over 382
 * @note      none
 */
static uint8_t a_llcc68_spi_write_buffer(llcc68_handle_t *handle, uint8_t offset, uint8_t *buf, uint16_t len)
{
 8000c58:	b590      	push	{r4, r7, lr}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	607a      	str	r2, [r7, #4]
 8000c62:	461a      	mov	r2, r3
 8000c64:	460b      	mov	r3, r1
 8000c66:	72fb      	strb	r3, [r7, #11]
 8000c68:	4613      	mov	r3, r2
 8000c6a:	813b      	strh	r3, [r7, #8]
    if (len > (384 - 2))                                              /* check the length */
 8000c6c:	893b      	ldrh	r3, [r7, #8]
 8000c6e:	f5b3 7fbf 	cmp.w	r3, #382	@ 0x17e
 8000c72:	d905      	bls.n	8000c80 <a_llcc68_spi_write_buffer+0x28>
    {
        handle->debug_print("llcc68: len is over 382.\n");            /* len is over 382 */
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c78:	4817      	ldr	r0, [pc, #92]	@ (8000cd8 <a_llcc68_spi_write_buffer+0x80>)
 8000c7a:	4798      	blx	r3
        
        return 2;                                                     /* return error */
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	e027      	b.n	8000cd0 <a_llcc68_spi_write_buffer+0x78>
    }
    
    memset(handle->buf, 0, sizeof(uint8_t) * 384);                    /* clear the buffer */
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	3336      	adds	r3, #54	@ 0x36
 8000c84:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f003 fe32 	bl	80048f4 <memset>
    handle->buf[0] = LLCC68_COMMAND_WRITE_BUFFER;                     /* set the command */
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	220e      	movs	r2, #14
 8000c94:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
    handle->buf[1] = offset;                                          /* set reg msb */
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	7afa      	ldrb	r2, [r7, #11]
 8000c9c:	f883 2037 	strb.w	r2, [r3, #55]	@ 0x37
    memcpy(&handle->buf[2], buf, len);                                /* copy the buffer */
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	3338      	adds	r3, #56	@ 0x38
 8000ca4:	893a      	ldrh	r2, [r7, #8]
 8000ca6:	6879      	ldr	r1, [r7, #4]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f003 fe57 	bl	800495c <memcpy>
    if (handle->spi_write_read(handle->buf, len + 2, NULL, 0) != 0)   /* spi write */
 8000cae:	68fb      	ldr	r3, [r7, #12]
 8000cb0:	6a1c      	ldr	r4, [r3, #32]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	f103 0036 	add.w	r0, r3, #54	@ 0x36
 8000cb8:	893b      	ldrh	r3, [r7, #8]
 8000cba:	3302      	adds	r3, #2
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	47a0      	blx	r4
 8000cc4:	4603      	mov	r3, r0
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d001      	beq.n	8000cce <a_llcc68_spi_write_buffer+0x76>
    {
        return 1;                                                     /* return error */
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e000      	b.n	8000cd0 <a_llcc68_spi_write_buffer+0x78>
    }
    else
    {
        return 0;                                                     /* success return 0 */
 8000cce:	2300      	movs	r3, #0
    }
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd90      	pop	{r4, r7, pc}
 8000cd8:	08005244 	.word	0x08005244

08000cdc <a_llcc68_spi_read_buffer>:
 *             - 1 spi read buffer failed
 *             - 2 len is over 383
 * @note      none
 */
static uint8_t a_llcc68_spi_read_buffer(llcc68_handle_t *handle, uint8_t offset, uint8_t *buf, uint16_t len)
{
 8000cdc:	b590      	push	{r4, r7, lr}
 8000cde:	b087      	sub	sp, #28
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	60f8      	str	r0, [r7, #12]
 8000ce4:	607a      	str	r2, [r7, #4]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	460b      	mov	r3, r1
 8000cea:	72fb      	strb	r3, [r7, #11]
 8000cec:	4613      	mov	r3, r2
 8000cee:	813b      	strh	r3, [r7, #8]
    uint8_t reg_buf[2];
    
    if (len > (384 - 1))                                                            /* check the length */
 8000cf0:	893b      	ldrh	r3, [r7, #8]
 8000cf2:	f5b3 7fc0 	cmp.w	r3, #384	@ 0x180
 8000cf6:	d305      	bcc.n	8000d04 <a_llcc68_spi_read_buffer+0x28>
    {
        handle->debug_print("llcc68: len is over 383.\n");                          /* len is over 383 */
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfc:	4816      	ldr	r0, [pc, #88]	@ (8000d58 <a_llcc68_spi_read_buffer+0x7c>)
 8000cfe:	4798      	blx	r3
        
        return 2;                                                                   /* return error */
 8000d00:	2302      	movs	r3, #2
 8000d02:	e024      	b.n	8000d4e <a_llcc68_spi_read_buffer+0x72>
    }
    
    memset(handle->buf, 0, sizeof(uint8_t) * 384);                                  /* clear the buffer */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	3336      	adds	r3, #54	@ 0x36
 8000d08:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000d0c:	2100      	movs	r1, #0
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 fdf0 	bl	80048f4 <memset>
    reg_buf[0] = LLCC68_COMMAND_READ_BUFFER ;                                       /* set the command */
 8000d14:	231e      	movs	r3, #30
 8000d16:	753b      	strb	r3, [r7, #20]
    reg_buf[1] = offset;                                                            /* set msb */
 8000d18:	7afb      	ldrb	r3, [r7, #11]
 8000d1a:	757b      	strb	r3, [r7, #21]
    if (handle->spi_write_read((uint8_t *)reg_buf, 2, handle->buf, len + 1) != 0)   /* spi write */
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	6a1c      	ldr	r4, [r3, #32]
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 8000d26:	893b      	ldrh	r3, [r7, #8]
 8000d28:	3301      	adds	r3, #1
 8000d2a:	f107 0014 	add.w	r0, r7, #20
 8000d2e:	2102      	movs	r1, #2
 8000d30:	47a0      	blx	r4
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <a_llcc68_spi_read_buffer+0x60>
    {
        return 1;                                                                   /* return error */
 8000d38:	2301      	movs	r3, #1
 8000d3a:	e008      	b.n	8000d4e <a_llcc68_spi_read_buffer+0x72>
    }
    else
    {
        memcpy(buf, handle->buf + 1, len);                                          /* copy the data */
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3336      	adds	r3, #54	@ 0x36
 8000d40:	3301      	adds	r3, #1
 8000d42:	893a      	ldrh	r2, [r7, #8]
 8000d44:	4619      	mov	r1, r3
 8000d46:	6878      	ldr	r0, [r7, #4]
 8000d48:	f003 fe08 	bl	800495c <memcpy>
        
        return 0;                                                                   /* success return 0 */
 8000d4c:	2300      	movs	r3, #0
    }
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	371c      	adds	r7, #28
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd90      	pop	{r4, r7, pc}
 8000d56:	bf00      	nop
 8000d58:	0800520c 	.word	0x0800520c

08000d5c <a_llcc68_check_busy>:
 *            - 0 idle
 *            - 1 busy or error
 * @note      none
 */
static uint8_t a_llcc68_check_busy(llcc68_handle_t *handle)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b084      	sub	sp, #16
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
    uint8_t level;
    uint8_t timeout;
    
    timeout = 100;                                            /* set max 100 */
 8000d64:	2364      	movs	r3, #100	@ 0x64
 8000d66:	73fb      	strb	r3, [r7, #15]
    
    while (1)                                                 /* loop */
    {
        if (handle->busy_gpio_read((uint8_t *)&level) != 0)   /* read busy gpio */
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	695b      	ldr	r3, [r3, #20]
 8000d6c:	f107 020e 	add.w	r2, r7, #14
 8000d70:	4610      	mov	r0, r2
 8000d72:	4798      	blx	r3
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <a_llcc68_check_busy+0x22>
        {
             return 1;                                        /* return error */
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e01a      	b.n	8000db4 <a_llcc68_check_busy+0x58>
        }
        else
        {
            if (level == 0)                                   /* check level */
 8000d7e:	7bbb      	ldrb	r3, [r7, #14]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d101      	bne.n	8000d88 <a_llcc68_check_busy+0x2c>
            {
                return 0;                                     /* success return 0 */
 8000d84:	2300      	movs	r3, #0
 8000d86:	e015      	b.n	8000db4 <a_llcc68_check_busy+0x58>
            }
            else if ((level == 1) && (timeout != 0))          /* check level and timeout */
 8000d88:	7bbb      	ldrb	r3, [r7, #14]
 8000d8a:	2b01      	cmp	r3, #1
 8000d8c:	d10e      	bne.n	8000dac <a_llcc68_check_busy+0x50>
 8000d8e:	7bfb      	ldrb	r3, [r7, #15]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d00b      	beq.n	8000dac <a_llcc68_check_busy+0x50>
            {
                handle->delay_ms(10);                         /* delay 10 ms */
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d98:	200a      	movs	r0, #10
 8000d9a:	4798      	blx	r3
                timeout--;                                    /* timeout-- */
 8000d9c:	7bfb      	ldrb	r3, [r7, #15]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	73fb      	strb	r3, [r7, #15]
                if (timeout != 0)                             /* check timeout */
 8000da2:	7bfb      	ldrb	r3, [r7, #15]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d103      	bne.n	8000db0 <a_llcc68_check_busy+0x54>
                {
                    continue;                                 /* continue */
                }
                else
                {
                    return 1;                                 /* return error */
 8000da8:	2301      	movs	r3, #1
 8000daa:	e003      	b.n	8000db4 <a_llcc68_check_busy+0x58>
                }
            }
            else
            {
                return 1;                                     /* return error */
 8000dac:	2301      	movs	r3, #1
 8000dae:	e001      	b.n	8000db4 <a_llcc68_check_busy+0x58>
                    continue;                                 /* continue */
 8000db0:	bf00      	nop
        if (handle->busy_gpio_read((uint8_t *)&level) != 0)   /* read busy gpio */
 8000db2:	e7d9      	b.n	8000d68 <a_llcc68_check_busy+0xc>
            }
        }
    }
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3710      	adds	r7, #16
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <llcc68_irq_handler>:
 *            - 2 handle is NULL
 *            - 3 handle is not initialized
 * @note      none
 */
uint8_t llcc68_irq_handler(llcc68_handle_t *handle)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b086      	sub	sp, #24
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t buf[3]; 
    uint16_t status;
    
    if (handle == NULL)                                                                                        /* check handle */
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d101      	bne.n	8000dce <llcc68_irq_handler+0x12>
    {
        return 2;                                                                                              /* return error */
 8000dca:	2302      	movs	r3, #2
 8000dcc:	e178      	b.n	80010c0 <llcc68_irq_handler+0x304>
    }
    if (handle->inited != 1)                                                                                   /* check handle initialization */
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d001      	beq.n	8000ddc <llcc68_irq_handler+0x20>
    {
        return 3;                                                                                              /* return error */
 8000dd8:	2303      	movs	r3, #3
 8000dda:	e171      	b.n	80010c0 <llcc68_irq_handler+0x304>
    }
    
    memset(buf, 0, sizeof(uint8_t) * 3);                                                                       /* clear the buffer */
 8000ddc:	f107 030c 	add.w	r3, r7, #12
 8000de0:	2203      	movs	r2, #3
 8000de2:	2100      	movs	r1, #0
 8000de4:	4618      	mov	r0, r3
 8000de6:	f003 fd85 	bl	80048f4 <memset>
    res = a_llcc68_spi_read(handle, LLCC68_COMMAND_GET_IRQ_STATUS, (uint8_t *)buf, 3);                         /* read command */
 8000dea:	f107 020c 	add.w	r2, r7, #12
 8000dee:	2303      	movs	r3, #3
 8000df0:	2112      	movs	r1, #18
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f7ff fe45 	bl	8000a82 <a_llcc68_spi_read>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                                                              /* check result */
 8000dfc:	7dfb      	ldrb	r3, [r7, #23]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	d005      	beq.n	8000e0e <llcc68_irq_handler+0x52>
    {
        handle->debug_print("llcc68: get irq status failed.\n");                                               /* get irq status failed */
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e06:	489b      	ldr	r0, [pc, #620]	@ (8001074 <llcc68_irq_handler+0x2b8>)
 8000e08:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e158      	b.n	80010c0 <llcc68_irq_handler+0x304>
    }
    status = ((uint16_t)buf[1] << 8) | buf[2];                                                                 /* set status */
 8000e0e:	7b7b      	ldrb	r3, [r7, #13]
 8000e10:	021b      	lsls	r3, r3, #8
 8000e12:	b21a      	sxth	r2, r3
 8000e14:	7bbb      	ldrb	r3, [r7, #14]
 8000e16:	b21b      	sxth	r3, r3
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	b21b      	sxth	r3, r3
 8000e1c:	82bb      	strh	r3, [r7, #20]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_CLEAR_IRQ_STATUS, (uint8_t *)&buf[1], 2);                  /* write command */
 8000e1e:	f107 030c 	add.w	r3, r7, #12
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	2302      	movs	r3, #2
 8000e26:	2102      	movs	r1, #2
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff fe47 	bl	8000abc <a_llcc68_spi_write>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                                                              /* check result */
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d005      	beq.n	8000e44 <llcc68_irq_handler+0x88>
    {
        handle->debug_print("llcc68: clear irq status failed.\n");                                             /* clear irq status failed */
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e3c:	488e      	ldr	r0, [pc, #568]	@ (8001078 <llcc68_irq_handler+0x2bc>)
 8000e3e:	4798      	blx	r3
       
        return 1;                                                                                              /* return error */
 8000e40:	2301      	movs	r3, #1
 8000e42:	e13d      	b.n	80010c0 <llcc68_irq_handler+0x304>
    }
    
    handle->crc_error = 0;                                                                                     /* clear crc error */
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2200      	movs	r2, #0
 8000e48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    if ((status & LLCC68_IRQ_PREAMBLE_DETECTED) != 0)                                                          /* if preamble detected */
 8000e4c:	8abb      	ldrh	r3, [r7, #20]
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d009      	beq.n	8000e6a <llcc68_irq_handler+0xae>
    {
        if (handle->receive_callback != NULL)                                                                  /* if receive callback */
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d005      	beq.n	8000e6a <llcc68_irq_handler+0xae>
        {
            handle->receive_callback(LLCC68_IRQ_PREAMBLE_DETECTED, NULL, 0);                                   /* run callback */
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e62:	2200      	movs	r2, #0
 8000e64:	2100      	movs	r1, #0
 8000e66:	2004      	movs	r0, #4
 8000e68:	4798      	blx	r3
        }
    }
    if ((status & LLCC68_IRQ_SYNC_WORD_VALID) != 0)                                                            /* if valid sync word detected */
 8000e6a:	8abb      	ldrh	r3, [r7, #20]
 8000e6c:	f003 0308 	and.w	r3, r3, #8
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d009      	beq.n	8000e88 <llcc68_irq_handler+0xcc>
    {
        if (handle->receive_callback != NULL)                                                                  /* if receive callback */
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d005      	beq.n	8000e88 <llcc68_irq_handler+0xcc>
        {
            handle->receive_callback(LLCC68_IRQ_SYNC_WORD_VALID, NULL, 0);                                     /* run callback */
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2008      	movs	r0, #8
 8000e86:	4798      	blx	r3
        }
    }
    if ((status & LLCC68_IRQ_HEADER_VALID) != 0)                                                               /* if valid header */
 8000e88:	8abb      	ldrh	r3, [r7, #20]
 8000e8a:	f003 0310 	and.w	r3, r3, #16
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d009      	beq.n	8000ea6 <llcc68_irq_handler+0xea>
    {
        if (handle->receive_callback != NULL)                                                                  /* if receive callback */
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d005      	beq.n	8000ea6 <llcc68_irq_handler+0xea>
        {
            handle->receive_callback(LLCC68_IRQ_HEADER_VALID, NULL, 0);                                        /* run callback */
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2010      	movs	r0, #16
 8000ea4:	4798      	blx	r3
        }
    }
    if ((status & LLCC68_IRQ_HEADER_ERR) != 0)                                                                 /* if header error */
 8000ea6:	8abb      	ldrh	r3, [r7, #20]
 8000ea8:	f003 0320 	and.w	r3, r3, #32
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d009      	beq.n	8000ec4 <llcc68_irq_handler+0x108>
    {
        if (handle->receive_callback != NULL)                                                                  /* if receive callback */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d005      	beq.n	8000ec4 <llcc68_irq_handler+0x108>
        {
            handle->receive_callback(LLCC68_IRQ_HEADER_ERR, NULL, 0);                                          /* run callback */
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	2020      	movs	r0, #32
 8000ec2:	4798      	blx	r3
        }
    }
    if ((status & LLCC68_IRQ_CRC_ERR) != 0)                                                                    /* if crc error */
 8000ec4:	8abb      	ldrh	r3, [r7, #20]
 8000ec6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d00d      	beq.n	8000eea <llcc68_irq_handler+0x12e>
    {
        if (handle->receive_callback != NULL)                                                                  /* if receive callback */
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d005      	beq.n	8000ee2 <llcc68_irq_handler+0x126>
        {
            handle->receive_callback(LLCC68_IRQ_CRC_ERR, NULL, 0);                                             /* run callback */
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000eda:	2200      	movs	r2, #0
 8000edc:	2100      	movs	r1, #0
 8000ede:	2040      	movs	r0, #64	@ 0x40
 8000ee0:	4798      	blx	r3
        }
        handle->crc_error = 1;                                                                                 /* set crc error */
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2201      	movs	r2, #1
 8000ee6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }
    if ((status & LLCC68_IRQ_CAD_DONE) != 0)                                                                   /* if cad done */
 8000eea:	8abb      	ldrh	r3, [r7, #20]
 8000eec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d00d      	beq.n	8000f10 <llcc68_irq_handler+0x154>
    {
        if (handle->receive_callback != NULL)                                                                  /* if receive callback */
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d005      	beq.n	8000f08 <llcc68_irq_handler+0x14c>
        {
            handle->receive_callback(LLCC68_IRQ_CAD_DONE, NULL, 0);                                            /* run callback */
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f00:	2200      	movs	r2, #0
 8000f02:	2100      	movs	r1, #0
 8000f04:	2080      	movs	r0, #128	@ 0x80
 8000f06:	4798      	blx	r3
        }
        handle->cad_done = 1;                                                                                  /* set cad done */
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
    }
    if ((status & LLCC68_IRQ_CAD_DETECTED) != 0)                                                               /* if cad detected */
 8000f10:	8abb      	ldrh	r3, [r7, #20]
 8000f12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d00e      	beq.n	8000f38 <llcc68_irq_handler+0x17c>
    {
        if (handle->receive_callback != NULL)                                                                  /* if receive callback */
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d006      	beq.n	8000f30 <llcc68_irq_handler+0x174>
        {
            handle->receive_callback(LLCC68_IRQ_CAD_DETECTED, NULL, 0);                                        /* run callback */
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f26:	2200      	movs	r2, #0
 8000f28:	2100      	movs	r1, #0
 8000f2a:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000f2e:	4798      	blx	r3
        }
        handle->cad_detected = 1;                                                                              /* set detected */
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	2201      	movs	r2, #1
 8000f34:	f883 2033 	strb.w	r2, [r3, #51]	@ 0x33
    }
    if ((status & LLCC68_IRQ_TIMEOUT) != 0)                                                                    /* if timeout */
 8000f38:	8abb      	ldrh	r3, [r7, #20]
 8000f3a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d04e      	beq.n	8000fe0 <llcc68_irq_handler+0x224>
    {
        uint8_t control;
        uint8_t mask;
        
        control = 0x00;
 8000f42:	2300      	movs	r3, #0
 8000f44:	72fb      	strb	r3, [r7, #11]
        res = a_llcc68_spi_write_register(handle, LLCC68_REG_DIO3_OUTPUT_CONTROL, (uint8_t *)&control, 1);     /* write register */
 8000f46:	f107 020b 	add.w	r2, r7, #11
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	f44f 6112 	mov.w	r1, #2336	@ 0x920
 8000f50:	6878      	ldr	r0, [r7, #4]
 8000f52:	f7ff fe37 	bl	8000bc4 <a_llcc68_spi_write_register>
 8000f56:	4603      	mov	r3, r0
 8000f58:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                                          /* check result */
 8000f5a:	7dfb      	ldrb	r3, [r7, #23]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d005      	beq.n	8000f6c <llcc68_irq_handler+0x1b0>
        {
            handle->debug_print("llcc68: write register failed.\n");                                           /* write register failed */
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f64:	4845      	ldr	r0, [pc, #276]	@ (800107c <llcc68_irq_handler+0x2c0>)
 8000f66:	4798      	blx	r3
           
            return 1;                                                                                          /* return error */
 8000f68:	2301      	movs	r3, #1
 8000f6a:	e0a9      	b.n	80010c0 <llcc68_irq_handler+0x304>
        }
        
        /* read mask */
        res = a_llcc68_spi_read_register(handle, LLCC68_REG_EVENT_MASK, (uint8_t *)&mask, 1);                  /* read register */
 8000f6c:	f107 020a 	add.w	r2, r7, #10
 8000f70:	2301      	movs	r3, #1
 8000f72:	f640 1144 	movw	r1, #2372	@ 0x944
 8000f76:	6878      	ldr	r0, [r7, #4]
 8000f78:	f7ff fdde 	bl	8000b38 <a_llcc68_spi_read_register>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                                          /* check result */
 8000f80:	7dfb      	ldrb	r3, [r7, #23]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d005      	beq.n	8000f92 <llcc68_irq_handler+0x1d6>
        {
            handle->debug_print("llcc68: read register failed.\n");                                            /* read register failed */
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f8a:	483d      	ldr	r0, [pc, #244]	@ (8001080 <llcc68_irq_handler+0x2c4>)
 8000f8c:	4798      	blx	r3
           
            return 1;                                                                                          /* return error */
 8000f8e:	2301      	movs	r3, #1
 8000f90:	e096      	b.n	80010c0 <llcc68_irq_handler+0x304>
        }
        mask |= 0x02;                                                                                          /* set mask */
 8000f92:	7abb      	ldrb	r3, [r7, #10]
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	72bb      	strb	r3, [r7, #10]
        res = a_llcc68_spi_write_register(handle, LLCC68_REG_EVENT_MASK, (uint8_t *)&mask, 1);                 /* write register */
 8000f9c:	f107 020a 	add.w	r2, r7, #10
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	f640 1144 	movw	r1, #2372	@ 0x944
 8000fa6:	6878      	ldr	r0, [r7, #4]
 8000fa8:	f7ff fe0c 	bl	8000bc4 <a_llcc68_spi_write_register>
 8000fac:	4603      	mov	r3, r0
 8000fae:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                                          /* check result */
 8000fb0:	7dfb      	ldrb	r3, [r7, #23]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d005      	beq.n	8000fc2 <llcc68_irq_handler+0x206>
        {
            handle->debug_print("llcc68: write register failed.\n");                                           /* write register failed */
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000fba:	4830      	ldr	r0, [pc, #192]	@ (800107c <llcc68_irq_handler+0x2c0>)
 8000fbc:	4798      	blx	r3
           
            return 1;                                                                                          /* return error */
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e07e      	b.n	80010c0 <llcc68_irq_handler+0x304>
        }
        
        if (handle->receive_callback != NULL)                                                                  /* if receive callback */
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d006      	beq.n	8000fd8 <llcc68_irq_handler+0x21c>
        {
            handle->receive_callback(LLCC68_IRQ_TIMEOUT, NULL, 0);                                             /* run callback */
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fce:	2200      	movs	r2, #0
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000fd6:	4798      	blx	r3
        }
        handle->timeout = 1;                                                                                   /* flag timeout */
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	2201      	movs	r2, #1
 8000fdc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
    if ((status & LLCC68_IRQ_TX_DONE) != 0)                                                                    /* if tx done */
 8000fe0:	8abb      	ldrh	r3, [r7, #20]
 8000fe2:	f003 0301 	and.w	r3, r3, #1
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d00d      	beq.n	8001006 <llcc68_irq_handler+0x24a>
    {
        if (handle->receive_callback != NULL)                                                                  /* if receive callback */
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d005      	beq.n	8000ffe <llcc68_irq_handler+0x242>
        {
            handle->receive_callback(LLCC68_IRQ_TX_DONE, NULL, 0);                                             /* run callback */
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2001      	movs	r0, #1
 8000ffc:	4798      	blx	r3
        }
        handle->tx_done = 1;                                                                                   /* flag tx done */
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2201      	movs	r2, #1
 8001002:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    }
    if ((status & LLCC68_IRQ_RX_DONE) != 0)                                                                    /* if rx done */
 8001006:	8abb      	ldrh	r3, [r7, #20]
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	2b00      	cmp	r3, #0
 800100e:	d056      	beq.n	80010be <llcc68_irq_handler+0x302>
    {
        uint8_t payload_length_rx;
        uint8_t rx_start_buffer_pointer;
        
        memset(buf, 0, sizeof(uint8_t) * 3);                                                                   /* clear the buffer */
 8001010:	f107 030c 	add.w	r3, r7, #12
 8001014:	2203      	movs	r2, #3
 8001016:	2100      	movs	r1, #0
 8001018:	4618      	mov	r0, r3
 800101a:	f003 fc6b 	bl	80048f4 <memset>
        res = a_llcc68_spi_read(handle, LLCC68_COMMAND_GET_RX_BUFFER_STATUS, (uint8_t *)buf, 3);               /* read command */
 800101e:	f107 020c 	add.w	r2, r7, #12
 8001022:	2303      	movs	r3, #3
 8001024:	2113      	movs	r1, #19
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff fd2b 	bl	8000a82 <a_llcc68_spi_read>
 800102c:	4603      	mov	r3, r0
 800102e:	75fb      	strb	r3, [r7, #23]
        if (res != 0)                                                                                          /* check result */
 8001030:	7dfb      	ldrb	r3, [r7, #23]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d005      	beq.n	8001042 <llcc68_irq_handler+0x286>
        {
            handle->debug_print("llcc68: get rx buffer status failed.\n");                                     /* get rx buffer status failed */
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800103a:	4812      	ldr	r0, [pc, #72]	@ (8001084 <llcc68_irq_handler+0x2c8>)
 800103c:	4798      	blx	r3
           
            return 1;                                                                                          /* return error */
 800103e:	2301      	movs	r3, #1
 8001040:	e03e      	b.n	80010c0 <llcc68_irq_handler+0x304>
        }
        payload_length_rx = buf[1];                                                                            /* set status */
 8001042:	7b7b      	ldrb	r3, [r7, #13]
 8001044:	74fb      	strb	r3, [r7, #19]
        rx_start_buffer_pointer = buf[2];                                                                      /* set status */
 8001046:	7bbb      	ldrb	r3, [r7, #14]
 8001048:	74bb      	strb	r3, [r7, #18]
        
        res = a_llcc68_spi_read_buffer(handle, rx_start_buffer_pointer, handle->receive_buf,
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	f503 72db 	add.w	r2, r3, #438	@ 0x1b6
 8001050:	7cfb      	ldrb	r3, [r7, #19]
 8001052:	b29b      	uxth	r3, r3
 8001054:	7cb9      	ldrb	r1, [r7, #18]
 8001056:	6878      	ldr	r0, [r7, #4]
 8001058:	f7ff fe40 	bl	8000cdc <a_llcc68_spi_read_buffer>
 800105c:	4603      	mov	r3, r0
 800105e:	75fb      	strb	r3, [r7, #23]
                                       payload_length_rx);                                                     /* read buffer */
        if (res != 0)                                                                                          /* check result */
 8001060:	7dfb      	ldrb	r3, [r7, #23]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d012      	beq.n	800108c <llcc68_irq_handler+0x2d0>
        {
            handle->debug_print("llcc68: read buffer failed.\n");                                              /* read buffer failed */
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800106a:	4807      	ldr	r0, [pc, #28]	@ (8001088 <llcc68_irq_handler+0x2cc>)
 800106c:	4798      	blx	r3
           
            return 1;                                                                                          /* return error */
 800106e:	2301      	movs	r3, #1
 8001070:	e026      	b.n	80010c0 <llcc68_irq_handler+0x304>
 8001072:	bf00      	nop
 8001074:	08005260 	.word	0x08005260
 8001078:	08005280 	.word	0x08005280
 800107c:	080052a4 	.word	0x080052a4
 8001080:	080052c4 	.word	0x080052c4
 8001084:	080052e4 	.word	0x080052e4
 8001088:	0800530c 	.word	0x0800530c
        }
        if (handle->receive_callback != NULL)                                                                  /* if receive callback */
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d014      	beq.n	80010be <llcc68_irq_handler+0x302>
        {
            if (handle->crc_error == 0)                                                                        /* check crc error */
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800109a:	2b00      	cmp	r3, #0
 800109c:	d109      	bne.n	80010b2 <llcc68_irq_handler+0x2f6>
            {
                handle->receive_callback(LLCC68_IRQ_RX_DONE, handle->receive_buf, payload_length_rx);          /* run callback */
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	f502 71db 	add.w	r1, r2, #438	@ 0x1b6
 80010a8:	7cfa      	ldrb	r2, [r7, #19]
 80010aa:	b292      	uxth	r2, r2
 80010ac:	2002      	movs	r0, #2
 80010ae:	4798      	blx	r3
 80010b0:	e005      	b.n	80010be <llcc68_irq_handler+0x302>
            }
            else
            {
                handle->receive_callback(LLCC68_IRQ_RX_DONE, NULL, 0);                                         /* run callback */
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010b6:	2200      	movs	r2, #0
 80010b8:	2100      	movs	r1, #0
 80010ba:	2002      	movs	r0, #2
 80010bc:	4798      	blx	r3
            }
        }
    }
    
    return 0;                                                                                                  /* success return 0 */
 80010be:	2300      	movs	r3, #0
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}

080010c8 <llcc68_init>:
 *            - 5 busy gpio initialization failed
 *            - 6 reset chip failed
 * @note      none
 */
uint8_t llcc68_init(llcc68_handle_t *handle)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b084      	sub	sp, #16
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
    uint8_t buf[1];
    uint8_t prev;
    
    if (handle == NULL)                                                                    /* check handle */
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d101      	bne.n	80010da <llcc68_init+0x12>
    {
        return 2;                                                                          /* return error */
 80010d6:	2302      	movs	r3, #2
 80010d8:	e148      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->debug_print == NULL)                                                       /* check debug_print */
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d101      	bne.n	80010e6 <llcc68_init+0x1e>
    {
        return 3;                                                                          /* return error */
 80010e2:	2303      	movs	r3, #3
 80010e4:	e142      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->spi_init == NULL)                                                          /* check spi_init */
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	699b      	ldr	r3, [r3, #24]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d105      	bne.n	80010fa <llcc68_init+0x32>
    {
        handle->debug_print("llcc68: spi_init is null.\n");                                /* spi_init is null */
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010f2:	487e      	ldr	r0, [pc, #504]	@ (80012ec <llcc68_init+0x224>)
 80010f4:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 80010f6:	2303      	movs	r3, #3
 80010f8:	e138      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->spi_deinit == NULL)                                                        /* check spi_deinit */
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	69db      	ldr	r3, [r3, #28]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d105      	bne.n	800110e <llcc68_init+0x46>
    {
        handle->debug_print("llcc68: spi_deinit is null.\n");                              /* spi_deinit is null */
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001106:	487a      	ldr	r0, [pc, #488]	@ (80012f0 <llcc68_init+0x228>)
 8001108:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800110a:	2303      	movs	r3, #3
 800110c:	e12e      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->spi_write_read == NULL)                                                    /* check spi_write_read */
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	6a1b      	ldr	r3, [r3, #32]
 8001112:	2b00      	cmp	r3, #0
 8001114:	d105      	bne.n	8001122 <llcc68_init+0x5a>
    {
        handle->debug_print("llcc68: spi_write_read is null.\n");                          /* spi_write_read is null */
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800111a:	4876      	ldr	r0, [pc, #472]	@ (80012f4 <llcc68_init+0x22c>)
 800111c:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800111e:	2303      	movs	r3, #3
 8001120:	e124      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->reset_gpio_init == NULL)                                                   /* check reset_gpio_init */
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2b00      	cmp	r3, #0
 8001128:	d105      	bne.n	8001136 <llcc68_init+0x6e>
    {
        handle->debug_print("llcc68: reset_gpio_init is null.\n");                         /* reset_gpio_init is null */
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800112e:	4872      	ldr	r0, [pc, #456]	@ (80012f8 <llcc68_init+0x230>)
 8001130:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8001132:	2303      	movs	r3, #3
 8001134:	e11a      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->reset_gpio_deinit == NULL)                                                 /* check reset_gpio_deinit */
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d105      	bne.n	800114a <llcc68_init+0x82>
    {
        handle->debug_print("llcc68: reset_gpio_deinit is null.\n");                       /* reset_gpio_deinit is null */
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001142:	486e      	ldr	r0, [pc, #440]	@ (80012fc <llcc68_init+0x234>)
 8001144:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8001146:	2303      	movs	r3, #3
 8001148:	e110      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->reset_gpio_write == NULL)                                                  /* check reset_gpio_write */
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	689b      	ldr	r3, [r3, #8]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d105      	bne.n	800115e <llcc68_init+0x96>
    {
        handle->debug_print("llcc68: reset_gpio_write is null.\n");                        /* reset_gpio_write is null */
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001156:	486a      	ldr	r0, [pc, #424]	@ (8001300 <llcc68_init+0x238>)
 8001158:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800115a:	2303      	movs	r3, #3
 800115c:	e106      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->busy_gpio_init == NULL)                                                    /* check busy_gpio_init */
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	68db      	ldr	r3, [r3, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d105      	bne.n	8001172 <llcc68_init+0xaa>
    {
        handle->debug_print("llcc68: busy_gpio_init is null.\n");                          /* busy_gpio_init is null */
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800116a:	4866      	ldr	r0, [pc, #408]	@ (8001304 <llcc68_init+0x23c>)
 800116c:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 800116e:	2303      	movs	r3, #3
 8001170:	e0fc      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->busy_gpio_deinit == NULL)                                                  /* check busy_gpio_deinit */
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	691b      	ldr	r3, [r3, #16]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d105      	bne.n	8001186 <llcc68_init+0xbe>
    {
        handle->debug_print("llcc68: busy_gpio_deinit is null.\n");                        /* busy_gpio_deinit is null */
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800117e:	4862      	ldr	r0, [pc, #392]	@ (8001308 <llcc68_init+0x240>)
 8001180:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8001182:	2303      	movs	r3, #3
 8001184:	e0f2      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->busy_gpio_read == NULL)                                                    /* check busy_gpio_read */
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	695b      	ldr	r3, [r3, #20]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d105      	bne.n	800119a <llcc68_init+0xd2>
    {
        handle->debug_print("llcc68: busy_gpio_read is null.\n");                          /* busy_gpio_read is null */
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001192:	485e      	ldr	r0, [pc, #376]	@ (800130c <llcc68_init+0x244>)
 8001194:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 8001196:	2303      	movs	r3, #3
 8001198:	e0e8      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->delay_ms == NULL)                                                          /* check delay_ms */
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d105      	bne.n	80011ae <llcc68_init+0xe6>
    {
        handle->debug_print("llcc68: delay_ms is null.\n");                                /* delay_ms is null */
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011a6:	485a      	ldr	r0, [pc, #360]	@ (8001310 <llcc68_init+0x248>)
 80011a8:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 80011aa:	2303      	movs	r3, #3
 80011ac:	e0de      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->receive_callback == NULL)                                                  /* check receive_callback */
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d105      	bne.n	80011c2 <llcc68_init+0xfa>
    {
        handle->debug_print("llcc68: receive_callback is null.\n");                        /* receive_callback is null */
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ba:	4856      	ldr	r0, [pc, #344]	@ (8001314 <llcc68_init+0x24c>)
 80011bc:	4798      	blx	r3
       
        return 3;                                                                          /* return error */
 80011be:	2303      	movs	r3, #3
 80011c0:	e0d4      	b.n	800136c <llcc68_init+0x2a4>
    }
    
    if (handle->spi_init() != 0)                                                           /* spi initialization */
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	699b      	ldr	r3, [r3, #24]
 80011c6:	4798      	blx	r3
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d005      	beq.n	80011da <llcc68_init+0x112>
    {
        handle->debug_print("llcc68: spi initialization failed.\n");                       /* spi initialization failed */
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011d2:	4851      	ldr	r0, [pc, #324]	@ (8001318 <llcc68_init+0x250>)
 80011d4:	4798      	blx	r3
       
        return 1;                                                                          /* return error */ 
 80011d6:	2301      	movs	r3, #1
 80011d8:	e0c8      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->reset_gpio_init() != 0)                                                    /* reset gpio initialization */
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4798      	blx	r3
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d008      	beq.n	80011f8 <llcc68_init+0x130>
    {
        handle->debug_print("llcc68: reset gpio initialization failed.\n");                /* reset gpio initialization failed */
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011ea:	484c      	ldr	r0, [pc, #304]	@ (800131c <llcc68_init+0x254>)
 80011ec:	4798      	blx	r3
        (void)handle->spi_deinit();                                                        /* spi deinit */
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	69db      	ldr	r3, [r3, #28]
 80011f2:	4798      	blx	r3
        
        return 4;                                                                          /* return error */ 
 80011f4:	2304      	movs	r3, #4
 80011f6:	e0b9      	b.n	800136c <llcc68_init+0x2a4>
    }
    if (handle->busy_gpio_init() != 0)                                                     /* busy gpio initialization */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	4798      	blx	r3
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d00b      	beq.n	800121c <llcc68_init+0x154>
    {
        handle->debug_print("llcc68: busy gpio initialization failed.\n");                 /* busy gpio initialization failed */
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001208:	4845      	ldr	r0, [pc, #276]	@ (8001320 <llcc68_init+0x258>)
 800120a:	4798      	blx	r3
        (void)handle->spi_deinit();                                                        /* spi deinit */
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	69db      	ldr	r3, [r3, #28]
 8001210:	4798      	blx	r3
        (void)handle->reset_gpio_deinit();                                                 /* reset gpio deinit */
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	4798      	blx	r3
        
        return 5;                                                                          /* return error */ 
 8001218:	2305      	movs	r3, #5
 800121a:	e0a7      	b.n	800136c <llcc68_init+0x2a4>
    }
    
    if (handle->reset_gpio_write(1) != 0)                                                  /* set high */
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	2001      	movs	r0, #1
 8001222:	4798      	blx	r3
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d00e      	beq.n	8001248 <llcc68_init+0x180>
    {
        handle->debug_print("llcc68: reset chip failed.\n");                               /* reset chip failed */
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800122e:	483d      	ldr	r0, [pc, #244]	@ (8001324 <llcc68_init+0x25c>)
 8001230:	4798      	blx	r3
        (void)handle->spi_deinit();                                                        /* spi deinit */
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	69db      	ldr	r3, [r3, #28]
 8001236:	4798      	blx	r3
        (void)handle->reset_gpio_deinit();                                                 /* reset gpio deinit */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	4798      	blx	r3
        (void)handle->busy_gpio_deinit();                                                  /* busy gpio deinit */
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691b      	ldr	r3, [r3, #16]
 8001242:	4798      	blx	r3
        
        return 6;                                                                          /* return error */ 
 8001244:	2306      	movs	r3, #6
 8001246:	e091      	b.n	800136c <llcc68_init+0x2a4>
    }
    handle->delay_ms(5);                                                                   /* delay 5 ms */
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800124c:	2005      	movs	r0, #5
 800124e:	4798      	blx	r3
    if (handle->reset_gpio_write(0) != 0)                                                  /* set low */
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2000      	movs	r0, #0
 8001256:	4798      	blx	r3
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d00e      	beq.n	800127c <llcc68_init+0x1b4>
    {
        handle->debug_print("llcc68: reset chip failed.\n");                               /* reset chip failed */
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001262:	4830      	ldr	r0, [pc, #192]	@ (8001324 <llcc68_init+0x25c>)
 8001264:	4798      	blx	r3
        (void)handle->spi_deinit();                                                        /* spi deinit */
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	4798      	blx	r3
        (void)handle->reset_gpio_deinit();                                                 /* reset gpio deinit */
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	4798      	blx	r3
        (void)handle->busy_gpio_deinit();                                                  /* busy gpio deinit */
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	4798      	blx	r3
        
        return 6;                                                                          /* return error */ 
 8001278:	2306      	movs	r3, #6
 800127a:	e077      	b.n	800136c <llcc68_init+0x2a4>
    }
    handle->delay_ms(10);                                                                  /* delay 10 ms */
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001280:	200a      	movs	r0, #10
 8001282:	4798      	blx	r3
    if (handle->reset_gpio_write(1) != 0)                                                  /* set high */
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2001      	movs	r0, #1
 800128a:	4798      	blx	r3
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d00e      	beq.n	80012b0 <llcc68_init+0x1e8>
    {
        handle->debug_print("llcc68: reset chip failed.\n");                               /* reset chip failed */
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001296:	4823      	ldr	r0, [pc, #140]	@ (8001324 <llcc68_init+0x25c>)
 8001298:	4798      	blx	r3
        (void)handle->spi_deinit();                                                        /* spi deinit */
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	69db      	ldr	r3, [r3, #28]
 800129e:	4798      	blx	r3
        (void)handle->reset_gpio_deinit();                                                 /* reset gpio deinit */
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	4798      	blx	r3
        (void)handle->busy_gpio_deinit();                                                  /* busy gpio deinit */
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	691b      	ldr	r3, [r3, #16]
 80012aa:	4798      	blx	r3
        
        return 6;                                                                          /* return error */ 
 80012ac:	2306      	movs	r3, #6
 80012ae:	e05d      	b.n	800136c <llcc68_init+0x2a4>
    }
    handle->delay_ms(5);                                                                   /* delay 5 ms */
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012b4:	2005      	movs	r0, #5
 80012b6:	4798      	blx	r3
    
    if (a_llcc68_spi_read(handle, LLCC68_COMMAND_GET_STATUS, (uint8_t *)buf, 1) != 0)      /* read command */
 80012b8:	f107 020c 	add.w	r2, r7, #12
 80012bc:	2301      	movs	r3, #1
 80012be:	21c0      	movs	r1, #192	@ 0xc0
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff fbde 	bl	8000a82 <a_llcc68_spi_read>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d02f      	beq.n	800132c <llcc68_init+0x264>
    {
        handle->debug_print("llcc68: get status failed.\n");                               /* get status failed */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d0:	4815      	ldr	r0, [pc, #84]	@ (8001328 <llcc68_init+0x260>)
 80012d2:	4798      	blx	r3
        (void)handle->spi_deinit();                                                        /* spi deinit */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	69db      	ldr	r3, [r3, #28]
 80012d8:	4798      	blx	r3
        (void)handle->reset_gpio_deinit();                                                 /* reset gpio deinit */
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	4798      	blx	r3
        (void)handle->busy_gpio_deinit();                                                  /* busy gpio deinit */
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	691b      	ldr	r3, [r3, #16]
 80012e4:	4798      	blx	r3
        
        return 6;                                                                          /* return error */
 80012e6:	2306      	movs	r3, #6
 80012e8:	e040      	b.n	800136c <llcc68_init+0x2a4>
 80012ea:	bf00      	nop
 80012ec:	0800532c 	.word	0x0800532c
 80012f0:	08005348 	.word	0x08005348
 80012f4:	08005368 	.word	0x08005368
 80012f8:	0800538c 	.word	0x0800538c
 80012fc:	080053b0 	.word	0x080053b0
 8001300:	080053d4 	.word	0x080053d4
 8001304:	080053f8 	.word	0x080053f8
 8001308:	0800541c 	.word	0x0800541c
 800130c:	08005440 	.word	0x08005440
 8001310:	08005464 	.word	0x08005464
 8001314:	08005480 	.word	0x08005480
 8001318:	080054a4 	.word	0x080054a4
 800131c:	080054c8 	.word	0x080054c8
 8001320:	080054f4 	.word	0x080054f4
 8001324:	08005520 	.word	0x08005520
 8001328:	0800553c 	.word	0x0800553c
    }
    prev = 0x00;
 800132c:	2300      	movs	r3, #0
 800132e:	72fb      	strb	r3, [r7, #11]
    if (a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_STANDBY, (uint8_t *)&prev, 1) != 0)  /* write command */
 8001330:	f107 020b 	add.w	r2, r7, #11
 8001334:	2301      	movs	r3, #1
 8001336:	2180      	movs	r1, #128	@ 0x80
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff fbbf 	bl	8000abc <a_llcc68_spi_write>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d00e      	beq.n	8001362 <llcc68_init+0x29a>
    {
        handle->debug_print("llcc68: set standby failed.\n");                              /* set standby failed */
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001348:	480a      	ldr	r0, [pc, #40]	@ (8001374 <llcc68_init+0x2ac>)
 800134a:	4798      	blx	r3
        (void)handle->spi_deinit();                                                        /* spi deinit */
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69db      	ldr	r3, [r3, #28]
 8001350:	4798      	blx	r3
        (void)handle->reset_gpio_deinit();                                                 /* reset gpio deinit */
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	4798      	blx	r3
        (void)handle->busy_gpio_deinit();                                                  /* busy gpio deinit */
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	691b      	ldr	r3, [r3, #16]
 800135c:	4798      	blx	r3
        
        return 6;                                                                          /* return error */
 800135e:	2306      	movs	r3, #6
 8001360:	e004      	b.n	800136c <llcc68_init+0x2a4>
    }
    handle->inited = 1;                                                                    /* flag finish initialization */
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    
    return 0;                                                                              /* success return 0 */
 800136a:	2300      	movs	r3, #0
}
 800136c:	4618      	mov	r0, r3
 800136e:	3710      	adds	r7, #16
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	08005558 	.word	0x08005558

08001378 <llcc68_deinit>:
 *            - 6 busy gpio deinit failed
 *            - 7 reset gpio deinit failed
 * @note      none
 */
uint8_t llcc68_deinit(llcc68_handle_t *handle)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
    uint8_t res, prev;
    
    if (handle == NULL)                                                                    /* check handle */
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d101      	bne.n	800138a <llcc68_deinit+0x12>
    {
        return 2;                                                                          /* return error */
 8001386:	2302      	movs	r3, #2
 8001388:	e053      	b.n	8001432 <llcc68_deinit+0xba>
    }
    if (handle->inited != 1)                                                               /* check handle initialization */
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001390:	2b01      	cmp	r3, #1
 8001392:	d001      	beq.n	8001398 <llcc68_deinit+0x20>
    {
        return 3;                                                                          /* return error */
 8001394:	2303      	movs	r3, #3
 8001396:	e04c      	b.n	8001432 <llcc68_deinit+0xba>
    }
    
    res = a_llcc68_check_busy(handle);                                                     /* check busy */
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff fcdf 	bl	8000d5c <a_llcc68_check_busy>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                          /* check result */
 80013a2:	7bfb      	ldrb	r3, [r7, #15]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d005      	beq.n	80013b4 <llcc68_deinit+0x3c>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                    /* chip is busy */
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013ac:	4823      	ldr	r0, [pc, #140]	@ (800143c <llcc68_deinit+0xc4>)
 80013ae:	4798      	blx	r3
       
        return 4;                                                                          /* return error */
 80013b0:	2304      	movs	r3, #4
 80013b2:	e03e      	b.n	8001432 <llcc68_deinit+0xba>
    }
    
    prev = 0x00;                                                                           /* set power down */
 80013b4:	2300      	movs	r3, #0
 80013b6:	73bb      	strb	r3, [r7, #14]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_SLEEP, (uint8_t *)&prev, 1);       /* write command */
 80013b8:	f107 020e 	add.w	r2, r7, #14
 80013bc:	2301      	movs	r3, #1
 80013be:	2184      	movs	r1, #132	@ 0x84
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f7ff fb7b 	bl	8000abc <a_llcc68_spi_write>
 80013c6:	4603      	mov	r3, r0
 80013c8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                          /* check result */
 80013ca:	7bfb      	ldrb	r3, [r7, #15]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d005      	beq.n	80013dc <llcc68_deinit+0x64>
    {
        handle->debug_print("llcc68: power down failed.\n");                               /* power down failed */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d4:	481a      	ldr	r0, [pc, #104]	@ (8001440 <llcc68_deinit+0xc8>)
 80013d6:	4798      	blx	r3
       
        return 5;                                                                          /* return error */
 80013d8:	2305      	movs	r3, #5
 80013da:	e02a      	b.n	8001432 <llcc68_deinit+0xba>
    }
    
    res = handle->busy_gpio_deinit();                                                      /* busy gpio deinit */
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	691b      	ldr	r3, [r3, #16]
 80013e0:	4798      	blx	r3
 80013e2:	4603      	mov	r3, r0
 80013e4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                          /* check result */
 80013e6:	7bfb      	ldrb	r3, [r7, #15]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d005      	beq.n	80013f8 <llcc68_deinit+0x80>
    {
        handle->debug_print("llcc68: busy gpio deinit failed.\n");                         /* busy gpio deinit failed */
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013f0:	4814      	ldr	r0, [pc, #80]	@ (8001444 <llcc68_deinit+0xcc>)
 80013f2:	4798      	blx	r3
       
        return 6;                                                                          /* return error */
 80013f4:	2306      	movs	r3, #6
 80013f6:	e01c      	b.n	8001432 <llcc68_deinit+0xba>
    }
    res = handle->reset_gpio_deinit();                                                     /* reset gpio deinit */
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	4798      	blx	r3
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                          /* check result */
 8001402:	7bfb      	ldrb	r3, [r7, #15]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d005      	beq.n	8001414 <llcc68_deinit+0x9c>
    {
        handle->debug_print("llcc68: reset gpio deinit failed.\n");                        /* reset gpio deinit failed */
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800140c:	480e      	ldr	r0, [pc, #56]	@ (8001448 <llcc68_deinit+0xd0>)
 800140e:	4798      	blx	r3
       
        return 7;                                                                          /* return error */
 8001410:	2307      	movs	r3, #7
 8001412:	e00e      	b.n	8001432 <llcc68_deinit+0xba>
    }
    res = handle->spi_deinit();                                                            /* spi deinit */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	69db      	ldr	r3, [r3, #28]
 8001418:	4798      	blx	r3
 800141a:	4603      	mov	r3, r0
 800141c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                          /* check result */
 800141e:	7bfb      	ldrb	r3, [r7, #15]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d005      	beq.n	8001430 <llcc68_deinit+0xb8>
    {
        handle->debug_print("llcc68: spi deinit failed.\n");                               /* spi deinit failed */
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001428:	4808      	ldr	r0, [pc, #32]	@ (800144c <llcc68_deinit+0xd4>)
 800142a:	4798      	blx	r3
       
        return 1;                                                                          /* return error */
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <llcc68_deinit+0xba>
    }
    
    return 0;                                                                              /* success return 0 */
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	3710      	adds	r7, #16
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	08005578 	.word	0x08005578
 8001440:	08005590 	.word	0x08005590
 8001444:	080055ac 	.word	0x080055ac
 8001448:	080055d0 	.word	0x080055d0
 800144c:	080055f4 	.word	0x080055f4

08001450 <llcc68_check_packet_error>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t llcc68_check_packet_error(llcc68_handle_t *handle, llcc68_bool_t *enable)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
    if (handle == NULL)                                  /* check handle */
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <llcc68_check_packet_error+0x14>
    {
        return 2;                                        /* return error */
 8001460:	2302      	movs	r3, #2
 8001462:	e00c      	b.n	800147e <llcc68_check_packet_error+0x2e>
    }
    if (handle->inited != 1)                             /* check handle initialization */
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800146a:	2b01      	cmp	r3, #1
 800146c:	d001      	beq.n	8001472 <llcc68_check_packet_error+0x22>
    {
        return 3;                                        /* return error */
 800146e:	2303      	movs	r3, #3
 8001470:	e005      	b.n	800147e <llcc68_check_packet_error+0x2e>
    }
    
    *enable = (llcc68_bool_t)(handle->crc_error);        /* check error */
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	f893 2034 	ldrb.w	r2, [r3, #52]	@ 0x34
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	701a      	strb	r2, [r3, #0]
    
    return 0;                                            /* success return 0 */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	370c      	adds	r7, #12
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <llcc68_lora_transmit>:
 */
uint8_t llcc68_lora_transmit(llcc68_handle_t *handle, llcc68_clock_source_t standby_src,
                             uint16_t preamble_length, llcc68_lora_header_t header_type,
                             llcc68_lora_crc_type_t crc_type, llcc68_bool_t invert_iq_enable,
                             uint8_t *buf, uint16_t len, uint32_t us)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b088      	sub	sp, #32
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	4608      	mov	r0, r1
 8001496:	4611      	mov	r1, r2
 8001498:	461a      	mov	r2, r3
 800149a:	4603      	mov	r3, r0
 800149c:	70fb      	strb	r3, [r7, #3]
 800149e:	460b      	mov	r3, r1
 80014a0:	803b      	strh	r3, [r7, #0]
 80014a2:	4613      	mov	r3, r2
 80014a4:	70bb      	strb	r3, [r7, #2]
    uint8_t buffer[6];
    uint16_t clear_irq_param;
    uint32_t ms;
    uint32_t reg;
    
    if (handle == NULL)                                                                                    /* check handle */
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d101      	bne.n	80014b0 <llcc68_lora_transmit+0x24>
    {
        return 2;                                                                                          /* return error */
 80014ac:	2302      	movs	r3, #2
 80014ae:	e1b3      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    if (handle->inited != 1)                                                                               /* check handle initialization */
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d001      	beq.n	80014be <llcc68_lora_transmit+0x32>
    {
        return 3;                                                                                          /* return error */
 80014ba:	2303      	movs	r3, #3
 80014bc:	e1ac      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    
    res = a_llcc68_check_busy(handle);                                                                     /* check busy */
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff fc4c 	bl	8000d5c <a_llcc68_check_busy>
 80014c4:	4603      	mov	r3, r0
 80014c6:	76fb      	strb	r3, [r7, #27]
    if (res != 0)                                                                                          /* check result */
 80014c8:	7efb      	ldrb	r3, [r7, #27]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d005      	beq.n	80014da <llcc68_lora_transmit+0x4e>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                    /* chip is busy */
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014d2:	48a6      	ldr	r0, [pc, #664]	@ (800176c <llcc68_lora_transmit+0x2e0>)
 80014d4:	4798      	blx	r3
       
        return 4;                                                                                          /* return error */
 80014d6:	2304      	movs	r3, #4
 80014d8:	e19e      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    
    clear_irq_param = 0x03FF;                                                                              /* set mask */
 80014da:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80014de:	833b      	strh	r3, [r7, #24]
    buffer[0] = (clear_irq_param >> 8) & 0xFF;                                                             /* set param */
 80014e0:	8b3b      	ldrh	r3, [r7, #24]
 80014e2:	0a1b      	lsrs	r3, r3, #8
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	b2db      	uxtb	r3, r3
 80014e8:	733b      	strb	r3, [r7, #12]
    buffer[1] = (clear_irq_param >> 0) & 0xFF;                                                             /* set param */
 80014ea:	8b3b      	ldrh	r3, [r7, #24]
 80014ec:	b2db      	uxtb	r3, r3
 80014ee:	737b      	strb	r3, [r7, #13]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_CLEAR_IRQ_STATUS, (uint8_t *)buffer, 2);               /* write command */
 80014f0:	f107 020c 	add.w	r2, r7, #12
 80014f4:	2302      	movs	r3, #2
 80014f6:	2102      	movs	r1, #2
 80014f8:	6878      	ldr	r0, [r7, #4]
 80014fa:	f7ff fadf 	bl	8000abc <a_llcc68_spi_write>
 80014fe:	4603      	mov	r3, r0
 8001500:	76fb      	strb	r3, [r7, #27]
    if (res != 0)                                                                                          /* check result */
 8001502:	7efb      	ldrb	r3, [r7, #27]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d005      	beq.n	8001514 <llcc68_lora_transmit+0x88>
    {
        handle->debug_print("llcc68: clear irq status failed.\n");                                         /* clear irq status failed */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800150c:	4898      	ldr	r0, [pc, #608]	@ (8001770 <llcc68_lora_transmit+0x2e4>)
 800150e:	4798      	blx	r3
       
        return 1;                                                                                          /* return error */
 8001510:	2301      	movs	r3, #1
 8001512:	e181      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    
    res = a_llcc68_check_busy(handle);                                                                     /* check busy */
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f7ff fc21 	bl	8000d5c <a_llcc68_check_busy>
 800151a:	4603      	mov	r3, r0
 800151c:	76fb      	strb	r3, [r7, #27]
    if (res != 0)                                                                                          /* check result */
 800151e:	7efb      	ldrb	r3, [r7, #27]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <llcc68_lora_transmit+0xa4>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                    /* chip is busy */
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001528:	4890      	ldr	r0, [pc, #576]	@ (800176c <llcc68_lora_transmit+0x2e0>)
 800152a:	4798      	blx	r3
       
        return 4;                                                                                          /* return error */
 800152c:	2304      	movs	r3, #4
 800152e:	e173      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    
    prev = standby_src;                                                                                    /* set param */
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	74fb      	strb	r3, [r7, #19]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_STANDBY, (uint8_t *)&prev, 1);                     /* write command */
 8001534:	f107 0213 	add.w	r2, r7, #19
 8001538:	2301      	movs	r3, #1
 800153a:	2180      	movs	r1, #128	@ 0x80
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff fabd 	bl	8000abc <a_llcc68_spi_write>
 8001542:	4603      	mov	r3, r0
 8001544:	76fb      	strb	r3, [r7, #27]
    if (res != 0)                                                                                          /* check result */
 8001546:	7efb      	ldrb	r3, [r7, #27]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <llcc68_lora_transmit+0xcc>
    {
        handle->debug_print("llcc68: set standby failed.\n");                                              /* set standby failed */
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001550:	4888      	ldr	r0, [pc, #544]	@ (8001774 <llcc68_lora_transmit+0x2e8>)
 8001552:	4798      	blx	r3
       
        return 1;                                                                                          /* return error */
 8001554:	2301      	movs	r3, #1
 8001556:	e15f      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    
    res = a_llcc68_check_busy(handle);                                                                     /* check busy */
 8001558:	6878      	ldr	r0, [r7, #4]
 800155a:	f7ff fbff 	bl	8000d5c <a_llcc68_check_busy>
 800155e:	4603      	mov	r3, r0
 8001560:	76fb      	strb	r3, [r7, #27]
    if (res != 0)                                                                                          /* check result */
 8001562:	7efb      	ldrb	r3, [r7, #27]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d005      	beq.n	8001574 <llcc68_lora_transmit+0xe8>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                    /* chip is busy */
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800156c:	487f      	ldr	r0, [pc, #508]	@ (800176c <llcc68_lora_transmit+0x2e0>)
 800156e:	4798      	blx	r3
       
        return 4;                                                                                          /* return error */
 8001570:	2304      	movs	r3, #4
 8001572:	e151      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    
    buffer[0] = (preamble_length >> 8) & 0xFF;                                                             /* set param */
 8001574:	883b      	ldrh	r3, [r7, #0]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	b29b      	uxth	r3, r3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	733b      	strb	r3, [r7, #12]
    buffer[1] = (preamble_length >> 0) & 0xFF;                                                             /* set param */
 800157e:	883b      	ldrh	r3, [r7, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	737b      	strb	r3, [r7, #13]
    buffer[2] = header_type;                                                                               /* set param */
 8001584:	78bb      	ldrb	r3, [r7, #2]
 8001586:	73bb      	strb	r3, [r7, #14]
    buffer[3] = (uint8_t)len;                                                                              /* set param */
 8001588:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800158a:	b2db      	uxtb	r3, r3
 800158c:	73fb      	strb	r3, [r7, #15]
    buffer[4] = crc_type;                                                                                  /* set param */
 800158e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001592:	743b      	strb	r3, [r7, #16]
    buffer[5] = invert_iq_enable;                                                                          /* set param */
 8001594:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001598:	747b      	strb	r3, [r7, #17]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_PACKET_PARAMS, (uint8_t *)buffer, 6);              /* write command */
 800159a:	f107 020c 	add.w	r2, r7, #12
 800159e:	2306      	movs	r3, #6
 80015a0:	218c      	movs	r1, #140	@ 0x8c
 80015a2:	6878      	ldr	r0, [r7, #4]
 80015a4:	f7ff fa8a 	bl	8000abc <a_llcc68_spi_write>
 80015a8:	4603      	mov	r3, r0
 80015aa:	76fb      	strb	r3, [r7, #27]
    if (res != 0)                                                                                          /* check result */
 80015ac:	7efb      	ldrb	r3, [r7, #27]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d005      	beq.n	80015be <llcc68_lora_transmit+0x132>
    {
        handle->debug_print("llcc68: set lora modulation params failed.\n");                               /* set lora modulation params failed */
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015b6:	4870      	ldr	r0, [pc, #448]	@ (8001778 <llcc68_lora_transmit+0x2ec>)
 80015b8:	4798      	blx	r3
       
        return 1;                                                                                          /* return error */
 80015ba:	2301      	movs	r3, #1
 80015bc:	e12c      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    
    if (invert_iq_enable == LLCC68_BOOL_FALSE)                                                             /* not invert iq */
 80015be:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d138      	bne.n	8001638 <llcc68_lora_transmit+0x1ac>
    {
        uint8_t setup;
        
        res = a_llcc68_check_busy(handle);                                                                 /* check busy */
 80015c6:	6878      	ldr	r0, [r7, #4]
 80015c8:	f7ff fbc8 	bl	8000d5c <a_llcc68_check_busy>
 80015cc:	4603      	mov	r3, r0
 80015ce:	76fb      	strb	r3, [r7, #27]
        if (res != 0)                                                                                      /* check result */
 80015d0:	7efb      	ldrb	r3, [r7, #27]
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d005      	beq.n	80015e2 <llcc68_lora_transmit+0x156>
        {
            handle->debug_print("llcc68: chip is busy.\n");                                                /* chip is busy */
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015da:	4864      	ldr	r0, [pc, #400]	@ (800176c <llcc68_lora_transmit+0x2e0>)
 80015dc:	4798      	blx	r3
           
            return 4;                                                                                      /* return error */
 80015de:	2304      	movs	r3, #4
 80015e0:	e11a      	b.n	8001818 <llcc68_lora_transmit+0x38c>
        }
        
        res = a_llcc68_spi_read_register(handle, LLCC68_REG_IQ_POLARITY_SETUP, (uint8_t *)&setup, 1);      /* read register */
 80015e2:	f107 020b 	add.w	r2, r7, #11
 80015e6:	2301      	movs	r3, #1
 80015e8:	f240 7136 	movw	r1, #1846	@ 0x736
 80015ec:	6878      	ldr	r0, [r7, #4]
 80015ee:	f7ff faa3 	bl	8000b38 <a_llcc68_spi_read_register>
 80015f2:	4603      	mov	r3, r0
 80015f4:	76fb      	strb	r3, [r7, #27]
        if (res != 0)                                                                                      /* check result */
 80015f6:	7efb      	ldrb	r3, [r7, #27]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d005      	beq.n	8001608 <llcc68_lora_transmit+0x17c>
        {
            handle->debug_print("llcc68: read register failed.\n");                                        /* read register failed */
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001600:	485e      	ldr	r0, [pc, #376]	@ (800177c <llcc68_lora_transmit+0x2f0>)
 8001602:	4798      	blx	r3
           
            return 1;                                                                                      /* return error */
 8001604:	2301      	movs	r3, #1
 8001606:	e107      	b.n	8001818 <llcc68_lora_transmit+0x38c>
        }
        
        setup |= (1 << 2);                                                                                 /* set bit 2 */
 8001608:	7afb      	ldrb	r3, [r7, #11]
 800160a:	f043 0304 	orr.w	r3, r3, #4
 800160e:	b2db      	uxtb	r3, r3
 8001610:	72fb      	strb	r3, [r7, #11]
        res = a_llcc68_spi_write_register(handle, LLCC68_REG_IQ_POLARITY_SETUP, (uint8_t *)&setup, 1);     /* read register */
 8001612:	f107 020b 	add.w	r2, r7, #11
 8001616:	2301      	movs	r3, #1
 8001618:	f240 7136 	movw	r1, #1846	@ 0x736
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fad1 	bl	8000bc4 <a_llcc68_spi_write_register>
 8001622:	4603      	mov	r3, r0
 8001624:	76fb      	strb	r3, [r7, #27]
        if (res != 0)                                                                                      /* check result */
 8001626:	7efb      	ldrb	r3, [r7, #27]
 8001628:	2b00      	cmp	r3, #0
 800162a:	d03e      	beq.n	80016aa <llcc68_lora_transmit+0x21e>
        {
            handle->debug_print("llcc68: read register failed.\n");                                        /* read register failed */
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001630:	4852      	ldr	r0, [pc, #328]	@ (800177c <llcc68_lora_transmit+0x2f0>)
 8001632:	4798      	blx	r3
           
            return 1;                                                                                      /* return error */
 8001634:	2301      	movs	r3, #1
 8001636:	e0ef      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    else
    {
        uint8_t setup;
        
        res = a_llcc68_check_busy(handle);                                                                 /* check busy */
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7ff fb8f 	bl	8000d5c <a_llcc68_check_busy>
 800163e:	4603      	mov	r3, r0
 8001640:	76fb      	strb	r3, [r7, #27]
        if (res != 0)                                                                                      /* check result */
 8001642:	7efb      	ldrb	r3, [r7, #27]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d005      	beq.n	8001654 <llcc68_lora_transmit+0x1c8>
        {
            handle->debug_print("llcc68: chip is busy.\n");                                                /* chip is busy */
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164c:	4847      	ldr	r0, [pc, #284]	@ (800176c <llcc68_lora_transmit+0x2e0>)
 800164e:	4798      	blx	r3
           
            return 4;                                                                                      /* return error */
 8001650:	2304      	movs	r3, #4
 8001652:	e0e1      	b.n	8001818 <llcc68_lora_transmit+0x38c>
        }
        
        res = a_llcc68_spi_read_register(handle, LLCC68_REG_IQ_POLARITY_SETUP, (uint8_t *)&setup, 1);      /* read register */
 8001654:	f107 020a 	add.w	r2, r7, #10
 8001658:	2301      	movs	r3, #1
 800165a:	f240 7136 	movw	r1, #1846	@ 0x736
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f7ff fa6a 	bl	8000b38 <a_llcc68_spi_read_register>
 8001664:	4603      	mov	r3, r0
 8001666:	76fb      	strb	r3, [r7, #27]
        if (res != 0)                                                                                      /* check result */
 8001668:	7efb      	ldrb	r3, [r7, #27]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d005      	beq.n	800167a <llcc68_lora_transmit+0x1ee>
        {
            handle->debug_print("llcc68: read register failed.\n");                                        /* read register failed */
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001672:	4842      	ldr	r0, [pc, #264]	@ (800177c <llcc68_lora_transmit+0x2f0>)
 8001674:	4798      	blx	r3
           
            return 1;                                                                                      /* return error */
 8001676:	2301      	movs	r3, #1
 8001678:	e0ce      	b.n	8001818 <llcc68_lora_transmit+0x38c>
        }
        
        setup &= ~(1 << 2);                                                                                /* clear bit 2 */
 800167a:	7abb      	ldrb	r3, [r7, #10]
 800167c:	f023 0304 	bic.w	r3, r3, #4
 8001680:	b2db      	uxtb	r3, r3
 8001682:	72bb      	strb	r3, [r7, #10]
        res = a_llcc68_spi_write_register(handle, LLCC68_REG_IQ_POLARITY_SETUP, (uint8_t *)&setup, 1);     /* read register */
 8001684:	f107 020a 	add.w	r2, r7, #10
 8001688:	2301      	movs	r3, #1
 800168a:	f240 7136 	movw	r1, #1846	@ 0x736
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff fa98 	bl	8000bc4 <a_llcc68_spi_write_register>
 8001694:	4603      	mov	r3, r0
 8001696:	76fb      	strb	r3, [r7, #27]
        if (res != 0)                                                                                      /* check result */
 8001698:	7efb      	ldrb	r3, [r7, #27]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <llcc68_lora_transmit+0x21e>
        {
            handle->debug_print("llcc68: read register failed.\n");                                        /* read register failed */
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016a2:	4836      	ldr	r0, [pc, #216]	@ (800177c <llcc68_lora_transmit+0x2f0>)
 80016a4:	4798      	blx	r3
           
            return 1;                                                                                      /* return error */
 80016a6:	2301      	movs	r3, #1
 80016a8:	e0b6      	b.n	8001818 <llcc68_lora_transmit+0x38c>
        }
    }
    
    res = a_llcc68_check_busy(handle);                                                                     /* check busy */
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff fb56 	bl	8000d5c <a_llcc68_check_busy>
 80016b0:	4603      	mov	r3, r0
 80016b2:	76fb      	strb	r3, [r7, #27]
    if (res != 0)                                                                                          /* check result */
 80016b4:	7efb      	ldrb	r3, [r7, #27]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <llcc68_lora_transmit+0x23a>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                    /* chip is busy */
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016be:	482b      	ldr	r0, [pc, #172]	@ (800176c <llcc68_lora_transmit+0x2e0>)
 80016c0:	4798      	blx	r3
       
        return 4;                                                                                          /* return error */
 80016c2:	2304      	movs	r3, #4
 80016c4:	e0a8      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    
    if (a_llcc68_spi_write_buffer(handle, 0x00, buf, len) != 0)                                            /* write buffer */
 80016c6:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80016c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80016ca:	2100      	movs	r1, #0
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff fac3 	bl	8000c58 <a_llcc68_spi_write_buffer>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d005      	beq.n	80016e4 <llcc68_lora_transmit+0x258>
    {
        handle->debug_print("llcc68: write buffer failed.\n");                                             /* write buffer failed */
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016dc:	4828      	ldr	r0, [pc, #160]	@ (8001780 <llcc68_lora_transmit+0x2f4>)
 80016de:	4798      	blx	r3
       
        return 1;                                                                                          /* return error */
 80016e0:	2301      	movs	r3, #1
 80016e2:	e099      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    
    res = a_llcc68_check_busy(handle);                                                                     /* check busy */
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f7ff fb39 	bl	8000d5c <a_llcc68_check_busy>
 80016ea:	4603      	mov	r3, r0
 80016ec:	76fb      	strb	r3, [r7, #27]
    if (res != 0)                                                                                          /* check result */
 80016ee:	7efb      	ldrb	r3, [r7, #27]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d005      	beq.n	8001700 <llcc68_lora_transmit+0x274>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                    /* chip is busy */
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016f8:	481c      	ldr	r0, [pc, #112]	@ (800176c <llcc68_lora_transmit+0x2e0>)
 80016fa:	4798      	blx	r3
       
        return 4;                                                                                          /* return error */
 80016fc:	2304      	movs	r3, #4
 80016fe:	e08b      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    
    reg = (uint32_t)(us / 15.625);                                                                         /* convert the timeout */
 8001700:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8001702:	f7fe ff07 	bl	8000514 <__aeabi_ui2d>
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <llcc68_lora_transmit+0x2f8>)
 800170c:	f7ff f8a6 	bl	800085c <__aeabi_ddiv>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	f7ff f988 	bl	8000a2c <__aeabi_d2uiz>
 800171c:	4603      	mov	r3, r0
 800171e:	617b      	str	r3, [r7, #20]
    buffer[0] = (reg >> 16) & 0xFF;                                                                        /* bit 23 : 16 */
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	0c1b      	lsrs	r3, r3, #16
 8001724:	b2db      	uxtb	r3, r3
 8001726:	733b      	strb	r3, [r7, #12]
    buffer[1] = (reg >> 8) & 0xFF;                                                                         /* bit 15 : 8 */
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	0a1b      	lsrs	r3, r3, #8
 800172c:	b2db      	uxtb	r3, r3
 800172e:	737b      	strb	r3, [r7, #13]
    buffer[2] = (reg >> 0) & 0xFF;                                                                         /* bit 7 : 0 */
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	73bb      	strb	r3, [r7, #14]
    handle->tx_done = 0;                                                                                   /* flag 0 */
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    handle->timeout = 0;                                                                                   /* flag 0 */
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2200      	movs	r2, #0
 8001742:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_TX, (uint8_t *)buffer, 3);                         /* write command */
 8001746:	f107 020c 	add.w	r2, r7, #12
 800174a:	2303      	movs	r3, #3
 800174c:	2183      	movs	r1, #131	@ 0x83
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7ff f9b4 	bl	8000abc <a_llcc68_spi_write>
 8001754:	4603      	mov	r3, r0
 8001756:	76fb      	strb	r3, [r7, #27]
    if (res != 0)                                                                                          /* check result */
 8001758:	7efb      	ldrb	r3, [r7, #27]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d016      	beq.n	800178c <llcc68_lora_transmit+0x300>
    {
        handle->debug_print("llcc68: set tx failed.\n");                                                   /* set tx failed */
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	4809      	ldr	r0, [pc, #36]	@ (8001788 <llcc68_lora_transmit+0x2fc>)
 8001764:	4798      	blx	r3
       
        return 1;                                                                                          /* return error */
 8001766:	2301      	movs	r3, #1
 8001768:	e056      	b.n	8001818 <llcc68_lora_transmit+0x38c>
 800176a:	bf00      	nop
 800176c:	08005578 	.word	0x08005578
 8001770:	08005280 	.word	0x08005280
 8001774:	08005558 	.word	0x08005558
 8001778:	0800565c 	.word	0x0800565c
 800177c:	080052c4 	.word	0x080052c4
 8001780:	08005688 	.word	0x08005688
 8001784:	402f4000 	.word	0x402f4000
 8001788:	080056a8 	.word	0x080056a8
    }
    ms = us / 1000 + 10000;                                                                                /* set timeout */
 800178c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800178e:	4a24      	ldr	r2, [pc, #144]	@ (8001820 <llcc68_lora_transmit+0x394>)
 8001790:	fba2 2303 	umull	r2, r3, r2, r3
 8001794:	099b      	lsrs	r3, r3, #6
 8001796:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 800179a:	3310      	adds	r3, #16
 800179c:	61fb      	str	r3, [r7, #28]
    while ((ms != 0) && (handle->tx_done == 0) && (handle->timeout == 0))                                  /* check timeout */
 800179e:	e006      	b.n	80017ae <llcc68_lora_transmit+0x322>
    {
        handle->delay_ms(1);                                                                               /* delay 1 ms */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017a4:	2001      	movs	r0, #1
 80017a6:	4798      	blx	r3
        ms--;                                                                                              /* ms-- */
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	3b01      	subs	r3, #1
 80017ac:	61fb      	str	r3, [r7, #28]
    while ((ms != 0) && (handle->tx_done == 0) && (handle->timeout == 0))                                  /* check timeout */
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d009      	beq.n	80017c8 <llcc68_lora_transmit+0x33c>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d104      	bne.n	80017c8 <llcc68_lora_transmit+0x33c>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d0eb      	beq.n	80017a0 <llcc68_lora_transmit+0x314>
    }
    if ((ms != 0) && (handle->tx_done == 1))                                                               /* check the result */
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <llcc68_lora_transmit+0x350>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <llcc68_lora_transmit+0x350>
    {
        return 0;                                                                                          /* success return 0 */
 80017d8:	2300      	movs	r3, #0
 80017da:	e01d      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    else if ((ms == 0) && (handle->tx_done == 0))                                                          /* check the result */
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d10a      	bne.n	80017f8 <llcc68_lora_transmit+0x36c>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d105      	bne.n	80017f8 <llcc68_lora_transmit+0x36c>
    {
        handle->debug_print("llcc68: sent timeout.\n");                                                    /* sent timeout */
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f0:	480c      	ldr	r0, [pc, #48]	@ (8001824 <llcc68_lora_transmit+0x398>)
 80017f2:	4798      	blx	r3
       
        return 5;                                                                                          /* return error */
 80017f4:	2305      	movs	r3, #5
 80017f6:	e00f      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    else if (handle->timeout == 1)                                                                         /* check the result */
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80017fe:	2b01      	cmp	r3, #1
 8001800:	d105      	bne.n	800180e <llcc68_lora_transmit+0x382>
    {
        handle->debug_print("llcc68: irq timeout.\n");                                                     /* irq timeout */
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001806:	4808      	ldr	r0, [pc, #32]	@ (8001828 <llcc68_lora_transmit+0x39c>)
 8001808:	4798      	blx	r3
       
        return 6;                                                                                          /* return error */
 800180a:	2306      	movs	r3, #6
 800180c:	e004      	b.n	8001818 <llcc68_lora_transmit+0x38c>
    }
    else
    {
        handle->debug_print("llcc68: unknown result.\n");                                                  /* unknown result */
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001812:	4806      	ldr	r0, [pc, #24]	@ (800182c <llcc68_lora_transmit+0x3a0>)
 8001814:	4798      	blx	r3
       
        return 7;                                                                                          /* return error */
 8001816:	2307      	movs	r3, #7
    }
}
 8001818:	4618      	mov	r0, r3
 800181a:	3720      	adds	r7, #32
 800181c:	46bd      	mov	sp, r7
 800181e:	bd80      	pop	{r7, pc}
 8001820:	10624dd3 	.word	0x10624dd3
 8001824:	080056c0 	.word	0x080056c0
 8001828:	080056d8 	.word	0x080056d8
 800182c:	080056f0 	.word	0x080056f0

08001830 <llcc68_set_standby>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_standby(llcc68_handle_t *handle, llcc68_clock_source_t src)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                    /* check handle */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d101      	bne.n	8001846 <llcc68_set_standby+0x16>
    {
        return 2;                                                                          /* return error */
 8001842:	2302      	movs	r3, #2
 8001844:	e029      	b.n	800189a <llcc68_set_standby+0x6a>
    }
    if (handle->inited != 1)                                                               /* check handle initialization */
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800184c:	2b01      	cmp	r3, #1
 800184e:	d001      	beq.n	8001854 <llcc68_set_standby+0x24>
    {
        return 3;                                                                          /* return error */
 8001850:	2303      	movs	r3, #3
 8001852:	e022      	b.n	800189a <llcc68_set_standby+0x6a>
    }

    res = a_llcc68_check_busy(handle);                                                     /* check busy */
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff fa81 	bl	8000d5c <a_llcc68_check_busy>
 800185a:	4603      	mov	r3, r0
 800185c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                          /* check result */
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d005      	beq.n	8001870 <llcc68_set_standby+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                    /* chip is busy */
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001868:	480e      	ldr	r0, [pc, #56]	@ (80018a4 <llcc68_set_standby+0x74>)
 800186a:	4798      	blx	r3
       
        return 4;                                                                          /* return error */
 800186c:	2304      	movs	r3, #4
 800186e:	e014      	b.n	800189a <llcc68_set_standby+0x6a>
    }
    
    prev = src;                                                                            /* set param */
 8001870:	78fb      	ldrb	r3, [r7, #3]
 8001872:	73bb      	strb	r3, [r7, #14]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_STANDBY, (uint8_t *)&prev, 1);     /* write command */
 8001874:	f107 020e 	add.w	r2, r7, #14
 8001878:	2301      	movs	r3, #1
 800187a:	2180      	movs	r1, #128	@ 0x80
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f7ff f91d 	bl	8000abc <a_llcc68_spi_write>
 8001882:	4603      	mov	r3, r0
 8001884:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                          /* check result */
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <llcc68_set_standby+0x68>
    {
        handle->debug_print("llcc68: set standby failed.\n");                              /* set standby failed */
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001890:	4805      	ldr	r0, [pc, #20]	@ (80018a8 <llcc68_set_standby+0x78>)
 8001892:	4798      	blx	r3
       
        return 1;                                                                          /* return error */
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <llcc68_set_standby+0x6a>
    }
    
    return 0;                                                                              /* success return 0 */
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3710      	adds	r7, #16
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	08005578 	.word	0x08005578
 80018a8:	08005558 	.word	0x08005558

080018ac <llcc68_set_stop_timer_on_preamble>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_stop_timer_on_preamble(llcc68_handle_t *handle, llcc68_bool_t enable)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                                 /* check handle */
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d101      	bne.n	80018c2 <llcc68_set_stop_timer_on_preamble+0x16>
    {
        return 2;                                                                                       /* return error */
 80018be:	2302      	movs	r3, #2
 80018c0:	e029      	b.n	8001916 <llcc68_set_stop_timer_on_preamble+0x6a>
    }
    if (handle->inited != 1)                                                                            /* check handle initialization */
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d001      	beq.n	80018d0 <llcc68_set_stop_timer_on_preamble+0x24>
    {
        return 3;                                                                                       /* return error */
 80018cc:	2303      	movs	r3, #3
 80018ce:	e022      	b.n	8001916 <llcc68_set_stop_timer_on_preamble+0x6a>
    }

    res = a_llcc68_check_busy(handle);                                                                  /* check busy */
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f7ff fa43 	bl	8000d5c <a_llcc68_check_busy>
 80018d6:	4603      	mov	r3, r0
 80018d8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                       /* check result */
 80018da:	7bfb      	ldrb	r3, [r7, #15]
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d005      	beq.n	80018ec <llcc68_set_stop_timer_on_preamble+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                 /* chip is busy */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e4:	480e      	ldr	r0, [pc, #56]	@ (8001920 <llcc68_set_stop_timer_on_preamble+0x74>)
 80018e6:	4798      	blx	r3
       
        return 4;                                                                                       /* return error */
 80018e8:	2304      	movs	r3, #4
 80018ea:	e014      	b.n	8001916 <llcc68_set_stop_timer_on_preamble+0x6a>
    }
    
    prev = enable;                                                                                      /* set param */
 80018ec:	78fb      	ldrb	r3, [r7, #3]
 80018ee:	73bb      	strb	r3, [r7, #14]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_STOP_TIMER_ON_PREAMBLE, (uint8_t *)&prev, 1);       /* write command */
 80018f0:	f107 020e 	add.w	r2, r7, #14
 80018f4:	2301      	movs	r3, #1
 80018f6:	219f      	movs	r1, #159	@ 0x9f
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f7ff f8df 	bl	8000abc <a_llcc68_spi_write>
 80018fe:	4603      	mov	r3, r0
 8001900:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                       /* check result */
 8001902:	7bfb      	ldrb	r3, [r7, #15]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d005      	beq.n	8001914 <llcc68_set_stop_timer_on_preamble+0x68>
    {
        handle->debug_print("llcc68: set stop timer on preamble failed.\n");                            /* set stop timer on preamble failed */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190c:	4805      	ldr	r0, [pc, #20]	@ (8001924 <llcc68_set_stop_timer_on_preamble+0x78>)
 800190e:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 8001910:	2301      	movs	r3, #1
 8001912:	e000      	b.n	8001916 <llcc68_set_stop_timer_on_preamble+0x6a>
    }
    
    return 0;                                                                                           /* success return 0 */
 8001914:	2300      	movs	r3, #0
}
 8001916:	4618      	mov	r0, r3
 8001918:	3710      	adds	r7, #16
 800191a:	46bd      	mov	sp, r7
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	08005578 	.word	0x08005578
 8001924:	08005740 	.word	0x08005740

08001928 <llcc68_set_regulator_mode>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_regulator_mode(llcc68_handle_t *handle, llcc68_regulator_mode_t mode)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
 8001930:	460b      	mov	r3, r1
 8001932:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                             /* check handle */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d101      	bne.n	800193e <llcc68_set_regulator_mode+0x16>
    {
        return 2;                                                                                   /* return error */
 800193a:	2302      	movs	r3, #2
 800193c:	e029      	b.n	8001992 <llcc68_set_regulator_mode+0x6a>
    }
    if (handle->inited != 1)                                                                        /* check handle initialization */
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001944:	2b01      	cmp	r3, #1
 8001946:	d001      	beq.n	800194c <llcc68_set_regulator_mode+0x24>
    {
        return 3;                                                                                   /* return error */
 8001948:	2303      	movs	r3, #3
 800194a:	e022      	b.n	8001992 <llcc68_set_regulator_mode+0x6a>
    }

    res = a_llcc68_check_busy(handle);                                                              /* check busy */
 800194c:	6878      	ldr	r0, [r7, #4]
 800194e:	f7ff fa05 	bl	8000d5c <a_llcc68_check_busy>
 8001952:	4603      	mov	r3, r0
 8001954:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                   /* check result */
 8001956:	7bfb      	ldrb	r3, [r7, #15]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d005      	beq.n	8001968 <llcc68_set_regulator_mode+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                             /* chip is busy */
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001960:	480e      	ldr	r0, [pc, #56]	@ (800199c <llcc68_set_regulator_mode+0x74>)
 8001962:	4798      	blx	r3
       
        return 4;                                                                                   /* return error */
 8001964:	2304      	movs	r3, #4
 8001966:	e014      	b.n	8001992 <llcc68_set_regulator_mode+0x6a>
    }
    
    prev = mode;                                                                                    /* set param */
 8001968:	78fb      	ldrb	r3, [r7, #3]
 800196a:	73bb      	strb	r3, [r7, #14]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_REGULATOR_MODE, (uint8_t *)&prev, 1);       /* write command */
 800196c:	f107 020e 	add.w	r2, r7, #14
 8001970:	2301      	movs	r3, #1
 8001972:	2196      	movs	r1, #150	@ 0x96
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff f8a1 	bl	8000abc <a_llcc68_spi_write>
 800197a:	4603      	mov	r3, r0
 800197c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                   /* check result */
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d005      	beq.n	8001990 <llcc68_set_regulator_mode+0x68>
    {
        handle->debug_print("llcc68: set regulator mode failed.\n");                                /* set regulator mode failed */
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001988:	4805      	ldr	r0, [pc, #20]	@ (80019a0 <llcc68_set_regulator_mode+0x78>)
 800198a:	4798      	blx	r3
       
        return 1;                                                                                   /* return error */
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <llcc68_set_regulator_mode+0x6a>
    }
    
    return 0;                                                                                       /* success return 0 */
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	08005578 	.word	0x08005578
 80019a0:	080057e4 	.word	0x080057e4

080019a4 <llcc68_set_pa_config>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_pa_config(llcc68_handle_t *handle, uint8_t pa_duty_cycle, uint8_t hp_max)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	70fb      	strb	r3, [r7, #3]
 80019b0:	4613      	mov	r3, r2
 80019b2:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[4];
    
    if (handle == NULL)                                                                      /* check handle */
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <llcc68_set_pa_config+0x1a>
    {
        return 2;                                                                            /* return error */
 80019ba:	2302      	movs	r3, #2
 80019bc:	e02f      	b.n	8001a1e <llcc68_set_pa_config+0x7a>
    }
    if (handle->inited != 1)                                                                 /* check handle initialization */
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d001      	beq.n	80019cc <llcc68_set_pa_config+0x28>
    {
        return 3;                                                                            /* return error */
 80019c8:	2303      	movs	r3, #3
 80019ca:	e028      	b.n	8001a1e <llcc68_set_pa_config+0x7a>
    }

    res = a_llcc68_check_busy(handle);                                                       /* check busy */
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	f7ff f9c5 	bl	8000d5c <a_llcc68_check_busy>
 80019d2:	4603      	mov	r3, r0
 80019d4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                            /* check result */
 80019d6:	7bfb      	ldrb	r3, [r7, #15]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d005      	beq.n	80019e8 <llcc68_set_pa_config+0x44>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                      /* chip is busy */
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	4811      	ldr	r0, [pc, #68]	@ (8001a28 <llcc68_set_pa_config+0x84>)
 80019e2:	4798      	blx	r3
       
        return 4;                                                                            /* return error */
 80019e4:	2304      	movs	r3, #4
 80019e6:	e01a      	b.n	8001a1e <llcc68_set_pa_config+0x7a>
    }
    
    buf[0] = pa_duty_cycle;                                                                  /* set param */
 80019e8:	78fb      	ldrb	r3, [r7, #3]
 80019ea:	723b      	strb	r3, [r7, #8]
    buf[1] = hp_max;                                                                         /* set param */
 80019ec:	78bb      	ldrb	r3, [r7, #2]
 80019ee:	727b      	strb	r3, [r7, #9]
    buf[2] = 0x00;                                                                           /* set param */
 80019f0:	2300      	movs	r3, #0
 80019f2:	72bb      	strb	r3, [r7, #10]
    buf[3] = 0x01;                                                                           /* set param */
 80019f4:	2301      	movs	r3, #1
 80019f6:	72fb      	strb	r3, [r7, #11]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_PA_CONFIG, (uint8_t *)buf, 4);       /* write command */
 80019f8:	f107 0208 	add.w	r2, r7, #8
 80019fc:	2304      	movs	r3, #4
 80019fe:	2195      	movs	r1, #149	@ 0x95
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f7ff f85b 	bl	8000abc <a_llcc68_spi_write>
 8001a06:	4603      	mov	r3, r0
 8001a08:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                            /* check result */
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d005      	beq.n	8001a1c <llcc68_set_pa_config+0x78>
    {
        handle->debug_print("llcc68: set pa config failed.\n");                              /* set pa config failed */
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a14:	4805      	ldr	r0, [pc, #20]	@ (8001a2c <llcc68_set_pa_config+0x88>)
 8001a16:	4798      	blx	r3
       
        return 1;                                                                            /* return error */
 8001a18:	2301      	movs	r3, #1
 8001a1a:	e000      	b.n	8001a1e <llcc68_set_pa_config+0x7a>
    }
    
    return 0;                                                                                /* success return 0 */
 8001a1c:	2300      	movs	r3, #0
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	08005578 	.word	0x08005578
 8001a2c:	08005854 	.word	0x08005854

08001a30 <llcc68_set_rx_tx_fallback_mode>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_rx_tx_fallback_mode(llcc68_handle_t *handle, llcc68_rx_tx_fallback_mode_t mode)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
 8001a38:	460b      	mov	r3, r1
 8001a3a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                                  /* check handle */
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d101      	bne.n	8001a46 <llcc68_set_rx_tx_fallback_mode+0x16>
    {
        return 2;                                                                                        /* return error */
 8001a42:	2302      	movs	r3, #2
 8001a44:	e029      	b.n	8001a9a <llcc68_set_rx_tx_fallback_mode+0x6a>
    }
    if (handle->inited != 1)                                                                             /* check handle initialization */
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001a4c:	2b01      	cmp	r3, #1
 8001a4e:	d001      	beq.n	8001a54 <llcc68_set_rx_tx_fallback_mode+0x24>
    {
        return 3;                                                                                        /* return error */
 8001a50:	2303      	movs	r3, #3
 8001a52:	e022      	b.n	8001a9a <llcc68_set_rx_tx_fallback_mode+0x6a>
    }

    res = a_llcc68_check_busy(handle);                                                                   /* check busy */
 8001a54:	6878      	ldr	r0, [r7, #4]
 8001a56:	f7ff f981 	bl	8000d5c <a_llcc68_check_busy>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                        /* check result */
 8001a5e:	7bfb      	ldrb	r3, [r7, #15]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d005      	beq.n	8001a70 <llcc68_set_rx_tx_fallback_mode+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                  /* chip is busy */
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a68:	480e      	ldr	r0, [pc, #56]	@ (8001aa4 <llcc68_set_rx_tx_fallback_mode+0x74>)
 8001a6a:	4798      	blx	r3
       
        return 4;                                                                                        /* return error */
 8001a6c:	2304      	movs	r3, #4
 8001a6e:	e014      	b.n	8001a9a <llcc68_set_rx_tx_fallback_mode+0x6a>
    }
    
    prev = mode;                                                                                         /* set param */
 8001a70:	78fb      	ldrb	r3, [r7, #3]
 8001a72:	73bb      	strb	r3, [r7, #14]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_RX_TX_FALLBACK_MODE, (uint8_t *)&prev, 1);       /* write command */
 8001a74:	f107 020e 	add.w	r2, r7, #14
 8001a78:	2301      	movs	r3, #1
 8001a7a:	2193      	movs	r1, #147	@ 0x93
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	f7ff f81d 	bl	8000abc <a_llcc68_spi_write>
 8001a82:	4603      	mov	r3, r0
 8001a84:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                        /* check result */
 8001a86:	7bfb      	ldrb	r3, [r7, #15]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d005      	beq.n	8001a98 <llcc68_set_rx_tx_fallback_mode+0x68>
    {
        handle->debug_print("llcc68: set rx tx fallback mode failed.\n");                                /* set rx tx fallback mode failed */
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a90:	4805      	ldr	r0, [pc, #20]	@ (8001aa8 <llcc68_set_rx_tx_fallback_mode+0x78>)
 8001a92:	4798      	blx	r3
       
        return 1;                                                                                        /* return error */
 8001a94:	2301      	movs	r3, #1
 8001a96:	e000      	b.n	8001a9a <llcc68_set_rx_tx_fallback_mode+0x6a>
    }
    
    return 0;                                                                                            /* success return 0 */
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	08005578 	.word	0x08005578
 8001aa8:	08005874 	.word	0x08005874

08001aac <llcc68_set_dio_irq_params>:
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_dio_irq_params(llcc68_handle_t *handle, uint16_t irq_mask, uint16_t dio1_mask,
                                  uint16_t dio2_mask, uint16_t dio3_mask)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b088      	sub	sp, #32
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	4608      	mov	r0, r1
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	461a      	mov	r2, r3
 8001aba:	4603      	mov	r3, r0
 8001abc:	817b      	strh	r3, [r7, #10]
 8001abe:	460b      	mov	r3, r1
 8001ac0:	813b      	strh	r3, [r7, #8]
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	80fb      	strh	r3, [r7, #6]
    uint8_t res;
    uint8_t buf[8];
    
    if (handle == NULL)                                                                           /* check handle */
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <llcc68_set_dio_irq_params+0x24>
    {
        return 2;                                                                                 /* return error */
 8001acc:	2302      	movs	r3, #2
 8001ace:	e047      	b.n	8001b60 <llcc68_set_dio_irq_params+0xb4>
    }
    if (handle->inited != 1)                                                                      /* check handle initialization */
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d001      	beq.n	8001ade <llcc68_set_dio_irq_params+0x32>
    {
        return 3;                                                                                 /* return error */
 8001ada:	2303      	movs	r3, #3
 8001adc:	e040      	b.n	8001b60 <llcc68_set_dio_irq_params+0xb4>
    }

    res = a_llcc68_check_busy(handle);                                                            /* check busy */
 8001ade:	68f8      	ldr	r0, [r7, #12]
 8001ae0:	f7ff f93c 	bl	8000d5c <a_llcc68_check_busy>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	77fb      	strb	r3, [r7, #31]
    if (res != 0)                                                                                 /* check result */
 8001ae8:	7ffb      	ldrb	r3, [r7, #31]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d005      	beq.n	8001afa <llcc68_set_dio_irq_params+0x4e>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                           /* chip is busy */
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	481d      	ldr	r0, [pc, #116]	@ (8001b68 <llcc68_set_dio_irq_params+0xbc>)
 8001af4:	4798      	blx	r3
       
        return 4;                                                                                 /* return error */
 8001af6:	2304      	movs	r3, #4
 8001af8:	e032      	b.n	8001b60 <llcc68_set_dio_irq_params+0xb4>
    }
    
    buf[0] = (irq_mask >> 8) & 0xFF;                                                              /* set param */
 8001afa:	897b      	ldrh	r3, [r7, #10]
 8001afc:	0a1b      	lsrs	r3, r3, #8
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	753b      	strb	r3, [r7, #20]
    buf[1] = (irq_mask >> 0) & 0xFF;                                                              /* set param */
 8001b04:	897b      	ldrh	r3, [r7, #10]
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	757b      	strb	r3, [r7, #21]
    buf[2] = (dio1_mask >> 8) & 0xFF;                                                             /* set param */
 8001b0a:	893b      	ldrh	r3, [r7, #8]
 8001b0c:	0a1b      	lsrs	r3, r3, #8
 8001b0e:	b29b      	uxth	r3, r3
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	75bb      	strb	r3, [r7, #22]
    buf[3] = (dio1_mask >> 0) & 0xFF;                                                             /* set param */
 8001b14:	893b      	ldrh	r3, [r7, #8]
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	75fb      	strb	r3, [r7, #23]
    buf[4] = (dio2_mask >> 8) & 0xFF;                                                             /* set param */
 8001b1a:	88fb      	ldrh	r3, [r7, #6]
 8001b1c:	0a1b      	lsrs	r3, r3, #8
 8001b1e:	b29b      	uxth	r3, r3
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	763b      	strb	r3, [r7, #24]
    buf[5] = (dio2_mask >> 0) & 0xFF;                                                             /* set param */
 8001b24:	88fb      	ldrh	r3, [r7, #6]
 8001b26:	b2db      	uxtb	r3, r3
 8001b28:	767b      	strb	r3, [r7, #25]
    buf[6] = (dio3_mask >> 8) & 0xFF;                                                             /* set param */
 8001b2a:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b2c:	0a1b      	lsrs	r3, r3, #8
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	76bb      	strb	r3, [r7, #26]
    buf[7] = (dio3_mask >> 0) & 0xFF;                                                             /* set param */
 8001b34:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001b36:	b2db      	uxtb	r3, r3
 8001b38:	76fb      	strb	r3, [r7, #27]
    
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_DIO_IRQ_PARAMS, (uint8_t *)buf, 8);       /* write command */
 8001b3a:	f107 0214 	add.w	r2, r7, #20
 8001b3e:	2308      	movs	r3, #8
 8001b40:	2108      	movs	r1, #8
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f7fe ffba 	bl	8000abc <a_llcc68_spi_write>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	77fb      	strb	r3, [r7, #31]
    if (res != 0)                                                                                 /* check result */
 8001b4c:	7ffb      	ldrb	r3, [r7, #31]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <llcc68_set_dio_irq_params+0xb2>
    {
        handle->debug_print("llcc68: set dio irq params failed.\n");                              /* set dio irq params failed */
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b56:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <llcc68_set_dio_irq_params+0xc0>)
 8001b58:	4798      	blx	r3
       
        return 1;                                                                                 /* return error */
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <llcc68_set_dio_irq_params+0xb4>
    }
    
    return 0;                                                                                     /* success return 0 */
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	08005578 	.word	0x08005578
 8001b6c:	080058a0 	.word	0x080058a0

08001b70 <llcc68_clear_irq_status>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_clear_irq_status(llcc68_handle_t *handle, uint16_t clear_irq_param)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                                         /* check handle */
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d101      	bne.n	8001b86 <llcc68_clear_irq_status+0x16>
    {
        return 2;                                                                               /* return error */
 8001b82:	2302      	movs	r3, #2
 8001b84:	e02f      	b.n	8001be6 <llcc68_clear_irq_status+0x76>
    }
    if (handle->inited != 1)                                                                    /* check handle initialization */
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d001      	beq.n	8001b94 <llcc68_clear_irq_status+0x24>
    {
        return 3;                                                                               /* return error */
 8001b90:	2303      	movs	r3, #3
 8001b92:	e028      	b.n	8001be6 <llcc68_clear_irq_status+0x76>
    }

    res = a_llcc68_check_busy(handle);                                                          /* check busy */
 8001b94:	6878      	ldr	r0, [r7, #4]
 8001b96:	f7ff f8e1 	bl	8000d5c <a_llcc68_check_busy>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                               /* check result */
 8001b9e:	7bfb      	ldrb	r3, [r7, #15]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d005      	beq.n	8001bb0 <llcc68_clear_irq_status+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                         /* chip is busy */
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	4811      	ldr	r0, [pc, #68]	@ (8001bf0 <llcc68_clear_irq_status+0x80>)
 8001baa:	4798      	blx	r3
       
        return 4;                                                                               /* return error */
 8001bac:	2304      	movs	r3, #4
 8001bae:	e01a      	b.n	8001be6 <llcc68_clear_irq_status+0x76>
    }
    
    buf[0] = (clear_irq_param >> 8) & 0xFF;                                                     /* set param */
 8001bb0:	887b      	ldrh	r3, [r7, #2]
 8001bb2:	0a1b      	lsrs	r3, r3, #8
 8001bb4:	b29b      	uxth	r3, r3
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	733b      	strb	r3, [r7, #12]
    buf[1] = (clear_irq_param >> 0) & 0xFF;                                                     /* set param */
 8001bba:	887b      	ldrh	r3, [r7, #2]
 8001bbc:	b2db      	uxtb	r3, r3
 8001bbe:	737b      	strb	r3, [r7, #13]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_CLEAR_IRQ_STATUS, (uint8_t *)buf, 2);       /* write command */
 8001bc0:	f107 020c 	add.w	r2, r7, #12
 8001bc4:	2302      	movs	r3, #2
 8001bc6:	2102      	movs	r1, #2
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7fe ff77 	bl	8000abc <a_llcc68_spi_write>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                               /* check result */
 8001bd2:	7bfb      	ldrb	r3, [r7, #15]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d005      	beq.n	8001be4 <llcc68_clear_irq_status+0x74>
    {
        handle->debug_print("llcc68: clear irq status failed.\n");                              /* clear irq status failed */
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bdc:	4805      	ldr	r0, [pc, #20]	@ (8001bf4 <llcc68_clear_irq_status+0x84>)
 8001bde:	4798      	blx	r3
       
        return 1;                                                                               /* return error */
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <llcc68_clear_irq_status+0x76>
    }
    
    return 0;                                                                                   /* success return 0 */
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	08005578 	.word	0x08005578
 8001bf4:	08005280 	.word	0x08005280

08001bf8 <llcc68_frequency_convert_to_register>:
 *             - 2 handle is NULL
 *             - 3 handle is not initialized
 * @note       none
 */
uint8_t llcc68_frequency_convert_to_register(llcc68_handle_t *handle, uint32_t freq, uint32_t *reg)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	60f8      	str	r0, [r7, #12]
 8001c00:	60b9      	str	r1, [r7, #8]
 8001c02:	607a      	str	r2, [r7, #4]
    if (handle == NULL)                                                           /* check handle */
 8001c04:	68fb      	ldr	r3, [r7, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <llcc68_frequency_convert_to_register+0x16>
    {
        return 2;                                                                 /* return error */
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	e016      	b.n	8001c3c <llcc68_frequency_convert_to_register+0x44>
    }
    if (handle->inited != 1)                                                      /* check handle initialization */
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d001      	beq.n	8001c1c <llcc68_frequency_convert_to_register+0x24>
    {
        return 3;                                                                 /* return error */
 8001c18:	2303      	movs	r3, #3
 8001c1a:	e00f      	b.n	8001c3c <llcc68_frequency_convert_to_register+0x44>
    }
    
    *reg = (uint32_t)(powf(2.0f, 25.0f) / (32 * powf(10.f, 6.0f)) * freq);        /* convert real data to register data */
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	ee07 3a90 	vmov	s15, r3
 8001c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c26:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8001c48 <llcc68_frequency_convert_to_register+0x50>
 8001c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001c32:	ee17 2a90 	vmov	r2, s15
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	601a      	str	r2, [r3, #0]
    
    return 0;                                                                     /* success return 0 */
 8001c3a:	2300      	movs	r3, #0
}
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	3714      	adds	r7, #20
 8001c40:	46bd      	mov	sp, r7
 8001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c46:	4770      	bx	lr
 8001c48:	3f8637bd 	.word	0x3f8637bd

08001c4c <llcc68_set_rf_frequency>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_rf_frequency(llcc68_handle_t *handle, uint32_t reg)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b084      	sub	sp, #16
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
    uint8_t res;
    uint8_t buf[4];
    
    if (handle == NULL)                                                                         /* check handle */
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d101      	bne.n	8001c60 <llcc68_set_rf_frequency+0x14>
    {
        return 2;                                                                               /* return error */
 8001c5c:	2302      	movs	r3, #2
 8001c5e:	e036      	b.n	8001cce <llcc68_set_rf_frequency+0x82>
    }
    if (handle->inited != 1)                                                                    /* check handle initialization */
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d001      	beq.n	8001c6e <llcc68_set_rf_frequency+0x22>
    {
        return 3;                                                                               /* return error */
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e02f      	b.n	8001cce <llcc68_set_rf_frequency+0x82>
    }

    res = a_llcc68_check_busy(handle);                                                          /* check busy */
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff f874 	bl	8000d5c <a_llcc68_check_busy>
 8001c74:	4603      	mov	r3, r0
 8001c76:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                               /* check result */
 8001c78:	7bfb      	ldrb	r3, [r7, #15]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d005      	beq.n	8001c8a <llcc68_set_rf_frequency+0x3e>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                         /* chip is busy */
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c82:	4815      	ldr	r0, [pc, #84]	@ (8001cd8 <llcc68_set_rf_frequency+0x8c>)
 8001c84:	4798      	blx	r3
       
        return 4;                                                                               /* return error */
 8001c86:	2304      	movs	r3, #4
 8001c88:	e021      	b.n	8001cce <llcc68_set_rf_frequency+0x82>
    }
    
    buf[0] = (reg >> 24) & 0xFF;                                                                /* set param */
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	0e1b      	lsrs	r3, r3, #24
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	723b      	strb	r3, [r7, #8]
    buf[1] = (reg >> 16) & 0xFF;                                                                /* set param */
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	0c1b      	lsrs	r3, r3, #16
 8001c96:	b2db      	uxtb	r3, r3
 8001c98:	727b      	strb	r3, [r7, #9]
    buf[2] = (reg >> 8) & 0xFF;                                                                 /* set param */
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	0a1b      	lsrs	r3, r3, #8
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	72bb      	strb	r3, [r7, #10]
    buf[3] = (reg >> 0) & 0xFF;                                                                 /* set param */
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	72fb      	strb	r3, [r7, #11]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_RF_FREQUENCY, (uint8_t *)buf, 4);       /* write command */
 8001ca8:	f107 0208 	add.w	r2, r7, #8
 8001cac:	2304      	movs	r3, #4
 8001cae:	2186      	movs	r1, #134	@ 0x86
 8001cb0:	6878      	ldr	r0, [r7, #4]
 8001cb2:	f7fe ff03 	bl	8000abc <a_llcc68_spi_write>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                               /* check result */
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d005      	beq.n	8001ccc <llcc68_set_rf_frequency+0x80>
    {
        handle->debug_print("llcc68: set rf frequency failed.\n");                              /* set rf frequency failed */
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc4:	4805      	ldr	r0, [pc, #20]	@ (8001cdc <llcc68_set_rf_frequency+0x90>)
 8001cc6:	4798      	blx	r3
       
        return 1;                                                                               /* return error */
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <llcc68_set_rf_frequency+0x82>
    }
    
    return 0;                                                                                   /* success return 0 */
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	08005578 	.word	0x08005578
 8001cdc:	08005920 	.word	0x08005920

08001ce0 <llcc68_set_packet_type>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_packet_type(llcc68_handle_t *handle, llcc68_packet_type_t type)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	460b      	mov	r3, r1
 8001cea:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                          /* check handle */
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <llcc68_set_packet_type+0x16>
    {
        return 2;                                                                                /* return error */
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e029      	b.n	8001d4a <llcc68_set_packet_type+0x6a>
    }
    if (handle->inited != 1)                                                                     /* check handle initialization */
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d001      	beq.n	8001d04 <llcc68_set_packet_type+0x24>
    {
        return 3;                                                                                /* return error */
 8001d00:	2303      	movs	r3, #3
 8001d02:	e022      	b.n	8001d4a <llcc68_set_packet_type+0x6a>
    }

    res = a_llcc68_check_busy(handle);                                                           /* check busy */
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff f829 	bl	8000d5c <a_llcc68_check_busy>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                /* check result */
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d005      	beq.n	8001d20 <llcc68_set_packet_type+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                          /* chip is busy */
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d18:	480e      	ldr	r0, [pc, #56]	@ (8001d54 <llcc68_set_packet_type+0x74>)
 8001d1a:	4798      	blx	r3
       
        return 4;                                                                                /* return error */
 8001d1c:	2304      	movs	r3, #4
 8001d1e:	e014      	b.n	8001d4a <llcc68_set_packet_type+0x6a>
    }
    
    prev = type;                                                                                 /* set param */
 8001d20:	78fb      	ldrb	r3, [r7, #3]
 8001d22:	73bb      	strb	r3, [r7, #14]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_PACKET_TYPE, (uint8_t *)&prev, 1);       /* write command */
 8001d24:	f107 020e 	add.w	r2, r7, #14
 8001d28:	2301      	movs	r3, #1
 8001d2a:	218a      	movs	r1, #138	@ 0x8a
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7fe fec5 	bl	8000abc <a_llcc68_spi_write>
 8001d32:	4603      	mov	r3, r0
 8001d34:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                /* check result */
 8001d36:	7bfb      	ldrb	r3, [r7, #15]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d005      	beq.n	8001d48 <llcc68_set_packet_type+0x68>
    {
        handle->debug_print("llcc68: set packet type failed.\n");                                /* set packet type failed */
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d40:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <llcc68_set_packet_type+0x78>)
 8001d42:	4798      	blx	r3
       
        return 1;                                                                                /* return error */
 8001d44:	2301      	movs	r3, #1
 8001d46:	e000      	b.n	8001d4a <llcc68_set_packet_type+0x6a>
    }
    
    return 0;                                                                                    /* success return 0 */
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	08005578 	.word	0x08005578
 8001d58:	08005944 	.word	0x08005944

08001d5c <llcc68_set_tx_params>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_tx_params(llcc68_handle_t *handle, int8_t dbm, llcc68_ramp_time_t t)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b084      	sub	sp, #16
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
 8001d64:	460b      	mov	r3, r1
 8001d66:	70fb      	strb	r3, [r7, #3]
 8001d68:	4613      	mov	r3, r2
 8001d6a:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                                      /* check handle */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <llcc68_set_tx_params+0x1a>
    {
        return 2;                                                                            /* return error */
 8001d72:	2302      	movs	r3, #2
 8001d74:	e02b      	b.n	8001dce <llcc68_set_tx_params+0x72>
    }
    if (handle->inited != 1)                                                                 /* check handle initialization */
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001d7c:	2b01      	cmp	r3, #1
 8001d7e:	d001      	beq.n	8001d84 <llcc68_set_tx_params+0x28>
    {
        return 3;                                                                            /* return error */
 8001d80:	2303      	movs	r3, #3
 8001d82:	e024      	b.n	8001dce <llcc68_set_tx_params+0x72>
    }

    res = a_llcc68_check_busy(handle);                                                       /* check busy */
 8001d84:	6878      	ldr	r0, [r7, #4]
 8001d86:	f7fe ffe9 	bl	8000d5c <a_llcc68_check_busy>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                            /* check result */
 8001d8e:	7bfb      	ldrb	r3, [r7, #15]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d005      	beq.n	8001da0 <llcc68_set_tx_params+0x44>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                      /* chip is busy */
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d98:	480f      	ldr	r0, [pc, #60]	@ (8001dd8 <llcc68_set_tx_params+0x7c>)
 8001d9a:	4798      	blx	r3
       
        return 4;                                                                            /* return error */
 8001d9c:	2304      	movs	r3, #4
 8001d9e:	e016      	b.n	8001dce <llcc68_set_tx_params+0x72>
    }
    
    buf[0] = dbm;                                                                            /* set param */
 8001da0:	78fb      	ldrb	r3, [r7, #3]
 8001da2:	733b      	strb	r3, [r7, #12]
    buf[1] = t;                                                                              /* set param */
 8001da4:	78bb      	ldrb	r3, [r7, #2]
 8001da6:	737b      	strb	r3, [r7, #13]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_TX_PARAMS, (uint8_t *)buf, 2);       /* write command */
 8001da8:	f107 020c 	add.w	r2, r7, #12
 8001dac:	2302      	movs	r3, #2
 8001dae:	218e      	movs	r1, #142	@ 0x8e
 8001db0:	6878      	ldr	r0, [r7, #4]
 8001db2:	f7fe fe83 	bl	8000abc <a_llcc68_spi_write>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                            /* check result */
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <llcc68_set_tx_params+0x70>
    {
        handle->debug_print("llcc68: set tx params failed.\n");                              /* set tx params failed */
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dc4:	4805      	ldr	r0, [pc, #20]	@ (8001ddc <llcc68_set_tx_params+0x80>)
 8001dc6:	4798      	blx	r3
       
        return 1;                                                                            /* return error */
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e000      	b.n	8001dce <llcc68_set_tx_params+0x72>
    }
    
    return 0;                                                                                /* success return 0 */
 8001dcc:	2300      	movs	r3, #0
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3710      	adds	r7, #16
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	08005578 	.word	0x08005578
 8001ddc:	0800598c 	.word	0x0800598c

08001de0 <llcc68_set_lora_modulation_params>:
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_lora_modulation_params(llcc68_handle_t *handle, llcc68_lora_sf_t sf, llcc68_lora_bandwidth_t bw, 
                                          llcc68_lora_cr_t cr, llcc68_bool_t low_data_rate_optimize_enable)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b084      	sub	sp, #16
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	4608      	mov	r0, r1
 8001dea:	4611      	mov	r1, r2
 8001dec:	461a      	mov	r2, r3
 8001dee:	4603      	mov	r3, r0
 8001df0:	70fb      	strb	r3, [r7, #3]
 8001df2:	460b      	mov	r3, r1
 8001df4:	70bb      	strb	r3, [r7, #2]
 8001df6:	4613      	mov	r3, r2
 8001df8:	707b      	strb	r3, [r7, #1]
    uint8_t res;
    uint8_t buf[4];
    
    if (handle == NULL)                                                                              /* check handle */
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <llcc68_set_lora_modulation_params+0x24>
    {
        return 2;                                                                                    /* return error */
 8001e00:	2302      	movs	r3, #2
 8001e02:	e02f      	b.n	8001e64 <llcc68_set_lora_modulation_params+0x84>
    }
    if (handle->inited != 1)                                                                         /* check handle initialization */
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e0a:	2b01      	cmp	r3, #1
 8001e0c:	d001      	beq.n	8001e12 <llcc68_set_lora_modulation_params+0x32>
    {
        return 3;                                                                                    /* return error */
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e028      	b.n	8001e64 <llcc68_set_lora_modulation_params+0x84>
    }

    res = a_llcc68_check_busy(handle);                                                               /* check busy */
 8001e12:	6878      	ldr	r0, [r7, #4]
 8001e14:	f7fe ffa2 	bl	8000d5c <a_llcc68_check_busy>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                    /* check result */
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d005      	beq.n	8001e2e <llcc68_set_lora_modulation_params+0x4e>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                              /* chip is busy */
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e26:	4811      	ldr	r0, [pc, #68]	@ (8001e6c <llcc68_set_lora_modulation_params+0x8c>)
 8001e28:	4798      	blx	r3
       
        return 4;                                                                                    /* return error */
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	e01a      	b.n	8001e64 <llcc68_set_lora_modulation_params+0x84>
    }
    
    buf[0] = sf;                                                                                     /* set param */
 8001e2e:	78fb      	ldrb	r3, [r7, #3]
 8001e30:	723b      	strb	r3, [r7, #8]
    buf[1] = bw;                                                                                     /* set param */
 8001e32:	78bb      	ldrb	r3, [r7, #2]
 8001e34:	727b      	strb	r3, [r7, #9]
    buf[2] = cr;                                                                                     /* set param */
 8001e36:	787b      	ldrb	r3, [r7, #1]
 8001e38:	72bb      	strb	r3, [r7, #10]
    buf[3] = low_data_rate_optimize_enable;                                                          /* set param */
 8001e3a:	7e3b      	ldrb	r3, [r7, #24]
 8001e3c:	72fb      	strb	r3, [r7, #11]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_MODULATION_PARAMS, (uint8_t *)buf, 4);       /* write command */
 8001e3e:	f107 0208 	add.w	r2, r7, #8
 8001e42:	2304      	movs	r3, #4
 8001e44:	218b      	movs	r1, #139	@ 0x8b
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f7fe fe38 	bl	8000abc <a_llcc68_spi_write>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                    /* check result */
 8001e50:	7bfb      	ldrb	r3, [r7, #15]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <llcc68_set_lora_modulation_params+0x82>
    {
        handle->debug_print("llcc68: set lora modulation params failed.\n");                         /* set lora modulation params failed */
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e5a:	4805      	ldr	r0, [pc, #20]	@ (8001e70 <llcc68_set_lora_modulation_params+0x90>)
 8001e5c:	4798      	blx	r3
       
        return 1;                                                                                    /* return error */
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e000      	b.n	8001e64 <llcc68_set_lora_modulation_params+0x84>
    }
    
    return 0;                                                                                        /* success return 0 */
 8001e62:	2300      	movs	r3, #0
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	08005578 	.word	0x08005578
 8001e70:	0800565c 	.word	0x0800565c

08001e74 <llcc68_set_buffer_base_address>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_buffer_base_address(llcc68_handle_t *handle, uint8_t tx_base_addr, uint8_t rx_base_addr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	70fb      	strb	r3, [r7, #3]
 8001e80:	4613      	mov	r3, r2
 8001e82:	70bb      	strb	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                                                /* check handle */
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d101      	bne.n	8001e8e <llcc68_set_buffer_base_address+0x1a>
    {
        return 2;                                                                                      /* return error */
 8001e8a:	2302      	movs	r3, #2
 8001e8c:	e02b      	b.n	8001ee6 <llcc68_set_buffer_base_address+0x72>
    }
    if (handle->inited != 1)                                                                           /* check handle initialization */
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d001      	beq.n	8001e9c <llcc68_set_buffer_base_address+0x28>
    {
        return 3;                                                                                      /* return error */
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e024      	b.n	8001ee6 <llcc68_set_buffer_base_address+0x72>
    }
    
    res = a_llcc68_check_busy(handle);                                                                 /* check busy */
 8001e9c:	6878      	ldr	r0, [r7, #4]
 8001e9e:	f7fe ff5d 	bl	8000d5c <a_llcc68_check_busy>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                      /* check result */
 8001ea6:	7bfb      	ldrb	r3, [r7, #15]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d005      	beq.n	8001eb8 <llcc68_set_buffer_base_address+0x44>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                /* chip is busy */
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	480f      	ldr	r0, [pc, #60]	@ (8001ef0 <llcc68_set_buffer_base_address+0x7c>)
 8001eb2:	4798      	blx	r3
       
        return 4;                                                                                      /* return error */
 8001eb4:	2304      	movs	r3, #4
 8001eb6:	e016      	b.n	8001ee6 <llcc68_set_buffer_base_address+0x72>
    }
    
    buf[0] = tx_base_addr;                                                                             /* set param */
 8001eb8:	78fb      	ldrb	r3, [r7, #3]
 8001eba:	733b      	strb	r3, [r7, #12]
    buf[1] = rx_base_addr;                                                                             /* set param */
 8001ebc:	78bb      	ldrb	r3, [r7, #2]
 8001ebe:	737b      	strb	r3, [r7, #13]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_BUFFER_BASE_ADDRESS, (uint8_t *)buf, 2);       /* write command */
 8001ec0:	f107 020c 	add.w	r2, r7, #12
 8001ec4:	2302      	movs	r3, #2
 8001ec6:	218f      	movs	r1, #143	@ 0x8f
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f7fe fdf7 	bl	8000abc <a_llcc68_spi_write>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                      /* check result */
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d005      	beq.n	8001ee4 <llcc68_set_buffer_base_address+0x70>
    {
        handle->debug_print("llcc68: set buffer base address failed.\n");                              /* set buffer base address failed */
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001edc:	4805      	ldr	r0, [pc, #20]	@ (8001ef4 <llcc68_set_buffer_base_address+0x80>)
 8001ede:	4798      	blx	r3
       
        return 1;                                                                                      /* return error */
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	e000      	b.n	8001ee6 <llcc68_set_buffer_base_address+0x72>
    }
    
    return 0;                                                                                          /* success return 0 */
 8001ee4:	2300      	movs	r3, #0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	08005578 	.word	0x08005578
 8001ef4:	08005a20 	.word	0x08005a20

08001ef8 <llcc68_set_lora_symb_num_timeout>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_lora_symb_num_timeout(llcc68_handle_t *handle, uint8_t symb_num)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    uint8_t prev;
    
    if (handle == NULL)                                                                                    /* check handle */
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <llcc68_set_lora_symb_num_timeout+0x16>
    {
        return 2;                                                                                          /* return error */
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	e029      	b.n	8001f62 <llcc68_set_lora_symb_num_timeout+0x6a>
    }
    if (handle->inited != 1)                                                                               /* check handle initialization */
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d001      	beq.n	8001f1c <llcc68_set_lora_symb_num_timeout+0x24>
    {
        return 3;                                                                                          /* return error */
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e022      	b.n	8001f62 <llcc68_set_lora_symb_num_timeout+0x6a>
    }
    
    res = a_llcc68_check_busy(handle);                                                                     /* check busy */
 8001f1c:	6878      	ldr	r0, [r7, #4]
 8001f1e:	f7fe ff1d 	bl	8000d5c <a_llcc68_check_busy>
 8001f22:	4603      	mov	r3, r0
 8001f24:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                          /* check result */
 8001f26:	7bfb      	ldrb	r3, [r7, #15]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d005      	beq.n	8001f38 <llcc68_set_lora_symb_num_timeout+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                    /* chip is busy */
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f30:	480e      	ldr	r0, [pc, #56]	@ (8001f6c <llcc68_set_lora_symb_num_timeout+0x74>)
 8001f32:	4798      	blx	r3
       
        return 4;                                                                                          /* return error */
 8001f34:	2304      	movs	r3, #4
 8001f36:	e014      	b.n	8001f62 <llcc68_set_lora_symb_num_timeout+0x6a>
    }
    
    prev = symb_num;                                                                                       /* set param */
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	73bb      	strb	r3, [r7, #14]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_SET_LORA_SYMB_NUM_TIMEOUT, (uint8_t *)&prev, 1);       /* write command */
 8001f3c:	f107 020e 	add.w	r2, r7, #14
 8001f40:	2301      	movs	r3, #1
 8001f42:	21a0      	movs	r1, #160	@ 0xa0
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7fe fdb9 	bl	8000abc <a_llcc68_spi_write>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                          /* check result */
 8001f4e:	7bfb      	ldrb	r3, [r7, #15]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <llcc68_set_lora_symb_num_timeout+0x68>
    {
        handle->debug_print("llcc68: set lora symb num timeout failed.\n");                                /* set lora symb num timeout failed */
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f58:	4805      	ldr	r0, [pc, #20]	@ (8001f70 <llcc68_set_lora_symb_num_timeout+0x78>)
 8001f5a:	4798      	blx	r3
       
        return 1;                                                                                          /* return error */
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e000      	b.n	8001f62 <llcc68_set_lora_symb_num_timeout+0x6a>
    }
    
    return 0;                                                                                              /* success return 0 */
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	08005578 	.word	0x08005578
 8001f70:	08005a4c 	.word	0x08005a4c

08001f74 <llcc68_get_lora_packet_status>:
 *             - 4 chip is busy
 * @note       none
 */
uint8_t llcc68_get_lora_packet_status(llcc68_handle_t *handle, uint8_t *rssi_pkt_raw, uint8_t *snr_pkt_raw,
                                      uint8_t *signal_rssi_pkt_raw, float *rssi_pkt, float *snr_pkt, float *signal_rssi_pkt)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	607a      	str	r2, [r7, #4]
 8001f80:	603b      	str	r3, [r7, #0]
    uint8_t res;
    uint8_t buf[4];
    
    if (handle == NULL)                                                                         /* check handle */
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <llcc68_get_lora_packet_status+0x18>
    {
        return 2;                                                                               /* return error */
 8001f88:	2302      	movs	r3, #2
 8001f8a:	e05b      	b.n	8002044 <llcc68_get_lora_packet_status+0xd0>
    }
    if (handle->inited != 1)                                                                    /* check handle initialization */
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d001      	beq.n	8001f9a <llcc68_get_lora_packet_status+0x26>
    {
        return 3;                                                                               /* return error */
 8001f96:	2303      	movs	r3, #3
 8001f98:	e054      	b.n	8002044 <llcc68_get_lora_packet_status+0xd0>
    }
    
    res = a_llcc68_check_busy(handle);                                                          /* check busy */
 8001f9a:	68f8      	ldr	r0, [r7, #12]
 8001f9c:	f7fe fede 	bl	8000d5c <a_llcc68_check_busy>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                                               /* check result */
 8001fa4:	7dfb      	ldrb	r3, [r7, #23]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d005      	beq.n	8001fb6 <llcc68_get_lora_packet_status+0x42>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                         /* chip is busy */
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	4827      	ldr	r0, [pc, #156]	@ (800204c <llcc68_get_lora_packet_status+0xd8>)
 8001fb0:	4798      	blx	r3
       
        return 4;                                                                               /* return error */
 8001fb2:	2304      	movs	r3, #4
 8001fb4:	e046      	b.n	8002044 <llcc68_get_lora_packet_status+0xd0>
    }
    
    res = a_llcc68_spi_read(handle, LLCC68_COMMAND_GET_PACKET_STATUS, (uint8_t *)buf, 4);       /* read command */
 8001fb6:	f107 0210 	add.w	r2, r7, #16
 8001fba:	2304      	movs	r3, #4
 8001fbc:	2114      	movs	r1, #20
 8001fbe:	68f8      	ldr	r0, [r7, #12]
 8001fc0:	f7fe fd5f 	bl	8000a82 <a_llcc68_spi_read>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                                               /* check result */
 8001fc8:	7dfb      	ldrb	r3, [r7, #23]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d005      	beq.n	8001fda <llcc68_get_lora_packet_status+0x66>
    {
        handle->debug_print("llcc68: get packet status failed.\n");                             /* get packet status failed */
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fd2:	481f      	ldr	r0, [pc, #124]	@ (8002050 <llcc68_get_lora_packet_status+0xdc>)
 8001fd4:	4798      	blx	r3
       
        return 1;                                                                               /* return error */
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e034      	b.n	8002044 <llcc68_get_lora_packet_status+0xd0>
    }
    *rssi_pkt_raw= buf[1];                                                                      /* set status */
 8001fda:	7c7a      	ldrb	r2, [r7, #17]
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	701a      	strb	r2, [r3, #0]
    *snr_pkt_raw = buf[2];                                                                      /* set status */
 8001fe0:	7cba      	ldrb	r2, [r7, #18]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	701a      	strb	r2, [r3, #0]
    *signal_rssi_pkt_raw = buf[3];                                                              /* set status */
 8001fe6:	7cfa      	ldrb	r2, [r7, #19]
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	701a      	strb	r2, [r3, #0]
    *rssi_pkt = -(float)(*rssi_pkt_raw) / 2.0f;                                                 /* set status */
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	ee07 3a90 	vmov	s15, r3
 8001ff4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ff8:	eeb1 7a67 	vneg.f32	s14, s15
 8001ffc:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002004:	6a3b      	ldr	r3, [r7, #32]
 8002006:	edc3 7a00 	vstr	s15, [r3]
    *snr_pkt = (float)(*snr_pkt_raw) / 4.0f;                                                    /* set status */
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	ee07 3a90 	vmov	s15, r3
 8002012:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002016:	eef1 6a00 	vmov.f32	s13, #16	@ 0x40800000  4.0
 800201a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800201e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002020:	edc3 7a00 	vstr	s15, [r3]
    *signal_rssi_pkt = -(float)(*signal_rssi_pkt_raw) / 2.0f;                                   /* set status */
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	781b      	ldrb	r3, [r3, #0]
 8002028:	ee07 3a90 	vmov	s15, r3
 800202c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002030:	eeb1 7a67 	vneg.f32	s14, s15
 8002034:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8002038:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800203c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800203e:	edc3 7a00 	vstr	s15, [r3]
    
    return 0;                                                                                   /* success return 0 */
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3718      	adds	r7, #24
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	08005578 	.word	0x08005578
 8002050:	08005a78 	.word	0x08005a78

08002054 <llcc68_reset_stats>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_reset_stats(llcc68_handle_t *handle, uint16_t pkt_received, uint16_t pkt_crc_error, uint16_t pkt_length_header_error)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b086      	sub	sp, #24
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	4608      	mov	r0, r1
 800205e:	4611      	mov	r1, r2
 8002060:	461a      	mov	r2, r3
 8002062:	4603      	mov	r3, r0
 8002064:	817b      	strh	r3, [r7, #10]
 8002066:	460b      	mov	r3, r1
 8002068:	813b      	strh	r3, [r7, #8]
 800206a:	4613      	mov	r3, r2
 800206c:	80fb      	strh	r3, [r7, #6]
    uint8_t res;
    uint8_t buf[6];
    
    if (handle == NULL)                                                                    /* check handle */
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d101      	bne.n	8002078 <llcc68_reset_stats+0x24>
    {
        return 2;                                                                          /* return error */
 8002074:	2302      	movs	r3, #2
 8002076:	e03f      	b.n	80020f8 <llcc68_reset_stats+0xa4>
    }
    if (handle->inited != 1)                                                               /* check handle initialization */
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800207e:	2b01      	cmp	r3, #1
 8002080:	d001      	beq.n	8002086 <llcc68_reset_stats+0x32>
    {
        return 3;                                                                          /* return error */
 8002082:	2303      	movs	r3, #3
 8002084:	e038      	b.n	80020f8 <llcc68_reset_stats+0xa4>
    }
    
    res = a_llcc68_check_busy(handle);                                                     /* check busy */
 8002086:	68f8      	ldr	r0, [r7, #12]
 8002088:	f7fe fe68 	bl	8000d5c <a_llcc68_check_busy>
 800208c:	4603      	mov	r3, r0
 800208e:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                                          /* check result */
 8002090:	7dfb      	ldrb	r3, [r7, #23]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d005      	beq.n	80020a2 <llcc68_reset_stats+0x4e>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                    /* chip is busy */
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800209a:	4819      	ldr	r0, [pc, #100]	@ (8002100 <llcc68_reset_stats+0xac>)
 800209c:	4798      	blx	r3
       
        return 4;                                                                          /* return error */
 800209e:	2304      	movs	r3, #4
 80020a0:	e02a      	b.n	80020f8 <llcc68_reset_stats+0xa4>
    }
    
    buf[0] = (pkt_received >> 8) & 0xFF;                                                   /* set status */
 80020a2:	897b      	ldrh	r3, [r7, #10]
 80020a4:	0a1b      	lsrs	r3, r3, #8
 80020a6:	b29b      	uxth	r3, r3
 80020a8:	b2db      	uxtb	r3, r3
 80020aa:	743b      	strb	r3, [r7, #16]
    buf[1] = (pkt_received >> 0) & 0xFF;                                                   /* set status */
 80020ac:	897b      	ldrh	r3, [r7, #10]
 80020ae:	b2db      	uxtb	r3, r3
 80020b0:	747b      	strb	r3, [r7, #17]
    buf[2] = (pkt_crc_error >> 8) & 0xFF;                                                  /* set status */
 80020b2:	893b      	ldrh	r3, [r7, #8]
 80020b4:	0a1b      	lsrs	r3, r3, #8
 80020b6:	b29b      	uxth	r3, r3
 80020b8:	b2db      	uxtb	r3, r3
 80020ba:	74bb      	strb	r3, [r7, #18]
    buf[3] = (pkt_crc_error >> 0) & 0xFF;                                                  /* set status */
 80020bc:	893b      	ldrh	r3, [r7, #8]
 80020be:	b2db      	uxtb	r3, r3
 80020c0:	74fb      	strb	r3, [r7, #19]
    buf[4] = (pkt_length_header_error >> 8) & 0xFF;                                        /* set status */
 80020c2:	88fb      	ldrh	r3, [r7, #6]
 80020c4:	0a1b      	lsrs	r3, r3, #8
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b2db      	uxtb	r3, r3
 80020ca:	753b      	strb	r3, [r7, #20]
    buf[5] = (pkt_length_header_error >> 0) & 0xFF;                                        /* set status */
 80020cc:	88fb      	ldrh	r3, [r7, #6]
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	757b      	strb	r3, [r7, #21]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_RESET_STATS, (uint8_t *)buf, 6);       /* write command */
 80020d2:	f107 0210 	add.w	r2, r7, #16
 80020d6:	2306      	movs	r3, #6
 80020d8:	2100      	movs	r1, #0
 80020da:	68f8      	ldr	r0, [r7, #12]
 80020dc:	f7fe fcee 	bl	8000abc <a_llcc68_spi_write>
 80020e0:	4603      	mov	r3, r0
 80020e2:	75fb      	strb	r3, [r7, #23]
    if (res != 0)                                                                          /* check result */
 80020e4:	7dfb      	ldrb	r3, [r7, #23]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <llcc68_reset_stats+0xa2>
    {
        handle->debug_print("llcc68: reset stats failed.\n");                              /* reset stats failed */
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ee:	4805      	ldr	r0, [pc, #20]	@ (8002104 <llcc68_reset_stats+0xb0>)
 80020f0:	4798      	blx	r3
       
        return 1;                                                                          /* return error */
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <llcc68_reset_stats+0xa4>
    }
    
    return 0;                                                                              /* success return 0 */
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	08005578 	.word	0x08005578
 8002104:	08005ae0 	.word	0x08005ae0

08002108 <llcc68_clear_device_errors>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_clear_device_errors(llcc68_handle_t *handle)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                                             /* check handle */
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d101      	bne.n	800211a <llcc68_clear_device_errors+0x12>
    {
        return 2;                                                                                   /* return error */
 8002116:	2302      	movs	r3, #2
 8002118:	e02b      	b.n	8002172 <llcc68_clear_device_errors+0x6a>
    }
    if (handle->inited != 1)                                                                        /* check handle initialization */
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002120:	2b01      	cmp	r3, #1
 8002122:	d001      	beq.n	8002128 <llcc68_clear_device_errors+0x20>
    {
        return 3;                                                                                   /* return error */
 8002124:	2303      	movs	r3, #3
 8002126:	e024      	b.n	8002172 <llcc68_clear_device_errors+0x6a>
    }
    
    res = a_llcc68_check_busy(handle);                                                              /* check busy */
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7fe fe17 	bl	8000d5c <a_llcc68_check_busy>
 800212e:	4603      	mov	r3, r0
 8002130:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                   /* check result */
 8002132:	7bfb      	ldrb	r3, [r7, #15]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d005      	beq.n	8002144 <llcc68_clear_device_errors+0x3c>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                             /* chip is busy */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800213c:	480f      	ldr	r0, [pc, #60]	@ (800217c <llcc68_clear_device_errors+0x74>)
 800213e:	4798      	blx	r3
       
        return 4;                                                                                   /* return error */
 8002140:	2304      	movs	r3, #4
 8002142:	e016      	b.n	8002172 <llcc68_clear_device_errors+0x6a>
    }
    
    buf[0] = 0x00;                                                                                  /* set status */
 8002144:	2300      	movs	r3, #0
 8002146:	733b      	strb	r3, [r7, #12]
    buf[1] = 0x00;                                                                                  /* set status */
 8002148:	2300      	movs	r3, #0
 800214a:	737b      	strb	r3, [r7, #13]
    res = a_llcc68_spi_write(handle, LLCC68_COMMAND_CLEAR_DEVICE_ERRORS, (uint8_t *)buf, 2);        /* write command */
 800214c:	f107 020c 	add.w	r2, r7, #12
 8002150:	2302      	movs	r3, #2
 8002152:	2107      	movs	r1, #7
 8002154:	6878      	ldr	r0, [r7, #4]
 8002156:	f7fe fcb1 	bl	8000abc <a_llcc68_spi_write>
 800215a:	4603      	mov	r3, r0
 800215c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                   /* check result */
 800215e:	7bfb      	ldrb	r3, [r7, #15]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d005      	beq.n	8002170 <llcc68_clear_device_errors+0x68>
    {
        handle->debug_print("llcc68: clear device errors failed.\n");                               /* clear device errors failed */
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002168:	4805      	ldr	r0, [pc, #20]	@ (8002180 <llcc68_clear_device_errors+0x78>)
 800216a:	4798      	blx	r3
       
        return 1;                                                                                   /* return error */
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <llcc68_clear_device_errors+0x6a>
    }
    
    return 0;                                                                                       /* success return 0 */
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	08005578 	.word	0x08005578
 8002180:	08005b24 	.word	0x08005b24

08002184 <llcc68_set_lora_sync_word>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_lora_sync_word(llcc68_handle_t *handle, uint16_t sync_word)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
    uint8_t res;
    uint8_t buf[2];
    
    if (handle == NULL)                                                                                /* check handle */
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2b00      	cmp	r3, #0
 8002194:	d101      	bne.n	800219a <llcc68_set_lora_sync_word+0x16>
    {
        return 2;                                                                                      /* return error */
 8002196:	2302      	movs	r3, #2
 8002198:	e030      	b.n	80021fc <llcc68_set_lora_sync_word+0x78>
    }
    if (handle->inited != 1)                                                                           /* check handle initialization */
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d001      	beq.n	80021a8 <llcc68_set_lora_sync_word+0x24>
    {
        return 3;                                                                                      /* return error */
 80021a4:	2303      	movs	r3, #3
 80021a6:	e029      	b.n	80021fc <llcc68_set_lora_sync_word+0x78>
    }
    
    res = a_llcc68_check_busy(handle);                                                                 /* check busy */
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f7fe fdd7 	bl	8000d5c <a_llcc68_check_busy>
 80021ae:	4603      	mov	r3, r0
 80021b0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                      /* check result */
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d005      	beq.n	80021c4 <llcc68_set_lora_sync_word+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                /* chip is busy */
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021bc:	4811      	ldr	r0, [pc, #68]	@ (8002204 <llcc68_set_lora_sync_word+0x80>)
 80021be:	4798      	blx	r3
       
        return 4;                                                                                      /* return error */
 80021c0:	2304      	movs	r3, #4
 80021c2:	e01b      	b.n	80021fc <llcc68_set_lora_sync_word+0x78>
    }
    
    buf[0] = (sync_word >> 8) & 0xFF;                                                                  /* set msb */
 80021c4:	887b      	ldrh	r3, [r7, #2]
 80021c6:	0a1b      	lsrs	r3, r3, #8
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	733b      	strb	r3, [r7, #12]
    buf[1] = (sync_word >> 0) & 0xFF;                                                                  /* set lsb */
 80021ce:	887b      	ldrh	r3, [r7, #2]
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	737b      	strb	r3, [r7, #13]
    res = a_llcc68_spi_write_register(handle, LLCC68_REG_LORA_SYNC_WORD_MSB, (uint8_t *)buf, 2);       /* write register */
 80021d4:	f107 020c 	add.w	r2, r7, #12
 80021d8:	2302      	movs	r3, #2
 80021da:	f44f 61e8 	mov.w	r1, #1856	@ 0x740
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7fe fcf0 	bl	8000bc4 <a_llcc68_spi_write_register>
 80021e4:	4603      	mov	r3, r0
 80021e6:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                      /* check result */
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d005      	beq.n	80021fa <llcc68_set_lora_sync_word+0x76>
    {
        handle->debug_print("llcc68: write register failed.\n");                                       /* write register failed */
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f2:	4805      	ldr	r0, [pc, #20]	@ (8002208 <llcc68_set_lora_sync_word+0x84>)
 80021f4:	4798      	blx	r3
       
        return 1;                                                                                      /* return error */
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <llcc68_set_lora_sync_word+0x78>
    }
    
    return 0;                                                                                          /* success return 0 */
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}
 8002204:	08005578 	.word	0x08005578
 8002208:	080052a4 	.word	0x080052a4

0800220c <llcc68_set_tx_modulation>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_tx_modulation(llcc68_handle_t *handle, uint8_t modulation)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b084      	sub	sp, #16
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
 8002214:	460b      	mov	r3, r1
 8002216:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                                                   /* check handle */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d101      	bne.n	8002222 <llcc68_set_tx_modulation+0x16>
    {
        return 2;                                                                                         /* return error */
 800221e:	2302      	movs	r3, #2
 8002220:	e027      	b.n	8002272 <llcc68_set_tx_modulation+0x66>
    }
    if (handle->inited != 1)                                                                              /* check handle initialization */
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002228:	2b01      	cmp	r3, #1
 800222a:	d001      	beq.n	8002230 <llcc68_set_tx_modulation+0x24>
    {
        return 3;                                                                                         /* return error */
 800222c:	2303      	movs	r3, #3
 800222e:	e020      	b.n	8002272 <llcc68_set_tx_modulation+0x66>
    }
    
    res = a_llcc68_check_busy(handle);                                                                    /* check busy */
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7fe fd93 	bl	8000d5c <a_llcc68_check_busy>
 8002236:	4603      	mov	r3, r0
 8002238:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                         /* check result */
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d005      	beq.n	800224c <llcc68_set_tx_modulation+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                   /* chip is busy */
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002244:	480d      	ldr	r0, [pc, #52]	@ (800227c <llcc68_set_tx_modulation+0x70>)
 8002246:	4798      	blx	r3
       
        return 4;                                                                                         /* return error */
 8002248:	2304      	movs	r3, #4
 800224a:	e012      	b.n	8002272 <llcc68_set_tx_modulation+0x66>
    }
    
    res = a_llcc68_spi_write_register(handle, LLCC68_REG_TX_MODULATION, (uint8_t *)&modulation, 1);       /* write register */
 800224c:	1cfa      	adds	r2, r7, #3
 800224e:	2301      	movs	r3, #1
 8002250:	f640 0189 	movw	r1, #2185	@ 0x889
 8002254:	6878      	ldr	r0, [r7, #4]
 8002256:	f7fe fcb5 	bl	8000bc4 <a_llcc68_spi_write_register>
 800225a:	4603      	mov	r3, r0
 800225c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                         /* check result */
 800225e:	7bfb      	ldrb	r3, [r7, #15]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d005      	beq.n	8002270 <llcc68_set_tx_modulation+0x64>
    {
        handle->debug_print("llcc68: write register failed.\n");                                          /* write register failed */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002268:	4805      	ldr	r0, [pc, #20]	@ (8002280 <llcc68_set_tx_modulation+0x74>)
 800226a:	4798      	blx	r3
       
        return 1;                                                                                         /* return error */
 800226c:	2301      	movs	r3, #1
 800226e:	e000      	b.n	8002272 <llcc68_set_tx_modulation+0x66>
    }
    
    return 0;                                                                                             /* success return 0 */
 8002270:	2300      	movs	r3, #0
}
 8002272:	4618      	mov	r0, r3
 8002274:	3710      	adds	r7, #16
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	08005578 	.word	0x08005578
 8002280:	080052a4 	.word	0x080052a4

08002284 <llcc68_get_tx_modulation>:
 *             - 3 handle is not initialized
 *             - 4 chip is busy
 * @note       none
 */
uint8_t llcc68_get_tx_modulation(llcc68_handle_t *handle, uint8_t *modulation)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
    uint8_t res;
    
    if (handle == NULL)                                                                                 /* check handle */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d101      	bne.n	8002298 <llcc68_get_tx_modulation+0x14>
    {
        return 2;                                                                                       /* return error */
 8002294:	2302      	movs	r3, #2
 8002296:	e027      	b.n	80022e8 <llcc68_get_tx_modulation+0x64>
    }
    if (handle->inited != 1)                                                                            /* check handle initialization */
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800229e:	2b01      	cmp	r3, #1
 80022a0:	d001      	beq.n	80022a6 <llcc68_get_tx_modulation+0x22>
    {
        return 3;                                                                                       /* return error */
 80022a2:	2303      	movs	r3, #3
 80022a4:	e020      	b.n	80022e8 <llcc68_get_tx_modulation+0x64>
    }
    
    res = a_llcc68_check_busy(handle);                                                                  /* check busy */
 80022a6:	6878      	ldr	r0, [r7, #4]
 80022a8:	f7fe fd58 	bl	8000d5c <a_llcc68_check_busy>
 80022ac:	4603      	mov	r3, r0
 80022ae:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                       /* check result */
 80022b0:	7bfb      	ldrb	r3, [r7, #15]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d005      	beq.n	80022c2 <llcc68_get_tx_modulation+0x3e>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                 /* chip is busy */
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ba:	480d      	ldr	r0, [pc, #52]	@ (80022f0 <llcc68_get_tx_modulation+0x6c>)
 80022bc:	4798      	blx	r3
       
        return 4;                                                                                       /* return error */
 80022be:	2304      	movs	r3, #4
 80022c0:	e012      	b.n	80022e8 <llcc68_get_tx_modulation+0x64>
    }
    
    res = a_llcc68_spi_read_register(handle, LLCC68_REG_TX_MODULATION, (uint8_t *)modulation, 1);       /* read register */
 80022c2:	2301      	movs	r3, #1
 80022c4:	683a      	ldr	r2, [r7, #0]
 80022c6:	f640 0189 	movw	r1, #2185	@ 0x889
 80022ca:	6878      	ldr	r0, [r7, #4]
 80022cc:	f7fe fc34 	bl	8000b38 <a_llcc68_spi_read_register>
 80022d0:	4603      	mov	r3, r0
 80022d2:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                       /* check result */
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d005      	beq.n	80022e6 <llcc68_get_tx_modulation+0x62>
    {
        handle->debug_print("llcc68: read register failed.\n");                                         /* read register failed */
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022de:	4805      	ldr	r0, [pc, #20]	@ (80022f4 <llcc68_get_tx_modulation+0x70>)
 80022e0:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <llcc68_get_tx_modulation+0x64>
    }
    
    return 0;                                                                                           /* success return 0 */
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3710      	adds	r7, #16
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	08005578 	.word	0x08005578
 80022f4:	080052c4 	.word	0x080052c4

080022f8 <llcc68_set_rx_gain>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_rx_gain(llcc68_handle_t *handle, uint8_t gain)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b084      	sub	sp, #16
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                                       /* check handle */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <llcc68_set_rx_gain+0x16>
    {
        return 2;                                                                             /* return error */
 800230a:	2302      	movs	r3, #2
 800230c:	e027      	b.n	800235e <llcc68_set_rx_gain+0x66>
    }
    if (handle->inited != 1)                                                                  /* check handle initialization */
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002314:	2b01      	cmp	r3, #1
 8002316:	d001      	beq.n	800231c <llcc68_set_rx_gain+0x24>
    {
        return 3;                                                                             /* return error */
 8002318:	2303      	movs	r3, #3
 800231a:	e020      	b.n	800235e <llcc68_set_rx_gain+0x66>
    }
    
    res = a_llcc68_check_busy(handle);                                                        /* check busy */
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7fe fd1d 	bl	8000d5c <a_llcc68_check_busy>
 8002322:	4603      	mov	r3, r0
 8002324:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                             /* check result */
 8002326:	7bfb      	ldrb	r3, [r7, #15]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d005      	beq.n	8002338 <llcc68_set_rx_gain+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                       /* chip is busy */
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002330:	480d      	ldr	r0, [pc, #52]	@ (8002368 <llcc68_set_rx_gain+0x70>)
 8002332:	4798      	blx	r3
       
        return 4;                                                                             /* return error */
 8002334:	2304      	movs	r3, #4
 8002336:	e012      	b.n	800235e <llcc68_set_rx_gain+0x66>
    }
    
    res = a_llcc68_spi_write_register(handle, LLCC68_REG_RX_GAIN, (uint8_t *)&gain, 1);       /* write register */
 8002338:	1cfa      	adds	r2, r7, #3
 800233a:	2301      	movs	r3, #1
 800233c:	f640 01ac 	movw	r1, #2220	@ 0x8ac
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7fe fc3f 	bl	8000bc4 <a_llcc68_spi_write_register>
 8002346:	4603      	mov	r3, r0
 8002348:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                             /* check result */
 800234a:	7bfb      	ldrb	r3, [r7, #15]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d005      	beq.n	800235c <llcc68_set_rx_gain+0x64>
    {
        handle->debug_print("llcc68: write register failed.\n");                              /* write register failed */
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002354:	4805      	ldr	r0, [pc, #20]	@ (800236c <llcc68_set_rx_gain+0x74>)
 8002356:	4798      	blx	r3
       
        return 1;                                                                             /* return error */
 8002358:	2301      	movs	r3, #1
 800235a:	e000      	b.n	800235e <llcc68_set_rx_gain+0x66>
    }
    
    return 0;                                                                                 /* success return 0 */
 800235c:	2300      	movs	r3, #0
}
 800235e:	4618      	mov	r0, r3
 8002360:	3710      	adds	r7, #16
 8002362:	46bd      	mov	sp, r7
 8002364:	bd80      	pop	{r7, pc}
 8002366:	bf00      	nop
 8002368:	08005578 	.word	0x08005578
 800236c:	080052a4 	.word	0x080052a4

08002370 <llcc68_set_tx_clamp_config>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_tx_clamp_config(llcc68_handle_t *handle, uint8_t config)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	460b      	mov	r3, r1
 800237a:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                                                 /* check handle */
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d101      	bne.n	8002386 <llcc68_set_tx_clamp_config+0x16>
    {
        return 2;                                                                                       /* return error */
 8002382:	2302      	movs	r3, #2
 8002384:	e027      	b.n	80023d6 <llcc68_set_tx_clamp_config+0x66>
    }
    if (handle->inited != 1)                                                                            /* check handle initialization */
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800238c:	2b01      	cmp	r3, #1
 800238e:	d001      	beq.n	8002394 <llcc68_set_tx_clamp_config+0x24>
    {
        return 3;                                                                                       /* return error */
 8002390:	2303      	movs	r3, #3
 8002392:	e020      	b.n	80023d6 <llcc68_set_tx_clamp_config+0x66>
    }
    
    res = a_llcc68_check_busy(handle);                                                                  /* check busy */
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f7fe fce1 	bl	8000d5c <a_llcc68_check_busy>
 800239a:	4603      	mov	r3, r0
 800239c:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                       /* check result */
 800239e:	7bfb      	ldrb	r3, [r7, #15]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d005      	beq.n	80023b0 <llcc68_set_tx_clamp_config+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                 /* chip is busy */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023a8:	480d      	ldr	r0, [pc, #52]	@ (80023e0 <llcc68_set_tx_clamp_config+0x70>)
 80023aa:	4798      	blx	r3
       
        return 4;                                                                                       /* return error */
 80023ac:	2304      	movs	r3, #4
 80023ae:	e012      	b.n	80023d6 <llcc68_set_tx_clamp_config+0x66>
    }
    
    res = a_llcc68_spi_write_register(handle, LLCC68_REG_TX_CLAMP_CONFIG, (uint8_t *)&config, 1);       /* write register */
 80023b0:	1cfa      	adds	r2, r7, #3
 80023b2:	2301      	movs	r3, #1
 80023b4:	f640 01d8 	movw	r1, #2264	@ 0x8d8
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7fe fc03 	bl	8000bc4 <a_llcc68_spi_write_register>
 80023be:	4603      	mov	r3, r0
 80023c0:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                       /* check result */
 80023c2:	7bfb      	ldrb	r3, [r7, #15]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d005      	beq.n	80023d4 <llcc68_set_tx_clamp_config+0x64>
    {
        handle->debug_print("llcc68: write register failed.\n");                                        /* write register failed */
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023cc:	4805      	ldr	r0, [pc, #20]	@ (80023e4 <llcc68_set_tx_clamp_config+0x74>)
 80023ce:	4798      	blx	r3
       
        return 1;                                                                                       /* return error */
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <llcc68_set_tx_clamp_config+0x66>
    }
    
    return 0;                                                                                           /* success return 0 */
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	08005578 	.word	0x08005578
 80023e4:	080052a4 	.word	0x080052a4

080023e8 <llcc68_get_tx_clamp_config>:
 *             - 3 handle is not initialized
 *             - 4 chip is busy
 * @note       none
 */
uint8_t llcc68_get_tx_clamp_config(llcc68_handle_t *handle, uint8_t *config)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
    uint8_t res;
    
    if (handle == NULL)                                                                               /* check handle */
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <llcc68_get_tx_clamp_config+0x14>
    {
        return 2;                                                                                     /* return error */
 80023f8:	2302      	movs	r3, #2
 80023fa:	e027      	b.n	800244c <llcc68_get_tx_clamp_config+0x64>
    }
    if (handle->inited != 1)                                                                          /* check handle initialization */
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002402:	2b01      	cmp	r3, #1
 8002404:	d001      	beq.n	800240a <llcc68_get_tx_clamp_config+0x22>
    {
        return 3;                                                                                     /* return error */
 8002406:	2303      	movs	r3, #3
 8002408:	e020      	b.n	800244c <llcc68_get_tx_clamp_config+0x64>
    }
    
    res = a_llcc68_check_busy(handle);                                                                /* check busy */
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe fca6 	bl	8000d5c <a_llcc68_check_busy>
 8002410:	4603      	mov	r3, r0
 8002412:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                     /* check result */
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d005      	beq.n	8002426 <llcc68_get_tx_clamp_config+0x3e>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                               /* chip is busy */
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	480d      	ldr	r0, [pc, #52]	@ (8002454 <llcc68_get_tx_clamp_config+0x6c>)
 8002420:	4798      	blx	r3
       
        return 4;                                                                                     /* return error */
 8002422:	2304      	movs	r3, #4
 8002424:	e012      	b.n	800244c <llcc68_get_tx_clamp_config+0x64>
    }
    
    res = a_llcc68_spi_read_register(handle, LLCC68_REG_TX_CLAMP_CONFIG, (uint8_t *)config, 1);       /* read register */
 8002426:	2301      	movs	r3, #1
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	f640 01d8 	movw	r1, #2264	@ 0x8d8
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f7fe fb82 	bl	8000b38 <a_llcc68_spi_read_register>
 8002434:	4603      	mov	r3, r0
 8002436:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                     /* check result */
 8002438:	7bfb      	ldrb	r3, [r7, #15]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d005      	beq.n	800244a <llcc68_get_tx_clamp_config+0x62>
    {
        handle->debug_print("llcc68: read register failed.\n");                                       /* read register failed */
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002442:	4805      	ldr	r0, [pc, #20]	@ (8002458 <llcc68_get_tx_clamp_config+0x70>)
 8002444:	4798      	blx	r3
       
        return 1;                                                                                     /* return error */
 8002446:	2301      	movs	r3, #1
 8002448:	e000      	b.n	800244c <llcc68_get_tx_clamp_config+0x64>
    }
    
    return 0;                                                                                         /* success return 0 */
 800244a:	2300      	movs	r3, #0
}
 800244c:	4618      	mov	r0, r3
 800244e:	3710      	adds	r7, #16
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	08005578 	.word	0x08005578
 8002458:	080052c4 	.word	0x080052c4

0800245c <llcc68_set_ocp>:
 *            - 3 handle is not initialized
 *            - 4 chip is busy
 * @note      none
 */
uint8_t llcc68_set_ocp(llcc68_handle_t *handle, uint8_t ocp)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b084      	sub	sp, #16
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	70fb      	strb	r3, [r7, #3]
    uint8_t res;
    
    if (handle == NULL)                                                                                /* check handle */
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d101      	bne.n	8002472 <llcc68_set_ocp+0x16>
    {
        return 2;                                                                                      /* return error */
 800246e:	2302      	movs	r3, #2
 8002470:	e027      	b.n	80024c2 <llcc68_set_ocp+0x66>
    }
    if (handle->inited != 1)                                                                           /* check handle initialization */
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002478:	2b01      	cmp	r3, #1
 800247a:	d001      	beq.n	8002480 <llcc68_set_ocp+0x24>
    {
        return 3;                                                                                      /* return error */
 800247c:	2303      	movs	r3, #3
 800247e:	e020      	b.n	80024c2 <llcc68_set_ocp+0x66>
    }
    
    res = a_llcc68_check_busy(handle);                                                                 /* check busy */
 8002480:	6878      	ldr	r0, [r7, #4]
 8002482:	f7fe fc6b 	bl	8000d5c <a_llcc68_check_busy>
 8002486:	4603      	mov	r3, r0
 8002488:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                      /* check result */
 800248a:	7bfb      	ldrb	r3, [r7, #15]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <llcc68_set_ocp+0x40>
    {
        handle->debug_print("llcc68: chip is busy.\n");                                                /* chip is busy */
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002494:	480d      	ldr	r0, [pc, #52]	@ (80024cc <llcc68_set_ocp+0x70>)
 8002496:	4798      	blx	r3
       
        return 4;                                                                                      /* return error */
 8002498:	2304      	movs	r3, #4
 800249a:	e012      	b.n	80024c2 <llcc68_set_ocp+0x66>
    }
    
    res = a_llcc68_spi_write_register(handle, LLCC68_REG_OCP_CONFIGURATION, (uint8_t *)&ocp, 1);       /* write register */
 800249c:	1cfa      	adds	r2, r7, #3
 800249e:	2301      	movs	r3, #1
 80024a0:	f640 01e7 	movw	r1, #2279	@ 0x8e7
 80024a4:	6878      	ldr	r0, [r7, #4]
 80024a6:	f7fe fb8d 	bl	8000bc4 <a_llcc68_spi_write_register>
 80024aa:	4603      	mov	r3, r0
 80024ac:	73fb      	strb	r3, [r7, #15]
    if (res != 0)                                                                                      /* check result */
 80024ae:	7bfb      	ldrb	r3, [r7, #15]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <llcc68_set_ocp+0x64>
    {
        handle->debug_print("llcc68: write register failed.\n");                                       /* write register failed */
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024b8:	4805      	ldr	r0, [pc, #20]	@ (80024d0 <llcc68_set_ocp+0x74>)
 80024ba:	4798      	blx	r3
       
        return 1;                                                                                      /* return error */
 80024bc:	2301      	movs	r3, #1
 80024be:	e000      	b.n	80024c2 <llcc68_set_ocp+0x66>
    }
    
    return 0;                                                                                          /* success return 0 */
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	08005578 	.word	0x08005578
 80024d0:	080052a4 	.word	0x080052a4

080024d4 <llcc68_lora_irq_handler>:
 *         - 0 success
 *         - 1 run failed
 * @note   none
 */
uint8_t llcc68_lora_irq_handler(void)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	af00      	add	r7, sp, #0
    if (llcc68_irq_handler(&gs_handle) != 0)
 80024d8:	4805      	ldr	r0, [pc, #20]	@ (80024f0 <llcc68_lora_irq_handler+0x1c>)
 80024da:	f7fe fc6f 	bl	8000dbc <llcc68_irq_handler>
 80024de:	4603      	mov	r3, r0
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d001      	beq.n	80024e8 <llcc68_lora_irq_handler+0x14>
    {
        return 1;
 80024e4:	2301      	movs	r3, #1
 80024e6:	e000      	b.n	80024ea <llcc68_lora_irq_handler+0x16>
    }
    else
    {
        return 0;
 80024e8:	2300      	movs	r3, #0
    }
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	20000074 	.word	0x20000074

080024f4 <llcc68_lora_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      none
 */
uint8_t llcc68_lora_init(void (*callback)(uint16_t type, uint8_t *buf, uint16_t len))
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b088      	sub	sp, #32
 80024f8:	af02      	add	r7, sp, #8
 80024fa:	6078      	str	r0, [r7, #4]
    uint32_t reg;
    uint8_t modulation;
    uint8_t config;
    
    /* link interface function */
    DRIVER_LLCC68_LINK_INIT(&gs_handle, llcc68_handle_t);
 80024fc:	f44f 722e 	mov.w	r2, #696	@ 0x2b8
 8002500:	2100      	movs	r1, #0
 8002502:	48ab      	ldr	r0, [pc, #684]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002504:	f002 f9f6 	bl	80048f4 <memset>
    DRIVER_LLCC68_LINK_SPI_INIT(&gs_handle, llcc68_interface_spi_init);
 8002508:	4ba9      	ldr	r3, [pc, #676]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800250a:	4aaa      	ldr	r2, [pc, #680]	@ (80027b4 <llcc68_lora_init+0x2c0>)
 800250c:	619a      	str	r2, [r3, #24]
    DRIVER_LLCC68_LINK_SPI_DEINIT(&gs_handle, llcc68_interface_spi_deinit);
 800250e:	4ba8      	ldr	r3, [pc, #672]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002510:	4aa9      	ldr	r2, [pc, #676]	@ (80027b8 <llcc68_lora_init+0x2c4>)
 8002512:	61da      	str	r2, [r3, #28]
    DRIVER_LLCC68_LINK_SPI_WRITE_READ(&gs_handle, llcc68_interface_spi_write_read);
 8002514:	4ba6      	ldr	r3, [pc, #664]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002516:	4aa9      	ldr	r2, [pc, #676]	@ (80027bc <llcc68_lora_init+0x2c8>)
 8002518:	621a      	str	r2, [r3, #32]
    DRIVER_LLCC68_LINK_RESET_GPIO_INIT(&gs_handle, llcc68_interface_reset_gpio_init);
 800251a:	4ba5      	ldr	r3, [pc, #660]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800251c:	4aa8      	ldr	r2, [pc, #672]	@ (80027c0 <llcc68_lora_init+0x2cc>)
 800251e:	601a      	str	r2, [r3, #0]
    DRIVER_LLCC68_LINK_RESET_GPIO_DEINIT(&gs_handle, llcc68_interface_reset_gpio_deinit);
 8002520:	4ba3      	ldr	r3, [pc, #652]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002522:	4aa8      	ldr	r2, [pc, #672]	@ (80027c4 <llcc68_lora_init+0x2d0>)
 8002524:	605a      	str	r2, [r3, #4]
    DRIVER_LLCC68_LINK_RESET_GPIO_WRITE(&gs_handle, llcc68_interface_reset_gpio_write);
 8002526:	4ba2      	ldr	r3, [pc, #648]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002528:	4aa7      	ldr	r2, [pc, #668]	@ (80027c8 <llcc68_lora_init+0x2d4>)
 800252a:	609a      	str	r2, [r3, #8]
    DRIVER_LLCC68_LINK_BUSY_GPIO_INIT(&gs_handle, llcc68_interface_busy_gpio_init);
 800252c:	4ba0      	ldr	r3, [pc, #640]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800252e:	4aa7      	ldr	r2, [pc, #668]	@ (80027cc <llcc68_lora_init+0x2d8>)
 8002530:	60da      	str	r2, [r3, #12]
    DRIVER_LLCC68_LINK_BUSY_GPIO_DEINIT(&gs_handle, llcc68_interface_busy_gpio_deinit);
 8002532:	4b9f      	ldr	r3, [pc, #636]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002534:	4aa6      	ldr	r2, [pc, #664]	@ (80027d0 <llcc68_lora_init+0x2dc>)
 8002536:	611a      	str	r2, [r3, #16]
    DRIVER_LLCC68_LINK_BUSY_GPIO_READ(&gs_handle, llcc68_interface_busy_gpio_read);
 8002538:	4b9d      	ldr	r3, [pc, #628]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800253a:	4aa6      	ldr	r2, [pc, #664]	@ (80027d4 <llcc68_lora_init+0x2e0>)
 800253c:	615a      	str	r2, [r3, #20]
    DRIVER_LLCC68_LINK_DELAY_MS(&gs_handle, llcc68_interface_delay_ms);
 800253e:	4b9c      	ldr	r3, [pc, #624]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002540:	4aa5      	ldr	r2, [pc, #660]	@ (80027d8 <llcc68_lora_init+0x2e4>)
 8002542:	625a      	str	r2, [r3, #36]	@ 0x24
    DRIVER_LLCC68_LINK_DEBUG_PRINT(&gs_handle, llcc68_interface_debug_print);
 8002544:	4b9a      	ldr	r3, [pc, #616]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002546:	4aa5      	ldr	r2, [pc, #660]	@ (80027dc <llcc68_lora_init+0x2e8>)
 8002548:	629a      	str	r2, [r3, #40]	@ 0x28
    DRIVER_LLCC68_LINK_RECEIVE_CALLBACK(&gs_handle, callback);
 800254a:	4a99      	ldr	r2, [pc, #612]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	62d3      	str	r3, [r2, #44]	@ 0x2c
    
    /* init the llcc68 */
    res = llcc68_init(&gs_handle);
 8002550:	4897      	ldr	r0, [pc, #604]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002552:	f7fe fdb9 	bl	80010c8 <llcc68_init>
 8002556:	4603      	mov	r3, r0
 8002558:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 800255a:	7dfb      	ldrb	r3, [r7, #23]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d004      	beq.n	800256a <llcc68_lora_init+0x76>
    {
        llcc68_interface_debug_print("llcc68: init failed.\n");
 8002560:	489f      	ldr	r0, [pc, #636]	@ (80027e0 <llcc68_lora_init+0x2ec>)
 8002562:	f000 fd81 	bl	8003068 <llcc68_interface_debug_print>
       
        return 1;
 8002566:	2301      	movs	r3, #1
 8002568:	e1e7      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* enter standby */
    res = llcc68_set_standby(&gs_handle, LLCC68_CLOCK_SOURCE_XTAL_32MHZ);
 800256a:	2101      	movs	r1, #1
 800256c:	4890      	ldr	r0, [pc, #576]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800256e:	f7ff f95f 	bl	8001830 <llcc68_set_standby>
 8002572:	4603      	mov	r3, r0
 8002574:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 8002576:	7dfb      	ldrb	r3, [r7, #23]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d007      	beq.n	800258c <llcc68_lora_init+0x98>
    {
        llcc68_interface_debug_print("llcc68: set standby failed.\n");
 800257c:	4899      	ldr	r0, [pc, #612]	@ (80027e4 <llcc68_lora_init+0x2f0>)
 800257e:	f000 fd73 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 8002582:	488b      	ldr	r0, [pc, #556]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002584:	f7fe fef8 	bl	8001378 <llcc68_deinit>
        
        return 1;
 8002588:	2301      	movs	r3, #1
 800258a:	e1d6      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set stop timer on preamble */
    res = llcc68_set_stop_timer_on_preamble(&gs_handle, LLCC68_LORA_DEFAULT_STOP_TIMER_ON_PREAMBLE);
 800258c:	2100      	movs	r1, #0
 800258e:	4888      	ldr	r0, [pc, #544]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002590:	f7ff f98c 	bl	80018ac <llcc68_set_stop_timer_on_preamble>
 8002594:	4603      	mov	r3, r0
 8002596:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d007      	beq.n	80025ae <llcc68_lora_init+0xba>
    {
        llcc68_interface_debug_print("llcc68: stop timer on preamble failed.\n");
 800259e:	4892      	ldr	r0, [pc, #584]	@ (80027e8 <llcc68_lora_init+0x2f4>)
 80025a0:	f000 fd62 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 80025a4:	4882      	ldr	r0, [pc, #520]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80025a6:	f7fe fee7 	bl	8001378 <llcc68_deinit>
        
        return 1;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e1c5      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set regulator mode */
    res = llcc68_set_regulator_mode(&gs_handle, LLCC68_LORA_DEFAULT_REGULATOR_MODE);
 80025ae:	2101      	movs	r1, #1
 80025b0:	487f      	ldr	r0, [pc, #508]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80025b2:	f7ff f9b9 	bl	8001928 <llcc68_set_regulator_mode>
 80025b6:	4603      	mov	r3, r0
 80025b8:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 80025ba:	7dfb      	ldrb	r3, [r7, #23]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d007      	beq.n	80025d0 <llcc68_lora_init+0xdc>
    {
        llcc68_interface_debug_print("llcc68: set regulator mode failed.\n");
 80025c0:	488a      	ldr	r0, [pc, #552]	@ (80027ec <llcc68_lora_init+0x2f8>)
 80025c2:	f000 fd51 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 80025c6:	487a      	ldr	r0, [pc, #488]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80025c8:	f7fe fed6 	bl	8001378 <llcc68_deinit>
        
        return 1;
 80025cc:	2301      	movs	r3, #1
 80025ce:	e1b4      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set pa config */
    res = llcc68_set_pa_config(&gs_handle, LLCC68_LORA_DEFAULT_PA_CONFIG_DUTY_CYCLE, LLCC68_LORA_DEFAULT_PA_CONFIG_HP_MAX);
 80025d0:	2203      	movs	r2, #3
 80025d2:	2102      	movs	r1, #2
 80025d4:	4876      	ldr	r0, [pc, #472]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80025d6:	f7ff f9e5 	bl	80019a4 <llcc68_set_pa_config>
 80025da:	4603      	mov	r3, r0
 80025dc:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 80025de:	7dfb      	ldrb	r3, [r7, #23]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d007      	beq.n	80025f4 <llcc68_lora_init+0x100>
    {
        llcc68_interface_debug_print("llcc68: set pa config failed.\n");
 80025e4:	4882      	ldr	r0, [pc, #520]	@ (80027f0 <llcc68_lora_init+0x2fc>)
 80025e6:	f000 fd3f 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 80025ea:	4871      	ldr	r0, [pc, #452]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80025ec:	f7fe fec4 	bl	8001378 <llcc68_deinit>
        
        return 1;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e1a2      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* enter to stdby xosc mode */
    res = llcc68_set_rx_tx_fallback_mode(&gs_handle, LLCC68_RX_TX_FALLBACK_MODE_STDBY_XOSC);
 80025f4:	2130      	movs	r1, #48	@ 0x30
 80025f6:	486e      	ldr	r0, [pc, #440]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80025f8:	f7ff fa1a 	bl	8001a30 <llcc68_set_rx_tx_fallback_mode>
 80025fc:	4603      	mov	r3, r0
 80025fe:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b00      	cmp	r3, #0
 8002604:	d007      	beq.n	8002616 <llcc68_lora_init+0x122>
    {
        llcc68_interface_debug_print("llcc68: set rx tx fallback mode failed.\n");
 8002606:	487b      	ldr	r0, [pc, #492]	@ (80027f4 <llcc68_lora_init+0x300>)
 8002608:	f000 fd2e 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 800260c:	4868      	ldr	r0, [pc, #416]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800260e:	f7fe feb3 	bl	8001378 <llcc68_deinit>
        
        return 1;
 8002612:	2301      	movs	r3, #1
 8002614:	e191      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set dio irq */
    res = llcc68_set_dio_irq_params(&gs_handle, 0x03FF, 0x03FF, 0x0000, 0x0000);
 8002616:	2300      	movs	r3, #0
 8002618:	9300      	str	r3, [sp, #0]
 800261a:	2300      	movs	r3, #0
 800261c:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8002620:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002624:	4862      	ldr	r0, [pc, #392]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002626:	f7ff fa41 	bl	8001aac <llcc68_set_dio_irq_params>
 800262a:	4603      	mov	r3, r0
 800262c:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 800262e:	7dfb      	ldrb	r3, [r7, #23]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d007      	beq.n	8002644 <llcc68_lora_init+0x150>
    {
        llcc68_interface_debug_print("llcc68: set dio irq params failed.\n");
 8002634:	4870      	ldr	r0, [pc, #448]	@ (80027f8 <llcc68_lora_init+0x304>)
 8002636:	f000 fd17 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 800263a:	485d      	ldr	r0, [pc, #372]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800263c:	f7fe fe9c 	bl	8001378 <llcc68_deinit>
        
        return 1;
 8002640:	2301      	movs	r3, #1
 8002642:	e17a      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* clear irq status */
    res = llcc68_clear_irq_status(&gs_handle, 0x03FF);
 8002644:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8002648:	4859      	ldr	r0, [pc, #356]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800264a:	f7ff fa91 	bl	8001b70 <llcc68_clear_irq_status>
 800264e:	4603      	mov	r3, r0
 8002650:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 8002652:	7dfb      	ldrb	r3, [r7, #23]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d007      	beq.n	8002668 <llcc68_lora_init+0x174>
    {
        llcc68_interface_debug_print("llcc68: clear irq status failed.\n");
 8002658:	4868      	ldr	r0, [pc, #416]	@ (80027fc <llcc68_lora_init+0x308>)
 800265a:	f000 fd05 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 800265e:	4854      	ldr	r0, [pc, #336]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002660:	f7fe fe8a 	bl	8001378 <llcc68_deinit>
        
        return 1;
 8002664:	2301      	movs	r3, #1
 8002666:	e168      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set lora mode */
    res = llcc68_set_packet_type(&gs_handle, LLCC68_PACKET_TYPE_LORA);
 8002668:	2101      	movs	r1, #1
 800266a:	4851      	ldr	r0, [pc, #324]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800266c:	f7ff fb38 	bl	8001ce0 <llcc68_set_packet_type>
 8002670:	4603      	mov	r3, r0
 8002672:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d007      	beq.n	800268a <llcc68_lora_init+0x196>
    {
        llcc68_interface_debug_print("llcc68: set packet type failed.\n");
 800267a:	4861      	ldr	r0, [pc, #388]	@ (8002800 <llcc68_lora_init+0x30c>)
 800267c:	f000 fcf4 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 8002680:	484b      	ldr	r0, [pc, #300]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002682:	f7fe fe79 	bl	8001378 <llcc68_deinit>
        
        return 1;
 8002686:	2301      	movs	r3, #1
 8002688:	e157      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set tx params */
    res = llcc68_set_tx_params(&gs_handle, LLCC68_LORA_DEFAULT_TX_DBM, LLCC68_LORA_DEFAULT_RAMP_TIME);
 800268a:	2200      	movs	r2, #0
 800268c:	2111      	movs	r1, #17
 800268e:	4848      	ldr	r0, [pc, #288]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002690:	f7ff fb64 	bl	8001d5c <llcc68_set_tx_params>
 8002694:	4603      	mov	r3, r0
 8002696:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 8002698:	7dfb      	ldrb	r3, [r7, #23]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d007      	beq.n	80026ae <llcc68_lora_init+0x1ba>
    {
        llcc68_interface_debug_print("llcc68: set tx params failed.\n");
 800269e:	4859      	ldr	r0, [pc, #356]	@ (8002804 <llcc68_lora_init+0x310>)
 80026a0:	f000 fce2 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 80026a4:	4842      	ldr	r0, [pc, #264]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80026a6:	f7fe fe67 	bl	8001378 <llcc68_deinit>
        
        return 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	e145      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set lora modulation params */
    res = llcc68_set_lora_modulation_params(&gs_handle, LLCC68_LORA_DEFAULT_SF, LLCC68_LORA_DEFAULT_BANDWIDTH, 
 80026ae:	2300      	movs	r3, #0
 80026b0:	9300      	str	r3, [sp, #0]
 80026b2:	2301      	movs	r3, #1
 80026b4:	2204      	movs	r2, #4
 80026b6:	2109      	movs	r1, #9
 80026b8:	483d      	ldr	r0, [pc, #244]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80026ba:	f7ff fb91 	bl	8001de0 <llcc68_set_lora_modulation_params>
 80026be:	4603      	mov	r3, r0
 80026c0:	75fb      	strb	r3, [r7, #23]
                                            LLCC68_LORA_DEFAULT_CR, LLCC68_LORA_DEFAULT_LOW_DATA_RATE_OPTIMIZE);
    if (res != 0)
 80026c2:	7dfb      	ldrb	r3, [r7, #23]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <llcc68_lora_init+0x1e4>
    {
        llcc68_interface_debug_print("llcc68: set lora modulation params failed.\n");
 80026c8:	484f      	ldr	r0, [pc, #316]	@ (8002808 <llcc68_lora_init+0x314>)
 80026ca:	f000 fccd 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 80026ce:	4838      	ldr	r0, [pc, #224]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80026d0:	f7fe fe52 	bl	8001378 <llcc68_deinit>
        
        return 1;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e130      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* convert the frequency */
    res = llcc68_frequency_convert_to_register(&gs_handle, LLCC68_LORA_DEFAULT_RF_FREQUENCY, (uint32_t *)&reg);
 80026d8:	f107 0310 	add.w	r3, r7, #16
 80026dc:	461a      	mov	r2, r3
 80026de:	494b      	ldr	r1, [pc, #300]	@ (800280c <llcc68_lora_init+0x318>)
 80026e0:	4833      	ldr	r0, [pc, #204]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80026e2:	f7ff fa89 	bl	8001bf8 <llcc68_frequency_convert_to_register>
 80026e6:	4603      	mov	r3, r0
 80026e8:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 80026ea:	7dfb      	ldrb	r3, [r7, #23]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <llcc68_lora_init+0x20c>
    {
        llcc68_interface_debug_print("llcc68: convert to register failed.\n");
 80026f0:	4847      	ldr	r0, [pc, #284]	@ (8002810 <llcc68_lora_init+0x31c>)
 80026f2:	f000 fcb9 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 80026f6:	482e      	ldr	r0, [pc, #184]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80026f8:	f7fe fe3e 	bl	8001378 <llcc68_deinit>
        
        return 1;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e11c      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set the frequency */
    res = llcc68_set_rf_frequency(&gs_handle, reg);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4619      	mov	r1, r3
 8002704:	482a      	ldr	r0, [pc, #168]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002706:	f7ff faa1 	bl	8001c4c <llcc68_set_rf_frequency>
 800270a:	4603      	mov	r3, r0
 800270c:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 800270e:	7dfb      	ldrb	r3, [r7, #23]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d007      	beq.n	8002724 <llcc68_lora_init+0x230>
    {
        llcc68_interface_debug_print("llcc68: set rf frequency failed.\n");
 8002714:	483f      	ldr	r0, [pc, #252]	@ (8002814 <llcc68_lora_init+0x320>)
 8002716:	f000 fca7 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 800271a:	4825      	ldr	r0, [pc, #148]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800271c:	f7fe fe2c 	bl	8001378 <llcc68_deinit>
        
        return 1;
 8002720:	2301      	movs	r3, #1
 8002722:	e10a      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set base address */
    res = llcc68_set_buffer_base_address(&gs_handle, 0x00, 0x00);
 8002724:	2200      	movs	r2, #0
 8002726:	2100      	movs	r1, #0
 8002728:	4821      	ldr	r0, [pc, #132]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800272a:	f7ff fba3 	bl	8001e74 <llcc68_set_buffer_base_address>
 800272e:	4603      	mov	r3, r0
 8002730:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 8002732:	7dfb      	ldrb	r3, [r7, #23]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d007      	beq.n	8002748 <llcc68_lora_init+0x254>
    {
        llcc68_interface_debug_print("llcc68: set buffer base address failed.\n");
 8002738:	4837      	ldr	r0, [pc, #220]	@ (8002818 <llcc68_lora_init+0x324>)
 800273a:	f000 fc95 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 800273e:	481c      	ldr	r0, [pc, #112]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002740:	f7fe fe1a 	bl	8001378 <llcc68_deinit>
        
        return 1;
 8002744:	2301      	movs	r3, #1
 8002746:	e0f8      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set lora symb num */
    res = llcc68_set_lora_symb_num_timeout(&gs_handle, LLCC68_LORA_DEFAULT_SYMB_NUM_TIMEOUT);
 8002748:	2100      	movs	r1, #0
 800274a:	4819      	ldr	r0, [pc, #100]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 800274c:	f7ff fbd4 	bl	8001ef8 <llcc68_set_lora_symb_num_timeout>
 8002750:	4603      	mov	r3, r0
 8002752:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 8002754:	7dfb      	ldrb	r3, [r7, #23]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d007      	beq.n	800276a <llcc68_lora_init+0x276>
    {
        llcc68_interface_debug_print("llcc68: set lora symb num timeout failed.\n");
 800275a:	4830      	ldr	r0, [pc, #192]	@ (800281c <llcc68_lora_init+0x328>)
 800275c:	f000 fc84 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 8002760:	4813      	ldr	r0, [pc, #76]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002762:	f7fe fe09 	bl	8001378 <llcc68_deinit>
        
        return 1;
 8002766:	2301      	movs	r3, #1
 8002768:	e0e7      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* reset stats */
    res = llcc68_reset_stats(&gs_handle, 0x0000, 0x0000, 0x0000);
 800276a:	2300      	movs	r3, #0
 800276c:	2200      	movs	r2, #0
 800276e:	2100      	movs	r1, #0
 8002770:	480f      	ldr	r0, [pc, #60]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002772:	f7ff fc6f 	bl	8002054 <llcc68_reset_stats>
 8002776:	4603      	mov	r3, r0
 8002778:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d007      	beq.n	8002790 <llcc68_lora_init+0x29c>
    {
        llcc68_interface_debug_print("llcc68: reset stats failed.\n");
 8002780:	4827      	ldr	r0, [pc, #156]	@ (8002820 <llcc68_lora_init+0x32c>)
 8002782:	f000 fc71 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 8002786:	480a      	ldr	r0, [pc, #40]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002788:	f7fe fdf6 	bl	8001378 <llcc68_deinit>
        
        return 1;
 800278c:	2301      	movs	r3, #1
 800278e:	e0d4      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* clear device errors */
    res = llcc68_clear_device_errors(&gs_handle);
 8002790:	4807      	ldr	r0, [pc, #28]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 8002792:	f7ff fcb9 	bl	8002108 <llcc68_clear_device_errors>
 8002796:	4603      	mov	r3, r0
 8002798:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 800279a:	7dfb      	ldrb	r3, [r7, #23]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d043      	beq.n	8002828 <llcc68_lora_init+0x334>
    {
        llcc68_interface_debug_print("llcc68: clear device errors failed.\n");
 80027a0:	4820      	ldr	r0, [pc, #128]	@ (8002824 <llcc68_lora_init+0x330>)
 80027a2:	f000 fc61 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 80027a6:	4802      	ldr	r0, [pc, #8]	@ (80027b0 <llcc68_lora_init+0x2bc>)
 80027a8:	f7fe fde6 	bl	8001378 <llcc68_deinit>
        
        return 1;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e0c4      	b.n	800293a <llcc68_lora_init+0x446>
 80027b0:	20000074 	.word	0x20000074
 80027b4:	08002fa5 	.word	0x08002fa5
 80027b8:	08002fb5 	.word	0x08002fb5
 80027bc:	08002fc3 	.word	0x08002fc3
 80027c0:	08002fe7 	.word	0x08002fe7
 80027c4:	08002ff5 	.word	0x08002ff5
 80027c8:	08003003 	.word	0x08003003
 80027cc:	0800301f 	.word	0x0800301f
 80027d0:	0800302d 	.word	0x0800302d
 80027d4:	0800303b 	.word	0x0800303b
 80027d8:	08003053 	.word	0x08003053
 80027dc:	08003069 	.word	0x08003069
 80027e0:	08005b68 	.word	0x08005b68
 80027e4:	08005b80 	.word	0x08005b80
 80027e8:	08005ba0 	.word	0x08005ba0
 80027ec:	08005bc8 	.word	0x08005bc8
 80027f0:	08005bec 	.word	0x08005bec
 80027f4:	08005c0c 	.word	0x08005c0c
 80027f8:	08005c38 	.word	0x08005c38
 80027fc:	08005c5c 	.word	0x08005c5c
 8002800:	08005c80 	.word	0x08005c80
 8002804:	08005ca4 	.word	0x08005ca4
 8002808:	08005cc4 	.word	0x08005cc4
 800280c:	1c9c3800 	.word	0x1c9c3800
 8002810:	08005cf0 	.word	0x08005cf0
 8002814:	08005d18 	.word	0x08005d18
 8002818:	08005d3c 	.word	0x08005d3c
 800281c:	08005d68 	.word	0x08005d68
 8002820:	08005d94 	.word	0x08005d94
 8002824:	08005db4 	.word	0x08005db4
    }
    
    /* set the lora sync word */
    res = llcc68_set_lora_sync_word(&gs_handle, LLCC68_LORA_DEFAULT_SYNC_WORD);
 8002828:	f243 4144 	movw	r1, #13380	@ 0x3444
 800282c:	4845      	ldr	r0, [pc, #276]	@ (8002944 <llcc68_lora_init+0x450>)
 800282e:	f7ff fca9 	bl	8002184 <llcc68_set_lora_sync_word>
 8002832:	4603      	mov	r3, r0
 8002834:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 8002836:	7dfb      	ldrb	r3, [r7, #23]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d007      	beq.n	800284c <llcc68_lora_init+0x358>
    {
        llcc68_interface_debug_print("llcc68: set lora sync word failed.\n");
 800283c:	4842      	ldr	r0, [pc, #264]	@ (8002948 <llcc68_lora_init+0x454>)
 800283e:	f000 fc13 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 8002842:	4840      	ldr	r0, [pc, #256]	@ (8002944 <llcc68_lora_init+0x450>)
 8002844:	f7fe fd98 	bl	8001378 <llcc68_deinit>
        
        return 1;
 8002848:	2301      	movs	r3, #1
 800284a:	e076      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* get tx modulation */
    res = llcc68_get_tx_modulation(&gs_handle, (uint8_t *)&modulation);
 800284c:	f107 030f 	add.w	r3, r7, #15
 8002850:	4619      	mov	r1, r3
 8002852:	483c      	ldr	r0, [pc, #240]	@ (8002944 <llcc68_lora_init+0x450>)
 8002854:	f7ff fd16 	bl	8002284 <llcc68_get_tx_modulation>
 8002858:	4603      	mov	r3, r0
 800285a:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 800285c:	7dfb      	ldrb	r3, [r7, #23]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d007      	beq.n	8002872 <llcc68_lora_init+0x37e>
    {
        llcc68_interface_debug_print("llcc68: get tx modulation failed.\n");
 8002862:	483a      	ldr	r0, [pc, #232]	@ (800294c <llcc68_lora_init+0x458>)
 8002864:	f000 fc00 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 8002868:	4836      	ldr	r0, [pc, #216]	@ (8002944 <llcc68_lora_init+0x450>)
 800286a:	f7fe fd85 	bl	8001378 <llcc68_deinit>
        
        return 1;
 800286e:	2301      	movs	r3, #1
 8002870:	e063      	b.n	800293a <llcc68_lora_init+0x446>
    }
    modulation |= 0x04;
 8002872:	7bfb      	ldrb	r3, [r7, #15]
 8002874:	f043 0304 	orr.w	r3, r3, #4
 8002878:	b2db      	uxtb	r3, r3
 800287a:	73fb      	strb	r3, [r7, #15]
    
    /* set the tx modulation */
    res = llcc68_set_tx_modulation(&gs_handle, modulation);
 800287c:	7bfb      	ldrb	r3, [r7, #15]
 800287e:	4619      	mov	r1, r3
 8002880:	4830      	ldr	r0, [pc, #192]	@ (8002944 <llcc68_lora_init+0x450>)
 8002882:	f7ff fcc3 	bl	800220c <llcc68_set_tx_modulation>
 8002886:	4603      	mov	r3, r0
 8002888:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 800288a:	7dfb      	ldrb	r3, [r7, #23]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d007      	beq.n	80028a0 <llcc68_lora_init+0x3ac>
    {
        llcc68_interface_debug_print("llcc68: set tx modulation failed.\n");
 8002890:	482f      	ldr	r0, [pc, #188]	@ (8002950 <llcc68_lora_init+0x45c>)
 8002892:	f000 fbe9 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 8002896:	482b      	ldr	r0, [pc, #172]	@ (8002944 <llcc68_lora_init+0x450>)
 8002898:	f7fe fd6e 	bl	8001378 <llcc68_deinit>
        
        return 1;
 800289c:	2301      	movs	r3, #1
 800289e:	e04c      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set the rx gain */
    res = llcc68_set_rx_gain(&gs_handle, LLCC68_LORA_DEFAULT_RX_GAIN);
 80028a0:	2194      	movs	r1, #148	@ 0x94
 80028a2:	4828      	ldr	r0, [pc, #160]	@ (8002944 <llcc68_lora_init+0x450>)
 80028a4:	f7ff fd28 	bl	80022f8 <llcc68_set_rx_gain>
 80028a8:	4603      	mov	r3, r0
 80028aa:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 80028ac:	7dfb      	ldrb	r3, [r7, #23]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d007      	beq.n	80028c2 <llcc68_lora_init+0x3ce>
    {
        llcc68_interface_debug_print("llcc68: set rx gain failed.\n");
 80028b2:	4828      	ldr	r0, [pc, #160]	@ (8002954 <llcc68_lora_init+0x460>)
 80028b4:	f000 fbd8 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 80028b8:	4822      	ldr	r0, [pc, #136]	@ (8002944 <llcc68_lora_init+0x450>)
 80028ba:	f7fe fd5d 	bl	8001378 <llcc68_deinit>
        
        return 1;
 80028be:	2301      	movs	r3, #1
 80028c0:	e03b      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* set the ocp */
    res = llcc68_set_ocp(&gs_handle, LLCC68_LORA_DEFAULT_OCP);
 80028c2:	2138      	movs	r1, #56	@ 0x38
 80028c4:	481f      	ldr	r0, [pc, #124]	@ (8002944 <llcc68_lora_init+0x450>)
 80028c6:	f7ff fdc9 	bl	800245c <llcc68_set_ocp>
 80028ca:	4603      	mov	r3, r0
 80028cc:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 80028ce:	7dfb      	ldrb	r3, [r7, #23]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d007      	beq.n	80028e4 <llcc68_lora_init+0x3f0>
    {
        llcc68_interface_debug_print("llcc68: set ocp failed.\n");
 80028d4:	4820      	ldr	r0, [pc, #128]	@ (8002958 <llcc68_lora_init+0x464>)
 80028d6:	f000 fbc7 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 80028da:	481a      	ldr	r0, [pc, #104]	@ (8002944 <llcc68_lora_init+0x450>)
 80028dc:	f7fe fd4c 	bl	8001378 <llcc68_deinit>
        
        return 1;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e02a      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    /* get the tx clamp config */
    res = llcc68_get_tx_clamp_config(&gs_handle, (uint8_t *)&config);
 80028e4:	f107 030e 	add.w	r3, r7, #14
 80028e8:	4619      	mov	r1, r3
 80028ea:	4816      	ldr	r0, [pc, #88]	@ (8002944 <llcc68_lora_init+0x450>)
 80028ec:	f7ff fd7c 	bl	80023e8 <llcc68_get_tx_clamp_config>
 80028f0:	4603      	mov	r3, r0
 80028f2:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 80028f4:	7dfb      	ldrb	r3, [r7, #23]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d007      	beq.n	800290a <llcc68_lora_init+0x416>
    {
        llcc68_interface_debug_print("llcc68: get tx clamp config failed.\n");
 80028fa:	4818      	ldr	r0, [pc, #96]	@ (800295c <llcc68_lora_init+0x468>)
 80028fc:	f000 fbb4 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 8002900:	4810      	ldr	r0, [pc, #64]	@ (8002944 <llcc68_lora_init+0x450>)
 8002902:	f7fe fd39 	bl	8001378 <llcc68_deinit>
        
        return 1;
 8002906:	2301      	movs	r3, #1
 8002908:	e017      	b.n	800293a <llcc68_lora_init+0x446>
    }
    config |= 0x1E;
 800290a:	7bbb      	ldrb	r3, [r7, #14]
 800290c:	f043 031e 	orr.w	r3, r3, #30
 8002910:	b2db      	uxtb	r3, r3
 8002912:	73bb      	strb	r3, [r7, #14]
    
    /* set the tx clamp config */
    res = llcc68_set_tx_clamp_config(&gs_handle, config);
 8002914:	7bbb      	ldrb	r3, [r7, #14]
 8002916:	4619      	mov	r1, r3
 8002918:	480a      	ldr	r0, [pc, #40]	@ (8002944 <llcc68_lora_init+0x450>)
 800291a:	f7ff fd29 	bl	8002370 <llcc68_set_tx_clamp_config>
 800291e:	4603      	mov	r3, r0
 8002920:	75fb      	strb	r3, [r7, #23]
    if (res != 0)
 8002922:	7dfb      	ldrb	r3, [r7, #23]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <llcc68_lora_init+0x444>
    {
        llcc68_interface_debug_print("llcc68: set tx clamp config failed.\n");
 8002928:	480d      	ldr	r0, [pc, #52]	@ (8002960 <llcc68_lora_init+0x46c>)
 800292a:	f000 fb9d 	bl	8003068 <llcc68_interface_debug_print>
        (void)llcc68_deinit(&gs_handle);
 800292e:	4805      	ldr	r0, [pc, #20]	@ (8002944 <llcc68_lora_init+0x450>)
 8002930:	f7fe fd22 	bl	8001378 <llcc68_deinit>
        
        return 1;
 8002934:	2301      	movs	r3, #1
 8002936:	e000      	b.n	800293a <llcc68_lora_init+0x446>
    }
    
    return 0;
 8002938:	2300      	movs	r3, #0
}
 800293a:	4618      	mov	r0, r3
 800293c:	3718      	adds	r7, #24
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	20000074 	.word	0x20000074
 8002948:	08005ddc 	.word	0x08005ddc
 800294c:	08005e00 	.word	0x08005e00
 8002950:	08005e24 	.word	0x08005e24
 8002954:	08005e48 	.word	0x08005e48
 8002958:	08005e68 	.word	0x08005e68
 800295c:	08005e84 	.word	0x08005e84
 8002960:	08005eac 	.word	0x08005eac

08002964 <llcc68_lora_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t llcc68_lora_deinit(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
    if (llcc68_deinit(&gs_handle) != 0)
 8002968:	4805      	ldr	r0, [pc, #20]	@ (8002980 <llcc68_lora_deinit+0x1c>)
 800296a:	f7fe fd05 	bl	8001378 <llcc68_deinit>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <llcc68_lora_deinit+0x14>
    {
        return 1;
 8002974:	2301      	movs	r3, #1
 8002976:	e000      	b.n	800297a <llcc68_lora_deinit+0x16>
    }
    else
    {
        return 0;
 8002978:	2300      	movs	r3, #0
    }
}
 800297a:	4618      	mov	r0, r3
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	20000074 	.word	0x20000074

08002984 <llcc68_lora_set_sent_mode>:
 *         - 0 success
 *         - 1 enter failed
 * @note   none
 */
uint8_t llcc68_lora_set_sent_mode(void)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af02      	add	r7, sp, #8
    /* set dio irq */
    if (llcc68_set_dio_irq_params(&gs_handle, LLCC68_IRQ_TX_DONE | LLCC68_IRQ_TIMEOUT | LLCC68_IRQ_CAD_DONE | LLCC68_IRQ_CAD_DETECTED,
 800298a:	2300      	movs	r3, #0
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	2300      	movs	r3, #0
 8002990:	f240 3281 	movw	r2, #897	@ 0x381
 8002994:	f240 3181 	movw	r1, #897	@ 0x381
 8002998:	480a      	ldr	r0, [pc, #40]	@ (80029c4 <llcc68_lora_set_sent_mode+0x40>)
 800299a:	f7ff f887 	bl	8001aac <llcc68_set_dio_irq_params>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d001      	beq.n	80029a8 <llcc68_lora_set_sent_mode+0x24>
                                  LLCC68_IRQ_TX_DONE | LLCC68_IRQ_TIMEOUT | LLCC68_IRQ_CAD_DONE | LLCC68_IRQ_CAD_DETECTED,
                                  0x0000, 0x0000) != 0)
    {
        return 1;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e00a      	b.n	80029be <llcc68_lora_set_sent_mode+0x3a>
    }
    
    /* clear irq status */
    if (llcc68_clear_irq_status(&gs_handle, 0x03FFU) != 0)
 80029a8:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80029ac:	4805      	ldr	r0, [pc, #20]	@ (80029c4 <llcc68_lora_set_sent_mode+0x40>)
 80029ae:	f7ff f8df 	bl	8001b70 <llcc68_clear_irq_status>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <llcc68_lora_set_sent_mode+0x38>
    {
        return 1;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e000      	b.n	80029be <llcc68_lora_set_sent_mode+0x3a>
    }
    
    return 0;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	20000074 	.word	0x20000074

080029c8 <llcc68_lora_sent>:
 *            - 0 success
 *            - 1 sent failed
 * @note      none
 */
uint8_t llcc68_lora_sent(uint8_t *buf, uint16_t len)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b088      	sub	sp, #32
 80029cc:	af06      	add	r7, sp, #24
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	460b      	mov	r3, r1
 80029d2:	807b      	strh	r3, [r7, #2]
    /* sent the data */
    if (llcc68_lora_transmit(&gs_handle, LLCC68_CLOCK_SOURCE_XTAL_32MHZ,
 80029d4:	2300      	movs	r3, #0
 80029d6:	9304      	str	r3, [sp, #16]
 80029d8:	887b      	ldrh	r3, [r7, #2]
 80029da:	9303      	str	r3, [sp, #12]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	9302      	str	r3, [sp, #8]
 80029e0:	2300      	movs	r3, #0
 80029e2:	9301      	str	r3, [sp, #4]
 80029e4:	2301      	movs	r3, #1
 80029e6:	9300      	str	r3, [sp, #0]
 80029e8:	2300      	movs	r3, #0
 80029ea:	220c      	movs	r2, #12
 80029ec:	2101      	movs	r1, #1
 80029ee:	4806      	ldr	r0, [pc, #24]	@ (8002a08 <llcc68_lora_sent+0x40>)
 80029f0:	f7fe fd4c 	bl	800148c <llcc68_lora_transmit>
 80029f4:	4603      	mov	r3, r0
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d001      	beq.n	80029fe <llcc68_lora_sent+0x36>
                             LLCC68_LORA_DEFAULT_PREAMBLE_LENGTH, LLCC68_LORA_DEFAULT_HEADER,
                             LLCC68_LORA_DEFAULT_CRC_TYPE, LLCC68_LORA_DEFAULT_INVERT_IQ,
                            (uint8_t *)buf, len, 0) != 0)
    {
        return 1;
 80029fa:	2301      	movs	r3, #1
 80029fc:	e000      	b.n	8002a00 <llcc68_lora_sent+0x38>
    }
    
    return 0;
 80029fe:	2300      	movs	r3, #0
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	3708      	adds	r7, #8
 8002a04:	46bd      	mov	sp, r7
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	20000074 	.word	0x20000074

08002a0c <llcc68_lora_get_status>:
 *             - 0 success
 *             - 1 get status failed
 * @note       none
 */
uint8_t llcc68_lora_get_status(float *rssi, float *snr)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b088      	sub	sp, #32
 8002a10:	af04      	add	r7, sp, #16
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	6039      	str	r1, [r7, #0]
    uint8_t snr_pkt_raw;
    uint8_t signal_rssi_pkt_raw;
    float signal_rssi_pkt;
    
    /* get the status */
    if (llcc68_get_lora_packet_status(&gs_handle, (uint8_t *)&rssi_pkt_raw, (uint8_t *)&snr_pkt_raw,
 8002a16:	f107 000d 	add.w	r0, r7, #13
 8002a1a:	f107 020e 	add.w	r2, r7, #14
 8002a1e:	f107 010f 	add.w	r1, r7, #15
 8002a22:	f107 0308 	add.w	r3, r7, #8
 8002a26:	9302      	str	r3, [sp, #8]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	9300      	str	r3, [sp, #0]
 8002a30:	4603      	mov	r3, r0
 8002a32:	4806      	ldr	r0, [pc, #24]	@ (8002a4c <llcc68_lora_get_status+0x40>)
 8002a34:	f7ff fa9e 	bl	8001f74 <llcc68_get_lora_packet_status>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d001      	beq.n	8002a42 <llcc68_lora_get_status+0x36>
                                     (uint8_t *)&signal_rssi_pkt_raw, (float *)rssi, (float *)snr, (float *)&signal_rssi_pkt) != 0)
    {
        return 1;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e000      	b.n	8002a44 <llcc68_lora_get_status+0x38>
    }
    
    return 0;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3710      	adds	r7, #16
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	20000074 	.word	0x20000074

08002a50 <llcc68_lora_check_packet_error>:
 *             - 0 success
 *             - 1 check packet error failed
 * @note       none
 */
uint8_t llcc68_lora_check_packet_error(llcc68_bool_t *enable)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
    /* check the error */
    if (llcc68_check_packet_error(&gs_handle, enable) != 0)
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	4806      	ldr	r0, [pc, #24]	@ (8002a74 <llcc68_lora_check_packet_error+0x24>)
 8002a5c:	f7fe fcf8 	bl	8001450 <llcc68_check_packet_error>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d001      	beq.n	8002a6a <llcc68_lora_check_packet_error+0x1a>
    {
        return 1;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e000      	b.n	8002a6c <llcc68_lora_check_packet_error+0x1c>
    }

    return 0;
 8002a6a:	2300      	movs	r3, #0
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	20000074 	.word	0x20000074

08002a78 <gpio_interrupt_init>:
 * @return status code
 *         - 0 success
 * @note   gpio pin is PB0
 */
uint8_t gpio_interrupt_init(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    
    /* enable gpio clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	603b      	str	r3, [r7, #0]
 8002a82:	4b13      	ldr	r3, [pc, #76]	@ (8002ad0 <gpio_interrupt_init+0x58>)
 8002a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a86:	4a12      	ldr	r2, [pc, #72]	@ (8002ad0 <gpio_interrupt_init+0x58>)
 8002a88:	f043 0302 	orr.w	r3, r3, #2
 8002a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a8e:	4b10      	ldr	r3, [pc, #64]	@ (8002ad0 <gpio_interrupt_init+0x58>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	f003 0302 	and.w	r3, r3, #2
 8002a96:	603b      	str	r3, [r7, #0]
 8002a98:	683b      	ldr	r3, [r7, #0]
    
    /* gpio init */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a9e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002aa2:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa8:	2302      	movs	r3, #2
 8002aaa:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002aac:	1d3b      	adds	r3, r7, #4
 8002aae:	4619      	mov	r1, r3
 8002ab0:	4808      	ldr	r0, [pc, #32]	@ (8002ad4 <gpio_interrupt_init+0x5c>)
 8002ab2:	f000 fe2f 	bl	8003714 <HAL_GPIO_Init>
    
    /* enable nvic */
    HAL_NVIC_SetPriority(EXTI0_IRQn, 3, 0);
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	2103      	movs	r1, #3
 8002aba:	2006      	movs	r0, #6
 8002abc:	f000 fdf1 	bl	80036a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002ac0:	2006      	movs	r0, #6
 8002ac2:	f000 fe0a 	bl	80036da <HAL_NVIC_EnableIRQ>
    
    return 0;
 8002ac6:	2300      	movs	r3, #0
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3718      	adds	r7, #24
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	40020400 	.word	0x40020400

08002ad8 <gpio_interrupt_deinit>:
 * @return status code
 *         - 0 success
 * @note   none
 */
uint8_t gpio_interrupt_deinit(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
    /* gpio deinit */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_0);
 8002adc:	2101      	movs	r1, #1
 8002ade:	4804      	ldr	r0, [pc, #16]	@ (8002af0 <gpio_interrupt_deinit+0x18>)
 8002ae0:	f000 ff9c 	bl	8003a1c <HAL_GPIO_DeInit>
    
    /* disable nvic */
    HAL_NVIC_DisableIRQ(EXTI0_IRQn);
 8002ae4:	2006      	movs	r0, #6
 8002ae6:	f000 fe06 	bl	80036f6 <HAL_NVIC_DisableIRQ>
    
    return 0;
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	bd80      	pop	{r7, pc}
 8002af0:	40020400 	.word	0x40020400

08002af4 <a_callback>:
static void MX_SPI1_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */
static uint8_t gs_rx_done;
static void a_callback(uint16_t type, uint8_t *buf, uint16_t len)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	4603      	mov	r3, r0
 8002afc:	6039      	str	r1, [r7, #0]
 8002afe:	80fb      	strh	r3, [r7, #6]
 8002b00:	4613      	mov	r3, r2
 8002b02:	80bb      	strh	r3, [r7, #4]
    switch (type)
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b0a:	f000 80c9 	beq.w	8002ca0 <a_callback+0x1ac>
 8002b0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b12:	f300 80c9 	bgt.w	8002ca8 <a_callback+0x1b4>
 8002b16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b1a:	f000 80bd 	beq.w	8002c98 <a_callback+0x1a4>
 8002b1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b22:	f300 80c1 	bgt.w	8002ca8 <a_callback+0x1b4>
 8002b26:	2b80      	cmp	r3, #128	@ 0x80
 8002b28:	f000 80b2 	beq.w	8002c90 <a_callback+0x19c>
 8002b2c:	2b80      	cmp	r3, #128	@ 0x80
 8002b2e:	f300 80bb 	bgt.w	8002ca8 <a_callback+0x1b4>
 8002b32:	2b20      	cmp	r3, #32
 8002b34:	dc4a      	bgt.n	8002bcc <a_callback+0xd8>
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f340 80b6 	ble.w	8002ca8 <a_callback+0x1b4>
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	2b1f      	cmp	r3, #31
 8002b40:	f200 80b2 	bhi.w	8002ca8 <a_callback+0x1b4>
 8002b44:	a201      	add	r2, pc, #4	@ (adr r2, 8002b4c <a_callback+0x58>)
 8002b46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b4a:	bf00      	nop
 8002b4c:	08002bd3 	.word	0x08002bd3
 8002b50:	08002bdb 	.word	0x08002bdb
 8002b54:	08002ca9 	.word	0x08002ca9
 8002b58:	08002c69 	.word	0x08002c69
 8002b5c:	08002ca9 	.word	0x08002ca9
 8002b60:	08002ca9 	.word	0x08002ca9
 8002b64:	08002ca9 	.word	0x08002ca9
 8002b68:	08002c71 	.word	0x08002c71
 8002b6c:	08002ca9 	.word	0x08002ca9
 8002b70:	08002ca9 	.word	0x08002ca9
 8002b74:	08002ca9 	.word	0x08002ca9
 8002b78:	08002ca9 	.word	0x08002ca9
 8002b7c:	08002ca9 	.word	0x08002ca9
 8002b80:	08002ca9 	.word	0x08002ca9
 8002b84:	08002ca9 	.word	0x08002ca9
 8002b88:	08002c79 	.word	0x08002c79
 8002b8c:	08002ca9 	.word	0x08002ca9
 8002b90:	08002ca9 	.word	0x08002ca9
 8002b94:	08002ca9 	.word	0x08002ca9
 8002b98:	08002ca9 	.word	0x08002ca9
 8002b9c:	08002ca9 	.word	0x08002ca9
 8002ba0:	08002ca9 	.word	0x08002ca9
 8002ba4:	08002ca9 	.word	0x08002ca9
 8002ba8:	08002ca9 	.word	0x08002ca9
 8002bac:	08002ca9 	.word	0x08002ca9
 8002bb0:	08002ca9 	.word	0x08002ca9
 8002bb4:	08002ca9 	.word	0x08002ca9
 8002bb8:	08002ca9 	.word	0x08002ca9
 8002bbc:	08002ca9 	.word	0x08002ca9
 8002bc0:	08002ca9 	.word	0x08002ca9
 8002bc4:	08002ca9 	.word	0x08002ca9
 8002bc8:	08002c81 	.word	0x08002c81
 8002bcc:	2b40      	cmp	r3, #64	@ 0x40
 8002bce:	d05b      	beq.n	8002c88 <a_callback+0x194>

            break;
        }
        default :
        {
            break;
 8002bd0:	e06a      	b.n	8002ca8 <a_callback+0x1b4>
            llcc68_interface_debug_print("llcc68: irq tx done.\n");
 8002bd2:	483a      	ldr	r0, [pc, #232]	@ (8002cbc <a_callback+0x1c8>)
 8002bd4:	f000 fa48 	bl	8003068 <llcc68_interface_debug_print>
            break;
 8002bd8:	e06d      	b.n	8002cb6 <a_callback+0x1c2>
            llcc68_interface_debug_print("llcc68: irq rx done.\n");
 8002bda:	4839      	ldr	r0, [pc, #228]	@ (8002cc0 <a_callback+0x1cc>)
 8002bdc:	f000 fa44 	bl	8003068 <llcc68_interface_debug_print>
            if (llcc68_lora_get_status((float *)&rssi, (float *)&snr) != 0)
 8002be0:	f107 020c 	add.w	r2, r7, #12
 8002be4:	f107 0310 	add.w	r3, r7, #16
 8002be8:	4611      	mov	r1, r2
 8002bea:	4618      	mov	r0, r3
 8002bec:	f7ff ff0e 	bl	8002a0c <llcc68_lora_get_status>
 8002bf0:	4603      	mov	r3, r0
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d15a      	bne.n	8002cac <a_callback+0x1b8>
            llcc68_interface_debug_print("llcc68: rssi is %0.1f.\n", rssi);
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f7fd fcad 	bl	8000558 <__aeabi_f2d>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	460b      	mov	r3, r1
 8002c02:	4830      	ldr	r0, [pc, #192]	@ (8002cc4 <a_callback+0x1d0>)
 8002c04:	f000 fa30 	bl	8003068 <llcc68_interface_debug_print>
            llcc68_interface_debug_print("llcc68: snr is %0.2f.\n", snr);
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f7fd fca4 	bl	8000558 <__aeabi_f2d>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	482c      	ldr	r0, [pc, #176]	@ (8002cc8 <a_callback+0x1d4>)
 8002c16:	f000 fa27 	bl	8003068 <llcc68_interface_debug_print>
            if (llcc68_lora_check_packet_error(&enable) != 0)
 8002c1a:	f107 0315 	add.w	r3, r7, #21
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7ff ff16 	bl	8002a50 <llcc68_lora_check_packet_error>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d142      	bne.n	8002cb0 <a_callback+0x1bc>
            if ((enable == LLCC68_BOOL_FALSE) && len)
 8002c2a:	7d7b      	ldrb	r3, [r7, #21]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d141      	bne.n	8002cb4 <a_callback+0x1c0>
 8002c30:	88bb      	ldrh	r3, [r7, #4]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d03e      	beq.n	8002cb4 <a_callback+0x1c0>
                for (i = 0; i < len; i++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	82fb      	strh	r3, [r7, #22]
 8002c3a:	e00a      	b.n	8002c52 <a_callback+0x15e>
                    llcc68_interface_debug_print("%c", buf[i]);
 8002c3c:	8afb      	ldrh	r3, [r7, #22]
 8002c3e:	683a      	ldr	r2, [r7, #0]
 8002c40:	4413      	add	r3, r2
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4619      	mov	r1, r3
 8002c46:	4821      	ldr	r0, [pc, #132]	@ (8002ccc <a_callback+0x1d8>)
 8002c48:	f000 fa0e 	bl	8003068 <llcc68_interface_debug_print>
                for (i = 0; i < len; i++)
 8002c4c:	8afb      	ldrh	r3, [r7, #22]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	82fb      	strh	r3, [r7, #22]
 8002c52:	8afa      	ldrh	r2, [r7, #22]
 8002c54:	88bb      	ldrh	r3, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	d3f0      	bcc.n	8002c3c <a_callback+0x148>
                llcc68_interface_debug_print("\n");
 8002c5a:	481d      	ldr	r0, [pc, #116]	@ (8002cd0 <a_callback+0x1dc>)
 8002c5c:	f000 fa04 	bl	8003068 <llcc68_interface_debug_print>
                gs_rx_done = 1;
 8002c60:	4b1c      	ldr	r3, [pc, #112]	@ (8002cd4 <a_callback+0x1e0>)
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]
 8002c66:	e026      	b.n	8002cb6 <a_callback+0x1c2>
            llcc68_interface_debug_print("llcc68: irq preamble detected.\n");
 8002c68:	481b      	ldr	r0, [pc, #108]	@ (8002cd8 <a_callback+0x1e4>)
 8002c6a:	f000 f9fd 	bl	8003068 <llcc68_interface_debug_print>
            break;
 8002c6e:	e022      	b.n	8002cb6 <a_callback+0x1c2>
            llcc68_interface_debug_print("llcc68: irq valid sync word detected.\n");
 8002c70:	481a      	ldr	r0, [pc, #104]	@ (8002cdc <a_callback+0x1e8>)
 8002c72:	f000 f9f9 	bl	8003068 <llcc68_interface_debug_print>
            break;
 8002c76:	e01e      	b.n	8002cb6 <a_callback+0x1c2>
            llcc68_interface_debug_print("llcc68: irq valid header.\n");
 8002c78:	4819      	ldr	r0, [pc, #100]	@ (8002ce0 <a_callback+0x1ec>)
 8002c7a:	f000 f9f5 	bl	8003068 <llcc68_interface_debug_print>
            break;
 8002c7e:	e01a      	b.n	8002cb6 <a_callback+0x1c2>
            llcc68_interface_debug_print("llcc68: irq header error.\n");
 8002c80:	4818      	ldr	r0, [pc, #96]	@ (8002ce4 <a_callback+0x1f0>)
 8002c82:	f000 f9f1 	bl	8003068 <llcc68_interface_debug_print>
            break;
 8002c86:	e016      	b.n	8002cb6 <a_callback+0x1c2>
            llcc68_interface_debug_print("llcc68: irq crc error.\n");
 8002c88:	4817      	ldr	r0, [pc, #92]	@ (8002ce8 <a_callback+0x1f4>)
 8002c8a:	f000 f9ed 	bl	8003068 <llcc68_interface_debug_print>
            break;
 8002c8e:	e012      	b.n	8002cb6 <a_callback+0x1c2>
            llcc68_interface_debug_print("llcc68: irq cad done.\n");
 8002c90:	4816      	ldr	r0, [pc, #88]	@ (8002cec <a_callback+0x1f8>)
 8002c92:	f000 f9e9 	bl	8003068 <llcc68_interface_debug_print>
            break;
 8002c96:	e00e      	b.n	8002cb6 <a_callback+0x1c2>
            llcc68_interface_debug_print("llcc68: irq cad detected.\n");
 8002c98:	4815      	ldr	r0, [pc, #84]	@ (8002cf0 <a_callback+0x1fc>)
 8002c9a:	f000 f9e5 	bl	8003068 <llcc68_interface_debug_print>
            break;
 8002c9e:	e00a      	b.n	8002cb6 <a_callback+0x1c2>
            llcc68_interface_debug_print("llcc68: irq timeout.\n");
 8002ca0:	4814      	ldr	r0, [pc, #80]	@ (8002cf4 <a_callback+0x200>)
 8002ca2:	f000 f9e1 	bl	8003068 <llcc68_interface_debug_print>
            break;
 8002ca6:	e006      	b.n	8002cb6 <a_callback+0x1c2>
            break;
 8002ca8:	bf00      	nop
 8002caa:	e004      	b.n	8002cb6 <a_callback+0x1c2>
                return;
 8002cac:	bf00      	nop
 8002cae:	e002      	b.n	8002cb6 <a_callback+0x1c2>
                return;
 8002cb0:	bf00      	nop
 8002cb2:	e000      	b.n	8002cb6 <a_callback+0x1c2>
            break;
 8002cb4:	bf00      	nop
        }
    }

}
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	08005ed4 	.word	0x08005ed4
 8002cc0:	08005eec 	.word	0x08005eec
 8002cc4:	08005f04 	.word	0x08005f04
 8002cc8:	08005f1c 	.word	0x08005f1c
 8002ccc:	08005f34 	.word	0x08005f34
 8002cd0:	08005f38 	.word	0x08005f38
 8002cd4:	20000331 	.word	0x20000331
 8002cd8:	08005f3c 	.word	0x08005f3c
 8002cdc:	08005f5c 	.word	0x08005f5c
 8002ce0:	08005f84 	.word	0x08005f84
 8002ce4:	08005fa0 	.word	0x08005fa0
 8002ce8:	08005fbc 	.word	0x08005fbc
 8002cec:	08005fd4 	.word	0x08005fd4
 8002cf0:	08005fec 	.word	0x08005fec
 8002cf4:	08006008 	.word	0x08006008

08002cf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

/* gpio init */
res = gpio_interrupt_init();
 8002cfc:	f7ff febc 	bl	8002a78 <gpio_interrupt_init>
 8002d00:	4603      	mov	r3, r0
 8002d02:	b2da      	uxtb	r2, r3
 8002d04:	4b30      	ldr	r3, [pc, #192]	@ (8002dc8 <main+0xd0>)
 8002d06:	701a      	strb	r2, [r3, #0]
if (res != 0)
 8002d08:	4b2f      	ldr	r3, [pc, #188]	@ (8002dc8 <main+0xd0>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d001      	beq.n	8002d14 <main+0x1c>
{
    return 1;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e057      	b.n	8002dc4 <main+0xcc>
}
g_gpio_irq = llcc68_lora_irq_handler;
 8002d14:	4b2d      	ldr	r3, [pc, #180]	@ (8002dcc <main+0xd4>)
 8002d16:	4a2e      	ldr	r2, [pc, #184]	@ (8002dd0 <main+0xd8>)
 8002d18:	601a      	str	r2, [r3, #0]

/* lora init */
res = llcc68_lora_init(a_callback);
 8002d1a:	482e      	ldr	r0, [pc, #184]	@ (8002dd4 <main+0xdc>)
 8002d1c:	f7ff fbea 	bl	80024f4 <llcc68_lora_init>
 8002d20:	4603      	mov	r3, r0
 8002d22:	461a      	mov	r2, r3
 8002d24:	4b28      	ldr	r3, [pc, #160]	@ (8002dc8 <main+0xd0>)
 8002d26:	701a      	strb	r2, [r3, #0]
if (res != 0)
 8002d28:	4b27      	ldr	r3, [pc, #156]	@ (8002dc8 <main+0xd0>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d006      	beq.n	8002d3e <main+0x46>
{
    (void)gpio_interrupt_deinit();
 8002d30:	f7ff fed2 	bl	8002ad8 <gpio_interrupt_deinit>
    g_gpio_irq = NULL;
 8002d34:	4b25      	ldr	r3, [pc, #148]	@ (8002dcc <main+0xd4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]

    return 1;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e042      	b.n	8002dc4 <main+0xcc>

}

/* set sent mode */
res = llcc68_lora_set_sent_mode();
 8002d3e:	f7ff fe21 	bl	8002984 <llcc68_lora_set_sent_mode>
 8002d42:	4603      	mov	r3, r0
 8002d44:	461a      	mov	r2, r3
 8002d46:	4b20      	ldr	r3, [pc, #128]	@ (8002dc8 <main+0xd0>)
 8002d48:	701a      	strb	r2, [r3, #0]
if (res != 0)
 8002d4a:	4b1f      	ldr	r3, [pc, #124]	@ (8002dc8 <main+0xd0>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <main+0x6c>
{
    (void)llcc68_lora_deinit();
 8002d52:	f7ff fe07 	bl	8002964 <llcc68_lora_deinit>
    (void)gpio_interrupt_deinit();
 8002d56:	f7ff febf 	bl	8002ad8 <gpio_interrupt_deinit>
    g_gpio_irq = NULL;
 8002d5a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dcc <main+0xd4>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	601a      	str	r2, [r3, #0]

    return 1;
 8002d60:	2301      	movs	r3, #1
 8002d62:	e02f      	b.n	8002dc4 <main+0xcc>

}

llcc68_interface_debug_print("llcc68: sent %s.\n", "123");
 8002d64:	491c      	ldr	r1, [pc, #112]	@ (8002dd8 <main+0xe0>)
 8002d66:	481d      	ldr	r0, [pc, #116]	@ (8002ddc <main+0xe4>)
 8002d68:	f000 f97e 	bl	8003068 <llcc68_interface_debug_print>

/* sent data */
res = llcc68_lora_sent((uint8_t *)"123", strlen("123"));
 8002d6c:	2103      	movs	r1, #3
 8002d6e:	481a      	ldr	r0, [pc, #104]	@ (8002dd8 <main+0xe0>)
 8002d70:	f7ff fe2a 	bl	80029c8 <llcc68_lora_sent>
 8002d74:	4603      	mov	r3, r0
 8002d76:	461a      	mov	r2, r3
 8002d78:	4b13      	ldr	r3, [pc, #76]	@ (8002dc8 <main+0xd0>)
 8002d7a:	701a      	strb	r2, [r3, #0]
if (res != 0)
 8002d7c:	4b12      	ldr	r3, [pc, #72]	@ (8002dc8 <main+0xd0>)
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d008      	beq.n	8002d96 <main+0x9e>
{
    (void)llcc68_lora_deinit();
 8002d84:	f7ff fdee 	bl	8002964 <llcc68_lora_deinit>
    (void)gpio_interrupt_deinit();
 8002d88:	f7ff fea6 	bl	8002ad8 <gpio_interrupt_deinit>
    g_gpio_irq = NULL;
 8002d8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002dcc <main+0xd4>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

    return 1;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e016      	b.n	8002dc4 <main+0xcc>

}

/* deinit */
res = llcc68_lora_deinit();
 8002d96:	f7ff fde5 	bl	8002964 <llcc68_lora_deinit>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	461a      	mov	r2, r3
 8002d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8002dc8 <main+0xd0>)
 8002da0:	701a      	strb	r2, [r3, #0]
if (res != 0)
 8002da2:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <main+0xd0>)
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d006      	beq.n	8002db8 <main+0xc0>
{
    (void)gpio_interrupt_deinit();
 8002daa:	f7ff fe95 	bl	8002ad8 <gpio_interrupt_deinit>
    g_gpio_irq = NULL;
 8002dae:	4b07      	ldr	r3, [pc, #28]	@ (8002dcc <main+0xd4>)
 8002db0:	2200      	movs	r2, #0
 8002db2:	601a      	str	r2, [r3, #0]

    return 1;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e005      	b.n	8002dc4 <main+0xcc>

}
(void)gpio_interrupt_deinit();
 8002db8:	f7ff fe8e 	bl	8002ad8 <gpio_interrupt_deinit>
g_gpio_irq = NULL;
 8002dbc:	4b03      	ldr	r3, [pc, #12]	@ (8002dcc <main+0xd4>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	601a      	str	r2, [r3, #0]

return 0;
 8002dc2:	2300      	movs	r3, #0
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	20000330 	.word	0x20000330
 8002dcc:	2000032c 	.word	0x2000032c
 8002dd0:	080024d5 	.word	0x080024d5
 8002dd4:	08002af5 	.word	0x08002af5
 8002dd8:	08006020 	.word	0x08006020
 8002ddc:	08006024 	.word	0x08006024

08002de0 <a_spi_cs_init>:
 * @return status code
 *         - 0 success
 * @note   none
 */
static uint8_t a_spi_cs_init(void)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct;
    
    /* enable cs gpio clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	2300      	movs	r3, #0
 8002de8:	603b      	str	r3, [r7, #0]
 8002dea:	4b0f      	ldr	r3, [pc, #60]	@ (8002e28 <a_spi_cs_init+0x48>)
 8002dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dee:	4a0e      	ldr	r2, [pc, #56]	@ (8002e28 <a_spi_cs_init+0x48>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002df6:	4b0c      	ldr	r3, [pc, #48]	@ (8002e28 <a_spi_cs_init+0x48>)
 8002df8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	603b      	str	r3, [r7, #0]
 8002e00:	683b      	ldr	r3, [r7, #0]
    
    /* gpio init */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e02:	2310      	movs	r3, #16
 8002e04:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e06:	2301      	movs	r3, #1
 8002e08:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002e0e:	2302      	movs	r3, #2
 8002e10:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e12:	1d3b      	adds	r3, r7, #4
 8002e14:	4619      	mov	r1, r3
 8002e16:	4805      	ldr	r0, [pc, #20]	@ (8002e2c <a_spi_cs_init+0x4c>)
 8002e18:	f000 fc7c 	bl	8003714 <HAL_GPIO_Init>
    
    return 0;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40020000 	.word	0x40020000

08002e30 <spi_init>:
 *            - 0 success
 *            - 1 init failed
 * @note      SCLK is PA5, MOSI is PA7 MISO is PA6 and CS is PA4
 */
uint8_t spi_init(spi_mode_t mode)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	71fb      	strb	r3, [r7, #7]
    g_spi_handle.Instance = SPI1;
 8002e3a:	4b29      	ldr	r3, [pc, #164]	@ (8002ee0 <spi_init+0xb0>)
 8002e3c:	4a29      	ldr	r2, [pc, #164]	@ (8002ee4 <spi_init+0xb4>)
 8002e3e:	601a      	str	r2, [r3, #0]
    g_spi_handle.Init.Mode = SPI_MODE_MASTER;
 8002e40:	4b27      	ldr	r3, [pc, #156]	@ (8002ee0 <spi_init+0xb0>)
 8002e42:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002e46:	605a      	str	r2, [r3, #4]
    g_spi_handle.Init.Direction = SPI_DIRECTION_2LINES;
 8002e48:	4b25      	ldr	r3, [pc, #148]	@ (8002ee0 <spi_init+0xb0>)
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	609a      	str	r2, [r3, #8]
    g_spi_handle.Init.DataSize = SPI_DATASIZE_8BIT;
 8002e4e:	4b24      	ldr	r3, [pc, #144]	@ (8002ee0 <spi_init+0xb0>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	60da      	str	r2, [r3, #12]
    
    /* set the mode */
    if (mode == SPI_MODE_0)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d106      	bne.n	8002e68 <spi_init+0x38>
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e5a:	4b21      	ldr	r3, [pc, #132]	@ (8002ee0 <spi_init+0xb0>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e60:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee0 <spi_init+0xb0>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	615a      	str	r2, [r3, #20]
 8002e66:	e019      	b.n	8002e9c <spi_init+0x6c>
    }
    else if (mode == SPI_MODE_1)
 8002e68:	79fb      	ldrb	r3, [r7, #7]
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d106      	bne.n	8002e7c <spi_init+0x4c>
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8002ee0 <spi_init+0xb0>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e74:	4b1a      	ldr	r3, [pc, #104]	@ (8002ee0 <spi_init+0xb0>)
 8002e76:	2201      	movs	r2, #1
 8002e78:	615a      	str	r2, [r3, #20]
 8002e7a:	e00f      	b.n	8002e9c <spi_init+0x6c>
    }
    else if (mode == SPI_MODE_2)
 8002e7c:	79fb      	ldrb	r3, [r7, #7]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d106      	bne.n	8002e90 <spi_init+0x60>
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002e82:	4b17      	ldr	r3, [pc, #92]	@ (8002ee0 <spi_init+0xb0>)
 8002e84:	2202      	movs	r2, #2
 8002e86:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002e88:	4b15      	ldr	r3, [pc, #84]	@ (8002ee0 <spi_init+0xb0>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	615a      	str	r2, [r3, #20]
 8002e8e:	e005      	b.n	8002e9c <spi_init+0x6c>
    }
    else
    {
        g_spi_handle.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8002e90:	4b13      	ldr	r3, [pc, #76]	@ (8002ee0 <spi_init+0xb0>)
 8002e92:	2202      	movs	r2, #2
 8002e94:	611a      	str	r2, [r3, #16]
        g_spi_handle.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002e96:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <spi_init+0xb0>)
 8002e98:	2201      	movs	r2, #1
 8002e9a:	615a      	str	r2, [r3, #20]
    }
    g_spi_handle.Init.NSS = SPI_NSS_SOFT;
 8002e9c:	4b10      	ldr	r3, [pc, #64]	@ (8002ee0 <spi_init+0xb0>)
 8002e9e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ea2:	619a      	str	r2, [r3, #24]
    g_spi_handle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8002ee0 <spi_init+0xb0>)
 8002ea6:	2210      	movs	r2, #16
 8002ea8:	61da      	str	r2, [r3, #28]
    g_spi_handle.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eaa:	4b0d      	ldr	r3, [pc, #52]	@ (8002ee0 <spi_init+0xb0>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	621a      	str	r2, [r3, #32]
    g_spi_handle.Init.TIMode = SPI_TIMODE_DISABLE;
 8002eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002ee0 <spi_init+0xb0>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	625a      	str	r2, [r3, #36]	@ 0x24
    g_spi_handle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002eb6:	4b0a      	ldr	r3, [pc, #40]	@ (8002ee0 <spi_init+0xb0>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	629a      	str	r2, [r3, #40]	@ 0x28
    g_spi_handle.Init.CRCPolynomial = 10;
 8002ebc:	4b08      	ldr	r3, [pc, #32]	@ (8002ee0 <spi_init+0xb0>)
 8002ebe:	220a      	movs	r2, #10
 8002ec0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* spi init */
    if (HAL_SPI_Init(&g_spi_handle) != HAL_OK)
 8002ec2:	4807      	ldr	r0, [pc, #28]	@ (8002ee0 <spi_init+0xb0>)
 8002ec4:	f000 fea7 	bl	8003c16 <HAL_SPI_Init>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d001      	beq.n	8002ed2 <spi_init+0xa2>
    {
        return 1;
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e002      	b.n	8002ed8 <spi_init+0xa8>
    }
    
    return a_spi_cs_init();
 8002ed2:	f7ff ff85 	bl	8002de0 <a_spi_cs_init>
 8002ed6:	4603      	mov	r3, r0
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000334 	.word	0x20000334
 8002ee4:	40013000 	.word	0x40013000

08002ee8 <spi_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t spi_deinit(void)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	af00      	add	r7, sp, #0
    /* cs deinit */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_4);
 8002eec:	2110      	movs	r1, #16
 8002eee:	4807      	ldr	r0, [pc, #28]	@ (8002f0c <spi_deinit+0x24>)
 8002ef0:	f000 fd94 	bl	8003a1c <HAL_GPIO_DeInit>
    
    /* spi deinit */
    if (HAL_SPI_DeInit(&g_spi_handle) != HAL_OK)
 8002ef4:	4806      	ldr	r0, [pc, #24]	@ (8002f10 <spi_deinit+0x28>)
 8002ef6:	f000 ff17 	bl	8003d28 <HAL_SPI_DeInit>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d001      	beq.n	8002f04 <spi_deinit+0x1c>
    {
        return 1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <spi_deinit+0x1e>
    }
    
    return 0;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40020000 	.word	0x40020000
 8002f10:	20000334 	.word	0x20000334

08002f14 <spi_write_read>:
 *             - 0 success
 *             - 1 write read failed
 * @note       none
 */
uint8_t spi_write_read(uint8_t *in_buf, uint32_t in_len, uint8_t *out_buf, uint32_t out_len)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b086      	sub	sp, #24
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	607a      	str	r2, [r7, #4]
 8002f20:	603b      	str	r3, [r7, #0]
    uint8_t res;
    
    /* set cs low */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8002f22:	2200      	movs	r2, #0
 8002f24:	2110      	movs	r1, #16
 8002f26:	481d      	ldr	r0, [pc, #116]	@ (8002f9c <spi_write_read+0x88>)
 8002f28:	f000 fe5c 	bl	8003be4 <HAL_GPIO_WritePin>
    
    /* if in_len > 0 */
    if (in_len > 0)
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d013      	beq.n	8002f5a <spi_write_read+0x46>
    {
        /* transmit the input buffer */
        res = HAL_SPI_Transmit(&g_spi_handle, in_buf, in_len, 1000);
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	b29a      	uxth	r2, r3
 8002f36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f3a:	68f9      	ldr	r1, [r7, #12]
 8002f3c:	4818      	ldr	r0, [pc, #96]	@ (8002fa0 <spi_write_read+0x8c>)
 8002f3e:	f000 ff1b 	bl	8003d78 <HAL_SPI_Transmit>
 8002f42:	4603      	mov	r3, r0
 8002f44:	75fb      	strb	r3, [r7, #23]
        if (res != HAL_OK)
 8002f46:	7dfb      	ldrb	r3, [r7, #23]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d006      	beq.n	8002f5a <spi_write_read+0x46>
        {
            /* set cs high */
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	2110      	movs	r1, #16
 8002f50:	4812      	ldr	r0, [pc, #72]	@ (8002f9c <spi_write_read+0x88>)
 8002f52:	f000 fe47 	bl	8003be4 <HAL_GPIO_WritePin>
           
            return 1;
 8002f56:	2301      	movs	r3, #1
 8002f58:	e01c      	b.n	8002f94 <spi_write_read+0x80>
        }
    }
    
    /* if out_len > 0 */
    if (out_len > 0)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d013      	beq.n	8002f88 <spi_write_read+0x74>
    {
        /* transmit to the output buffer */
        res = HAL_SPI_Receive(&g_spi_handle, out_buf, out_len, 1000);
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	b29a      	uxth	r2, r3
 8002f64:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	480d      	ldr	r0, [pc, #52]	@ (8002fa0 <spi_write_read+0x8c>)
 8002f6c:	f001 f847 	bl	8003ffe <HAL_SPI_Receive>
 8002f70:	4603      	mov	r3, r0
 8002f72:	75fb      	strb	r3, [r7, #23]
        if (res != HAL_OK)
 8002f74:	7dfb      	ldrb	r3, [r7, #23]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d006      	beq.n	8002f88 <spi_write_read+0x74>
        {
            /* set cs high */
            HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	2110      	movs	r1, #16
 8002f7e:	4807      	ldr	r0, [pc, #28]	@ (8002f9c <spi_write_read+0x88>)
 8002f80:	f000 fe30 	bl	8003be4 <HAL_GPIO_WritePin>
           
            return 1;
 8002f84:	2301      	movs	r3, #1
 8002f86:	e005      	b.n	8002f94 <spi_write_read+0x80>
        }
    }
    
    /* set cs high */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8002f88:	2201      	movs	r2, #1
 8002f8a:	2110      	movs	r1, #16
 8002f8c:	4803      	ldr	r0, [pc, #12]	@ (8002f9c <spi_write_read+0x88>)
 8002f8e:	f000 fe29 	bl	8003be4 <HAL_GPIO_WritePin>
    
    return 0;
 8002f92:	2300      	movs	r3, #0
}
 8002f94:	4618      	mov	r0, r3
 8002f96:	3718      	adds	r7, #24
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	bd80      	pop	{r7, pc}
 8002f9c:	40020000 	.word	0x40020000
 8002fa0:	20000334 	.word	0x20000334

08002fa4 <llcc68_interface_spi_init>:
 *         - 0 success
 *         - 1 spi init failed
 * @note   none
 */
uint8_t llcc68_interface_spi_init(void)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	af00      	add	r7, sp, #0
    return spi_init(SPI_MODE_0);
 8002fa8:	2000      	movs	r0, #0
 8002faa:	f7ff ff41 	bl	8002e30 <spi_init>
 8002fae:	4603      	mov	r3, r0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}

08002fb4 <llcc68_interface_spi_deinit>:
 *         - 0 success
 *         - 1 spi deinit failed
 * @note   none
 */
uint8_t llcc68_interface_spi_deinit(void)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	af00      	add	r7, sp, #0
    return spi_deinit();
 8002fb8:	f7ff ff96 	bl	8002ee8 <spi_deinit>
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <llcc68_interface_spi_write_read>:
 *             - 1 write read failed
 * @note       none
 */
uint8_t llcc68_interface_spi_write_read(uint8_t *in_buf, uint32_t in_len,
                                        uint8_t *out_buf, uint32_t out_len)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b084      	sub	sp, #16
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	60f8      	str	r0, [r7, #12]
 8002fca:	60b9      	str	r1, [r7, #8]
 8002fcc:	607a      	str	r2, [r7, #4]
 8002fce:	603b      	str	r3, [r7, #0]
    return spi_write_read(in_buf, in_len, out_buf, out_len);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	68b9      	ldr	r1, [r7, #8]
 8002fd6:	68f8      	ldr	r0, [r7, #12]
 8002fd8:	f7ff ff9c 	bl	8002f14 <spi_write_read>
 8002fdc:	4603      	mov	r3, r0
}
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <llcc68_interface_reset_gpio_init>:
 *         - 0 success
 *         - 1 init failed
 * @note   none
 */
uint8_t llcc68_interface_reset_gpio_init(void)
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	af00      	add	r7, sp, #0
    return wire_clock_init();
 8002fea:	f000 f9f1 	bl	80033d0 <wire_clock_init>
 8002fee:	4603      	mov	r3, r0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <llcc68_interface_reset_gpio_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t llcc68_interface_reset_gpio_deinit(void)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	af00      	add	r7, sp, #0
    return wire_clock_deinit();
 8002ff8:	f000 fa12 	bl	8003420 <wire_clock_deinit>
 8002ffc:	4603      	mov	r3, r0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	bd80      	pop	{r7, pc}

08003002 <llcc68_interface_reset_gpio_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t llcc68_interface_reset_gpio_write(uint8_t data)
{
 8003002:	b580      	push	{r7, lr}
 8003004:	b082      	sub	sp, #8
 8003006:	af00      	add	r7, sp, #0
 8003008:	4603      	mov	r3, r0
 800300a:	71fb      	strb	r3, [r7, #7]
    return wire_clock_write(data);
 800300c:	79fb      	ldrb	r3, [r7, #7]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fa12 	bl	8003438 <wire_clock_write>
 8003014:	4603      	mov	r3, r0
}
 8003016:	4618      	mov	r0, r3
 8003018:	3708      	adds	r7, #8
 800301a:	46bd      	mov	sp, r7
 800301c:	bd80      	pop	{r7, pc}

0800301e <llcc68_interface_busy_gpio_init>:
 *         - 0 success
 *         - 1 init failed
 * @note   none
 */
uint8_t llcc68_interface_busy_gpio_init(void)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	af00      	add	r7, sp, #0
    return wire_init();
 8003022:	f000 f967 	bl	80032f4 <wire_init>
 8003026:	4603      	mov	r3, r0
}
 8003028:	4618      	mov	r0, r3
 800302a:	bd80      	pop	{r7, pc}

0800302c <llcc68_interface_busy_gpio_deinit>:
 *         - 0 success
 *         - 1 deinit failed
 * @note   none
 */
uint8_t llcc68_interface_busy_gpio_deinit(void)
{
 800302c:	b580      	push	{r7, lr}
 800302e:	af00      	add	r7, sp, #0
    return wire_deinit();
 8003030:	f000 f9a4 	bl	800337c <wire_deinit>
 8003034:	4603      	mov	r3, r0
}
 8003036:	4618      	mov	r0, r3
 8003038:	bd80      	pop	{r7, pc}

0800303a <llcc68_interface_busy_gpio_read>:
 *             - 0 success
 *             - 1 read failed
 * @note       none
 */
uint8_t llcc68_interface_busy_gpio_read(uint8_t *value)
{
 800303a:	b580      	push	{r7, lr}
 800303c:	b082      	sub	sp, #8
 800303e:	af00      	add	r7, sp, #0
 8003040:	6078      	str	r0, [r7, #4]
    return wire_read(value);
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 f9a6 	bl	8003394 <wire_read>
 8003048:	4603      	mov	r3, r0
}
 800304a:	4618      	mov	r0, r3
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}

08003052 <llcc68_interface_delay_ms>:
 * @brief     interface delay ms
 * @param[in] ms
 * @note      none
 */
void llcc68_interface_delay_ms(uint32_t ms)
{
 8003052:	b580      	push	{r7, lr}
 8003054:	b082      	sub	sp, #8
 8003056:	af00      	add	r7, sp, #0
 8003058:	6078      	str	r0, [r7, #4]
    delay_ms(ms);
 800305a:	6878      	ldr	r0, [r7, #4]
 800305c:	f7fd fd06 	bl	8000a6c <delay_ms>
}
 8003060:	bf00      	nop
 8003062:	3708      	adds	r7, #8
 8003064:	46bd      	mov	sp, r7
 8003066:	bd80      	pop	{r7, pc}

08003068 <llcc68_interface_debug_print>:
 * @brief     interface print format data
 * @param[in] fmt is the format data
 * @note      none
 */
void llcc68_interface_debug_print(const char *const fmt, ...)
{
 8003068:	b40f      	push	{r0, r1, r2, r3}
 800306a:	b580      	push	{r7, lr}
 800306c:	b0c2      	sub	sp, #264	@ 0x108
 800306e:	af00      	add	r7, sp, #0
    char str[256];
    uint16_t len;
    va_list args;
    
    memset((char *)str, 0, sizeof(char) * 256); 
 8003070:	1d3b      	adds	r3, r7, #4
 8003072:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003076:	2100      	movs	r1, #0
 8003078:	4618      	mov	r0, r3
 800307a:	f001 fc3b 	bl	80048f4 <memset>
    va_start(args, fmt);
 800307e:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8003082:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003086:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800308a:	601a      	str	r2, [r3, #0]
    vsnprintf((char *)str, 255, (char const *)fmt, args);
 800308c:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8003090:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003094:	1d38      	adds	r0, r7, #4
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 800309c:	21ff      	movs	r1, #255	@ 0xff
 800309e:	f001 fc1b 	bl	80048d8 <vsniprintf>
    va_end(args);
    
    len = strlen((char *)str);
 80030a2:	1d3b      	adds	r3, r7, #4
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7fd f89b 	bl	80001e0 <strlen>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f8a7 3106 	strh.w	r3, [r7, #262]	@ 0x106
    (void)uart_write((uint8_t *)str, len);
 80030b0:	f8b7 2106 	ldrh.w	r2, [r7, #262]	@ 0x106
 80030b4:	1d3b      	adds	r3, r7, #4
 80030b6:	4611      	mov	r1, r2
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 f8e7 	bl	800328c <uart_write>
}
 80030be:	bf00      	nop
 80030c0:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 80030c4:	46bd      	mov	sp, r7
 80030c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030ca:	b004      	add	sp, #16
 80030cc:	4770      	bx	lr
	...

080030d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b08a      	sub	sp, #40	@ 0x28
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030d8:	f107 0314 	add.w	r3, r7, #20
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]
 80030e0:	605a      	str	r2, [r3, #4]
 80030e2:	609a      	str	r2, [r3, #8]
 80030e4:	60da      	str	r2, [r3, #12]
 80030e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a19      	ldr	r2, [pc, #100]	@ (8003154 <HAL_SPI_MspInit+0x84>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d12b      	bne.n	800314a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80030f2:	2300      	movs	r3, #0
 80030f4:	613b      	str	r3, [r7, #16]
 80030f6:	4b18      	ldr	r3, [pc, #96]	@ (8003158 <HAL_SPI_MspInit+0x88>)
 80030f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030fa:	4a17      	ldr	r2, [pc, #92]	@ (8003158 <HAL_SPI_MspInit+0x88>)
 80030fc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003100:	6453      	str	r3, [r2, #68]	@ 0x44
 8003102:	4b15      	ldr	r3, [pc, #84]	@ (8003158 <HAL_SPI_MspInit+0x88>)
 8003104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003106:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	2300      	movs	r3, #0
 8003110:	60fb      	str	r3, [r7, #12]
 8003112:	4b11      	ldr	r3, [pc, #68]	@ (8003158 <HAL_SPI_MspInit+0x88>)
 8003114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003116:	4a10      	ldr	r2, [pc, #64]	@ (8003158 <HAL_SPI_MspInit+0x88>)
 8003118:	f043 0301 	orr.w	r3, r3, #1
 800311c:	6313      	str	r3, [r2, #48]	@ 0x30
 800311e:	4b0e      	ldr	r3, [pc, #56]	@ (8003158 <HAL_SPI_MspInit+0x88>)
 8003120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800312a:	23e0      	movs	r3, #224	@ 0xe0
 800312c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312e:	2302      	movs	r3, #2
 8003130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003132:	2300      	movs	r3, #0
 8003134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003136:	2303      	movs	r3, #3
 8003138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800313a:	2305      	movs	r3, #5
 800313c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313e:	f107 0314 	add.w	r3, r7, #20
 8003142:	4619      	mov	r1, r3
 8003144:	4805      	ldr	r0, [pc, #20]	@ (800315c <HAL_SPI_MspInit+0x8c>)
 8003146:	f000 fae5 	bl	8003714 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800314a:	bf00      	nop
 800314c:	3728      	adds	r7, #40	@ 0x28
 800314e:	46bd      	mov	sp, r7
 8003150:	bd80      	pop	{r7, pc}
 8003152:	bf00      	nop
 8003154:	40013000 	.word	0x40013000
 8003158:	40023800 	.word	0x40023800
 800315c:	40020000 	.word	0x40020000

08003160 <HAL_SPI_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b082      	sub	sp, #8
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI1)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	4a08      	ldr	r2, [pc, #32]	@ (8003190 <HAL_SPI_MspDeInit+0x30>)
 800316e:	4293      	cmp	r3, r2
 8003170:	d109      	bne.n	8003186 <HAL_SPI_MspDeInit+0x26>
  {
  /* USER CODE BEGIN SPI1_MspDeInit 0 */

  /* USER CODE END SPI1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI1_CLK_DISABLE();
 8003172:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <HAL_SPI_MspDeInit+0x34>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	4a07      	ldr	r2, [pc, #28]	@ (8003194 <HAL_SPI_MspDeInit+0x34>)
 8003178:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800317c:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 800317e:	21e0      	movs	r1, #224	@ 0xe0
 8003180:	4805      	ldr	r0, [pc, #20]	@ (8003198 <HAL_SPI_MspDeInit+0x38>)
 8003182:	f000 fc4b 	bl	8003a1c <HAL_GPIO_DeInit>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8003186:	bf00      	nop
 8003188:	3708      	adds	r7, #8
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40013000 	.word	0x40013000
 8003194:	40023800 	.word	0x40023800
 8003198:	40020000 	.word	0x40020000

0800319c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031a0:	bf00      	nop
 80031a2:	e7fd      	b.n	80031a0 <NMI_Handler+0x4>

080031a4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031a8:	bf00      	nop
 80031aa:	e7fd      	b.n	80031a8 <HardFault_Handler+0x4>

080031ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031ac:	b480      	push	{r7}
 80031ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031b0:	bf00      	nop
 80031b2:	e7fd      	b.n	80031b0 <MemManage_Handler+0x4>

080031b4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031b4:	b480      	push	{r7}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031b8:	bf00      	nop
 80031ba:	e7fd      	b.n	80031b8 <BusFault_Handler+0x4>

080031bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031c0:	bf00      	nop
 80031c2:	e7fd      	b.n	80031c0 <UsageFault_Handler+0x4>

080031c4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031c8:	bf00      	nop
 80031ca:	46bd      	mov	sp, r7
 80031cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d0:	4770      	bx	lr

080031d2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031d2:	b480      	push	{r7}
 80031d4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031d6:	bf00      	nop
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031e0:	b480      	push	{r7}
 80031e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031e4:	bf00      	nop
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031f2:	f000 f965 	bl	80034c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031f6:	bf00      	nop
 80031f8:	bd80      	pop	{r7, pc}
	...

080031fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b086      	sub	sp, #24
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003204:	4a14      	ldr	r2, [pc, #80]	@ (8003258 <_sbrk+0x5c>)
 8003206:	4b15      	ldr	r3, [pc, #84]	@ (800325c <_sbrk+0x60>)
 8003208:	1ad3      	subs	r3, r2, r3
 800320a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003210:	4b13      	ldr	r3, [pc, #76]	@ (8003260 <_sbrk+0x64>)
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d102      	bne.n	800321e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003218:	4b11      	ldr	r3, [pc, #68]	@ (8003260 <_sbrk+0x64>)
 800321a:	4a12      	ldr	r2, [pc, #72]	@ (8003264 <_sbrk+0x68>)
 800321c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800321e:	4b10      	ldr	r3, [pc, #64]	@ (8003260 <_sbrk+0x64>)
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4413      	add	r3, r2
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	429a      	cmp	r2, r3
 800322a:	d207      	bcs.n	800323c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800322c:	f001 fb6a 	bl	8004904 <__errno>
 8003230:	4603      	mov	r3, r0
 8003232:	220c      	movs	r2, #12
 8003234:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003236:	f04f 33ff 	mov.w	r3, #4294967295
 800323a:	e009      	b.n	8003250 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800323c:	4b08      	ldr	r3, [pc, #32]	@ (8003260 <_sbrk+0x64>)
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003242:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <_sbrk+0x64>)
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	4a05      	ldr	r2, [pc, #20]	@ (8003260 <_sbrk+0x64>)
 800324c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800324e:	68fb      	ldr	r3, [r7, #12]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	20010000 	.word	0x20010000
 800325c:	00000400 	.word	0x00000400
 8003260:	2000038c 	.word	0x2000038c
 8003264:	20000528 	.word	0x20000528

08003268 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003268:	b480      	push	{r7}
 800326a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800326c:	4b06      	ldr	r3, [pc, #24]	@ (8003288 <SystemInit+0x20>)
 800326e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003272:	4a05      	ldr	r2, [pc, #20]	@ (8003288 <SystemInit+0x20>)
 8003274:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003278:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800327c:	bf00      	nop
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000ed00 	.word	0xe000ed00

0800328c <uart_write>:
 *            - 0 success
 *            - 1 write failed
 * @note      none
 */
uint8_t uart_write(uint8_t *buf, uint16_t len)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	460b      	mov	r3, r1
 8003296:	807b      	strh	r3, [r7, #2]
    uint16_t timeout = 1000;
 8003298:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800329c:	81fb      	strh	r3, [r7, #14]
    
    /* set tx done 0 */
    g_uart_tx_done = 0;
 800329e:	4b13      	ldr	r3, [pc, #76]	@ (80032ec <uart_write+0x60>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	701a      	strb	r2, [r3, #0]
    
    /* transmit */
    if (HAL_UART_Transmit_IT(&g_uart_handle, (uint8_t *)buf, len) != HAL_OK)
 80032a4:	887b      	ldrh	r3, [r7, #2]
 80032a6:	461a      	mov	r2, r3
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4811      	ldr	r0, [pc, #68]	@ (80032f0 <uart_write+0x64>)
 80032ac:	f001 fab2 	bl	8004814 <HAL_UART_Transmit_IT>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d007      	beq.n	80032c6 <uart_write+0x3a>
    {
        return 1;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e013      	b.n	80032e2 <uart_write+0x56>
    }
    
    /* wait for events */
    while ((g_uart_tx_done == 0) && (timeout != 0))
    {
        HAL_Delay(1);
 80032ba:	2001      	movs	r0, #1
 80032bc:	f000 f920 	bl	8003500 <HAL_Delay>
        timeout--;
 80032c0:	89fb      	ldrh	r3, [r7, #14]
 80032c2:	3b01      	subs	r3, #1
 80032c4:	81fb      	strh	r3, [r7, #14]
    while ((g_uart_tx_done == 0) && (timeout != 0))
 80032c6:	4b09      	ldr	r3, [pc, #36]	@ (80032ec <uart_write+0x60>)
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d102      	bne.n	80032d6 <uart_write+0x4a>
 80032d0:	89fb      	ldrh	r3, [r7, #14]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f1      	bne.n	80032ba <uart_write+0x2e>
    }
    
    /* check the timeout */
    if (timeout != 0)
 80032d6:	89fb      	ldrh	r3, [r7, #14]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d001      	beq.n	80032e0 <uart_write+0x54>
    {
        return 0;
 80032dc:	2300      	movs	r3, #0
 80032de:	e000      	b.n	80032e2 <uart_write+0x56>
    }
    else
    {
        return 1;
 80032e0:	2301      	movs	r3, #1
    }
}
 80032e2:	4618      	mov	r0, r3
 80032e4:	3710      	adds	r7, #16
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}
 80032ea:	bf00      	nop
 80032ec:	200003d8 	.word	0x200003d8
 80032f0:	20000390 	.word	0x20000390

080032f4 <wire_init>:
 * @return status code
 *         - 0 success
 * @note   IO is PA8
 */
uint8_t wire_init(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;
    
    /* enable gpio clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032fa:	2300      	movs	r3, #0
 80032fc:	603b      	str	r3, [r7, #0]
 80032fe:	4b1c      	ldr	r3, [pc, #112]	@ (8003370 <wire_init+0x7c>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	4a1b      	ldr	r2, [pc, #108]	@ (8003370 <wire_init+0x7c>)
 8003304:	f043 0301 	orr.w	r3, r3, #1
 8003308:	6313      	str	r3, [r2, #48]	@ 0x30
 800330a:	4b19      	ldr	r3, [pc, #100]	@ (8003370 <wire_init+0x7c>)
 800330c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330e:	f003 0301 	and.w	r3, r3, #1
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	683b      	ldr	r3, [r7, #0]
    
    /* gpio init */
    GPIO_Initure.Pin = GPIO_PIN_8;
 8003316:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800331a:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;
 800331c:	2301      	movs	r3, #1
 800331e:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull = GPIO_PULLUP;
 8003320:	2301      	movs	r3, #1
 8003322:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;
 8003324:	2302      	movs	r3, #2
 8003326:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_Initure);
 8003328:	1d3b      	adds	r3, r7, #4
 800332a:	4619      	mov	r1, r3
 800332c:	4811      	ldr	r0, [pc, #68]	@ (8003374 <wire_init+0x80>)
 800332e:	f000 f9f1 	bl	8003714 <HAL_GPIO_Init>
    
    /* output mode */
    IO_OUT();
 8003332:	4b10      	ldr	r3, [pc, #64]	@ (8003374 <wire_init+0x80>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a0f      	ldr	r2, [pc, #60]	@ (8003374 <wire_init+0x80>)
 8003338:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800333c:	6013      	str	r3, [r2, #0]
 800333e:	4b0d      	ldr	r3, [pc, #52]	@ (8003374 <wire_init+0x80>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a0c      	ldr	r2, [pc, #48]	@ (8003374 <wire_init+0x80>)
 8003344:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003348:	6013      	str	r3, [r2, #0]
    
    /* set high */
    DQ_OUT = 1;
 800334a:	4b0b      	ldr	r3, [pc, #44]	@ (8003378 <wire_init+0x84>)
 800334c:	2201      	movs	r2, #1
 800334e:	601a      	str	r2, [r3, #0]
    
    /* input mode */
    IO_IN();
 8003350:	4b08      	ldr	r3, [pc, #32]	@ (8003374 <wire_init+0x80>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a07      	ldr	r2, [pc, #28]	@ (8003374 <wire_init+0x80>)
 8003356:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	4b05      	ldr	r3, [pc, #20]	@ (8003374 <wire_init+0x80>)
 800335e:	4a05      	ldr	r2, [pc, #20]	@ (8003374 <wire_init+0x80>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	6013      	str	r3, [r2, #0]
 
    return 0;
 8003364:	2300      	movs	r3, #0
}
 8003366:	4618      	mov	r0, r3
 8003368:	3718      	adds	r7, #24
 800336a:	46bd      	mov	sp, r7
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	40023800 	.word	0x40023800
 8003374:	40020000 	.word	0x40020000
 8003378:	424002a0 	.word	0x424002a0

0800337c <wire_deinit>:
 * @return status code
 *         - 0 success
 * @note   none
 */
uint8_t wire_deinit(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	af00      	add	r7, sp, #0
    /* gpio deinit */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8003380:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8003384:	4802      	ldr	r0, [pc, #8]	@ (8003390 <wire_deinit+0x14>)
 8003386:	f000 fb49 	bl	8003a1c <HAL_GPIO_DeInit>
    
    return 0; 
 800338a:	2300      	movs	r3, #0
}
 800338c:	4618      	mov	r0, r3
 800338e:	bd80      	pop	{r7, pc}
 8003390:	40020000 	.word	0x40020000

08003394 <wire_read>:
 * @return     status code
 *             - 0 success
 * @note       none
 */
uint8_t wire_read(uint8_t *value)
{
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
    /* input mode */
    IO_IN();
 800339c:	4b0a      	ldr	r3, [pc, #40]	@ (80033c8 <wire_read+0x34>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a09      	ldr	r2, [pc, #36]	@ (80033c8 <wire_read+0x34>)
 80033a2:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 80033a6:	6013      	str	r3, [r2, #0]
 80033a8:	4b07      	ldr	r3, [pc, #28]	@ (80033c8 <wire_read+0x34>)
 80033aa:	4a07      	ldr	r2, [pc, #28]	@ (80033c8 <wire_read+0x34>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	6013      	str	r3, [r2, #0]
    
    /* read the data */
    *value = DQ_IN;
 80033b0:	4b06      	ldr	r3, [pc, #24]	@ (80033cc <wire_read+0x38>)
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	b2da      	uxtb	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	701a      	strb	r2, [r3, #0]
    
    return 0;
 80033ba:	2300      	movs	r3, #0
}
 80033bc:	4618      	mov	r0, r3
 80033be:	370c      	adds	r7, #12
 80033c0:	46bd      	mov	sp, r7
 80033c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c6:	4770      	bx	lr
 80033c8:	40020000 	.word	0x40020000
 80033cc:	42400220 	.word	0x42400220

080033d0 <wire_clock_init>:
 * @return status code
 *         - 0 success
 * @note   IO is PA0
 */
uint8_t wire_clock_init(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_Initure;
    
    /* enable gpio clock */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	603b      	str	r3, [r7, #0]
 80033da:	4b0f      	ldr	r3, [pc, #60]	@ (8003418 <wire_clock_init+0x48>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033de:	4a0e      	ldr	r2, [pc, #56]	@ (8003418 <wire_clock_init+0x48>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80033e6:	4b0c      	ldr	r3, [pc, #48]	@ (8003418 <wire_clock_init+0x48>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	603b      	str	r3, [r7, #0]
 80033f0:	683b      	ldr	r3, [r7, #0]
    
    /* gpio init */
    GPIO_Initure.Pin = GPIO_PIN_0;
 80033f2:	2301      	movs	r3, #1
 80033f4:	607b      	str	r3, [r7, #4]
    GPIO_Initure.Mode = GPIO_MODE_OUTPUT_PP;
 80033f6:	2301      	movs	r3, #1
 80033f8:	60bb      	str	r3, [r7, #8]
    GPIO_Initure.Pull = GPIO_PULLUP;
 80033fa:	2301      	movs	r3, #1
 80033fc:	60fb      	str	r3, [r7, #12]
    GPIO_Initure.Speed = GPIO_SPEED_FREQ_HIGH;
 80033fe:	2302      	movs	r3, #2
 8003400:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_Initure); 
 8003402:	1d3b      	adds	r3, r7, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4805      	ldr	r0, [pc, #20]	@ (800341c <wire_clock_init+0x4c>)
 8003408:	f000 f984 	bl	8003714 <HAL_GPIO_Init>
    
    return 0;
 800340c:	2300      	movs	r3, #0
}
 800340e:	4618      	mov	r0, r3
 8003410:	3718      	adds	r7, #24
 8003412:	46bd      	mov	sp, r7
 8003414:	bd80      	pop	{r7, pc}
 8003416:	bf00      	nop
 8003418:	40023800 	.word	0x40023800
 800341c:	40020000 	.word	0x40020000

08003420 <wire_clock_deinit>:
 * @return status code
 *         - 0 success
 * @note   none
 */
uint8_t wire_clock_deinit(void)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	af00      	add	r7, sp, #0
    /* gpio deinit */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_0);
 8003424:	2101      	movs	r1, #1
 8003426:	4803      	ldr	r0, [pc, #12]	@ (8003434 <wire_clock_deinit+0x14>)
 8003428:	f000 faf8 	bl	8003a1c <HAL_GPIO_DeInit>
    
    return 0;
 800342c:	2300      	movs	r3, #0
}
 800342e:	4618      	mov	r0, r3
 8003430:	bd80      	pop	{r7, pc}
 8003432:	bf00      	nop
 8003434:	40020000 	.word	0x40020000

08003438 <wire_clock_write>:
 * @return    status code
 *            - 0 success
 * @note      none
 */
uint8_t wire_clock_write(uint8_t value)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b082      	sub	sp, #8
 800343c:	af00      	add	r7, sp, #0
 800343e:	4603      	mov	r3, r0
 8003440:	71fb      	strb	r3, [r7, #7]
    if (value != 0)
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d005      	beq.n	8003454 <wire_clock_write+0x1c>
    {
        /* set high */
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);
 8003448:	2201      	movs	r2, #1
 800344a:	2101      	movs	r1, #1
 800344c:	4806      	ldr	r0, [pc, #24]	@ (8003468 <wire_clock_write+0x30>)
 800344e:	f000 fbc9 	bl	8003be4 <HAL_GPIO_WritePin>
 8003452:	e004      	b.n	800345e <wire_clock_write+0x26>
    }
    else
    {
        /* set low */
        HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8003454:	2200      	movs	r2, #0
 8003456:	2101      	movs	r1, #1
 8003458:	4803      	ldr	r0, [pc, #12]	@ (8003468 <wire_clock_write+0x30>)
 800345a:	f000 fbc3 	bl	8003be4 <HAL_GPIO_WritePin>
    }
    
    return 0;
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	3708      	adds	r7, #8
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}
 8003468:	40020000 	.word	0x40020000

0800346c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800346c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80034a4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8003470:	f7ff fefa 	bl	8003268 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003474:	480c      	ldr	r0, [pc, #48]	@ (80034a8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003476:	490d      	ldr	r1, [pc, #52]	@ (80034ac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003478:	4a0d      	ldr	r2, [pc, #52]	@ (80034b0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800347a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800347c:	e002      	b.n	8003484 <LoopCopyDataInit>

0800347e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800347e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003480:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003482:	3304      	adds	r3, #4

08003484 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003484:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003486:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003488:	d3f9      	bcc.n	800347e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800348a:	4a0a      	ldr	r2, [pc, #40]	@ (80034b4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800348c:	4c0a      	ldr	r4, [pc, #40]	@ (80034b8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800348e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003490:	e001      	b.n	8003496 <LoopFillZerobss>

08003492 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003492:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003494:	3204      	adds	r2, #4

08003496 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003496:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003498:	d3fb      	bcc.n	8003492 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800349a:	f001 fa39 	bl	8004910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800349e:	f7ff fc2b 	bl	8002cf8 <main>
  bx  lr    
 80034a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80034a4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80034a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034ac:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 80034b0:	0800607c 	.word	0x0800607c
  ldr r2, =_sbss
 80034b4:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 80034b8:	20000528 	.word	0x20000528

080034bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034bc:	e7fe      	b.n	80034bc <ADC_IRQHandler>
	...

080034c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034c4:	4b06      	ldr	r3, [pc, #24]	@ (80034e0 <HAL_IncTick+0x20>)
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <HAL_IncTick+0x24>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4413      	add	r3, r2
 80034d0:	4a04      	ldr	r2, [pc, #16]	@ (80034e4 <HAL_IncTick+0x24>)
 80034d2:	6013      	str	r3, [r2, #0]
}
 80034d4:	bf00      	nop
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	20000004 	.word	0x20000004
 80034e4:	200003dc 	.word	0x200003dc

080034e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
  return uwTick;
 80034ec:	4b03      	ldr	r3, [pc, #12]	@ (80034fc <HAL_GetTick+0x14>)
 80034ee:	681b      	ldr	r3, [r3, #0]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	46bd      	mov	sp, r7
 80034f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f8:	4770      	bx	lr
 80034fa:	bf00      	nop
 80034fc:	200003dc 	.word	0x200003dc

08003500 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003508:	f7ff ffee 	bl	80034e8 <HAL_GetTick>
 800350c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003518:	d005      	beq.n	8003526 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <HAL_Delay+0x44>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	4413      	add	r3, r2
 8003524:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003526:	bf00      	nop
 8003528:	f7ff ffde 	bl	80034e8 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	68bb      	ldr	r3, [r7, #8]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	68fa      	ldr	r2, [r7, #12]
 8003534:	429a      	cmp	r2, r3
 8003536:	d8f7      	bhi.n	8003528 <HAL_Delay+0x28>
  {
  }
}
 8003538:	bf00      	nop
 800353a:	bf00      	nop
 800353c:	3710      	adds	r7, #16
 800353e:	46bd      	mov	sp, r7
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	20000004 	.word	0x20000004

08003548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003548:	b480      	push	{r7}
 800354a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800354c:	4b04      	ldr	r3, [pc, #16]	@ (8003560 <__NVIC_GetPriorityGrouping+0x18>)
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	0a1b      	lsrs	r3, r3, #8
 8003552:	f003 0307 	and.w	r3, r3, #7
}
 8003556:	4618      	mov	r0, r3
 8003558:	46bd      	mov	sp, r7
 800355a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355e:	4770      	bx	lr
 8003560:	e000ed00 	.word	0xe000ed00

08003564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	4603      	mov	r3, r0
 800356c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800356e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003572:	2b00      	cmp	r3, #0
 8003574:	db0b      	blt.n	800358e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003576:	79fb      	ldrb	r3, [r7, #7]
 8003578:	f003 021f 	and.w	r2, r3, #31
 800357c:	4907      	ldr	r1, [pc, #28]	@ (800359c <__NVIC_EnableIRQ+0x38>)
 800357e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003582:	095b      	lsrs	r3, r3, #5
 8003584:	2001      	movs	r0, #1
 8003586:	fa00 f202 	lsl.w	r2, r0, r2
 800358a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800358e:	bf00      	nop
 8003590:	370c      	adds	r7, #12
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	e000e100 	.word	0xe000e100

080035a0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	4603      	mov	r3, r0
 80035a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	db12      	blt.n	80035d8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80035b2:	79fb      	ldrb	r3, [r7, #7]
 80035b4:	f003 021f 	and.w	r2, r3, #31
 80035b8:	490a      	ldr	r1, [pc, #40]	@ (80035e4 <__NVIC_DisableIRQ+0x44>)
 80035ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035be:	095b      	lsrs	r3, r3, #5
 80035c0:	2001      	movs	r0, #1
 80035c2:	fa00 f202 	lsl.w	r2, r0, r2
 80035c6:	3320      	adds	r3, #32
 80035c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80035cc:	f3bf 8f4f 	dsb	sy
}
 80035d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80035d2:	f3bf 8f6f 	isb	sy
}
 80035d6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 80035d8:	bf00      	nop
 80035da:	370c      	adds	r7, #12
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	e000e100 	.word	0xe000e100

080035e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	4603      	mov	r3, r0
 80035f0:	6039      	str	r1, [r7, #0]
 80035f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	db0a      	blt.n	8003612 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	b2da      	uxtb	r2, r3
 8003600:	490c      	ldr	r1, [pc, #48]	@ (8003634 <__NVIC_SetPriority+0x4c>)
 8003602:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003606:	0112      	lsls	r2, r2, #4
 8003608:	b2d2      	uxtb	r2, r2
 800360a:	440b      	add	r3, r1
 800360c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003610:	e00a      	b.n	8003628 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	b2da      	uxtb	r2, r3
 8003616:	4908      	ldr	r1, [pc, #32]	@ (8003638 <__NVIC_SetPriority+0x50>)
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	f003 030f 	and.w	r3, r3, #15
 800361e:	3b04      	subs	r3, #4
 8003620:	0112      	lsls	r2, r2, #4
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	440b      	add	r3, r1
 8003626:	761a      	strb	r2, [r3, #24]
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	e000e100 	.word	0xe000e100
 8003638:	e000ed00 	.word	0xe000ed00

0800363c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800363c:	b480      	push	{r7}
 800363e:	b089      	sub	sp, #36	@ 0x24
 8003640:	af00      	add	r7, sp, #0
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	60b9      	str	r1, [r7, #8]
 8003646:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f003 0307 	and.w	r3, r3, #7
 800364e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003650:	69fb      	ldr	r3, [r7, #28]
 8003652:	f1c3 0307 	rsb	r3, r3, #7
 8003656:	2b04      	cmp	r3, #4
 8003658:	bf28      	it	cs
 800365a:	2304      	movcs	r3, #4
 800365c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	3304      	adds	r3, #4
 8003662:	2b06      	cmp	r3, #6
 8003664:	d902      	bls.n	800366c <NVIC_EncodePriority+0x30>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	3b03      	subs	r3, #3
 800366a:	e000      	b.n	800366e <NVIC_EncodePriority+0x32>
 800366c:	2300      	movs	r3, #0
 800366e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003670:	f04f 32ff 	mov.w	r2, #4294967295
 8003674:	69bb      	ldr	r3, [r7, #24]
 8003676:	fa02 f303 	lsl.w	r3, r2, r3
 800367a:	43da      	mvns	r2, r3
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	401a      	ands	r2, r3
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003684:	f04f 31ff 	mov.w	r1, #4294967295
 8003688:	697b      	ldr	r3, [r7, #20]
 800368a:	fa01 f303 	lsl.w	r3, r1, r3
 800368e:	43d9      	mvns	r1, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003694:	4313      	orrs	r3, r2
         );
}
 8003696:	4618      	mov	r0, r3
 8003698:	3724      	adds	r7, #36	@ 0x24
 800369a:	46bd      	mov	sp, r7
 800369c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a0:	4770      	bx	lr

080036a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b086      	sub	sp, #24
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	4603      	mov	r3, r0
 80036aa:	60b9      	str	r1, [r7, #8]
 80036ac:	607a      	str	r2, [r7, #4]
 80036ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036b0:	2300      	movs	r3, #0
 80036b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036b4:	f7ff ff48 	bl	8003548 <__NVIC_GetPriorityGrouping>
 80036b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	6978      	ldr	r0, [r7, #20]
 80036c0:	f7ff ffbc 	bl	800363c <NVIC_EncodePriority>
 80036c4:	4602      	mov	r2, r0
 80036c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036ca:	4611      	mov	r1, r2
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7ff ff8b 	bl	80035e8 <__NVIC_SetPriority>
}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b082      	sub	sp, #8
 80036de:	af00      	add	r7, sp, #0
 80036e0:	4603      	mov	r3, r0
 80036e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80036e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff3b 	bl	8003564 <__NVIC_EnableIRQ>
}
 80036ee:	bf00      	nop
 80036f0:	3708      	adds	r7, #8
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff4b 	bl	80035a0 <__NVIC_DisableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}
	...

08003714 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003714:	b480      	push	{r7}
 8003716:	b089      	sub	sp, #36	@ 0x24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003722:	2300      	movs	r3, #0
 8003724:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003726:	2300      	movs	r3, #0
 8003728:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
 800372e:	e159      	b.n	80039e4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003730:	2201      	movs	r2, #1
 8003732:	69fb      	ldr	r3, [r7, #28]
 8003734:	fa02 f303 	lsl.w	r3, r2, r3
 8003738:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	697a      	ldr	r2, [r7, #20]
 8003740:	4013      	ands	r3, r2
 8003742:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003744:	693a      	ldr	r2, [r7, #16]
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	429a      	cmp	r2, r3
 800374a:	f040 8148 	bne.w	80039de <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f003 0303 	and.w	r3, r3, #3
 8003756:	2b01      	cmp	r3, #1
 8003758:	d005      	beq.n	8003766 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003762:	2b02      	cmp	r3, #2
 8003764:	d130      	bne.n	80037c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	005b      	lsls	r3, r3, #1
 8003770:	2203      	movs	r2, #3
 8003772:	fa02 f303 	lsl.w	r3, r2, r3
 8003776:	43db      	mvns	r3, r3
 8003778:	69ba      	ldr	r2, [r7, #24]
 800377a:	4013      	ands	r3, r2
 800377c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68da      	ldr	r2, [r3, #12]
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	005b      	lsls	r3, r3, #1
 8003786:	fa02 f303 	lsl.w	r3, r2, r3
 800378a:	69ba      	ldr	r2, [r7, #24]
 800378c:	4313      	orrs	r3, r2
 800378e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	69ba      	ldr	r2, [r7, #24]
 8003794:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800379c:	2201      	movs	r2, #1
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	fa02 f303 	lsl.w	r3, r2, r3
 80037a4:	43db      	mvns	r3, r3
 80037a6:	69ba      	ldr	r2, [r7, #24]
 80037a8:	4013      	ands	r3, r2
 80037aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 0201 	and.w	r2, r3, #1
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	fa02 f303 	lsl.w	r3, r2, r3
 80037bc:	69ba      	ldr	r2, [r7, #24]
 80037be:	4313      	orrs	r3, r2
 80037c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	69ba      	ldr	r2, [r7, #24]
 80037c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	f003 0303 	and.w	r3, r3, #3
 80037d0:	2b03      	cmp	r3, #3
 80037d2:	d017      	beq.n	8003804 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80037da:	69fb      	ldr	r3, [r7, #28]
 80037dc:	005b      	lsls	r3, r3, #1
 80037de:	2203      	movs	r2, #3
 80037e0:	fa02 f303 	lsl.w	r3, r2, r3
 80037e4:	43db      	mvns	r3, r3
 80037e6:	69ba      	ldr	r2, [r7, #24]
 80037e8:	4013      	ands	r3, r2
 80037ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	69ba      	ldr	r2, [r7, #24]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69ba      	ldr	r2, [r7, #24]
 8003802:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	2b02      	cmp	r3, #2
 800380e:	d123      	bne.n	8003858 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	08da      	lsrs	r2, r3, #3
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	3208      	adds	r2, #8
 8003818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800381c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	f003 0307 	and.w	r3, r3, #7
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	220f      	movs	r2, #15
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	43db      	mvns	r3, r3
 800382e:	69ba      	ldr	r2, [r7, #24]
 8003830:	4013      	ands	r3, r2
 8003832:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	691a      	ldr	r2, [r3, #16]
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	f003 0307 	and.w	r3, r3, #7
 800383e:	009b      	lsls	r3, r3, #2
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	4313      	orrs	r3, r2
 8003848:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	08da      	lsrs	r2, r3, #3
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3208      	adds	r2, #8
 8003852:	69b9      	ldr	r1, [r7, #24]
 8003854:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	2203      	movs	r2, #3
 8003864:	fa02 f303 	lsl.w	r3, r2, r3
 8003868:	43db      	mvns	r3, r3
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	4013      	ands	r3, r2
 800386e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f003 0203 	and.w	r2, r3, #3
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	005b      	lsls	r3, r3, #1
 800387c:	fa02 f303 	lsl.w	r3, r2, r3
 8003880:	69ba      	ldr	r2, [r7, #24]
 8003882:	4313      	orrs	r3, r2
 8003884:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80a2 	beq.w	80039de <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800389a:	2300      	movs	r3, #0
 800389c:	60fb      	str	r3, [r7, #12]
 800389e:	4b57      	ldr	r3, [pc, #348]	@ (80039fc <HAL_GPIO_Init+0x2e8>)
 80038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038a2:	4a56      	ldr	r2, [pc, #344]	@ (80039fc <HAL_GPIO_Init+0x2e8>)
 80038a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80038a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80038aa:	4b54      	ldr	r3, [pc, #336]	@ (80039fc <HAL_GPIO_Init+0x2e8>)
 80038ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80038b2:	60fb      	str	r3, [r7, #12]
 80038b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038b6:	4a52      	ldr	r2, [pc, #328]	@ (8003a00 <HAL_GPIO_Init+0x2ec>)
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	089b      	lsrs	r3, r3, #2
 80038bc:	3302      	adds	r3, #2
 80038be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	f003 0303 	and.w	r3, r3, #3
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	220f      	movs	r2, #15
 80038ce:	fa02 f303 	lsl.w	r3, r2, r3
 80038d2:	43db      	mvns	r3, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4013      	ands	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a49      	ldr	r2, [pc, #292]	@ (8003a04 <HAL_GPIO_Init+0x2f0>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d019      	beq.n	8003916 <HAL_GPIO_Init+0x202>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a48      	ldr	r2, [pc, #288]	@ (8003a08 <HAL_GPIO_Init+0x2f4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <HAL_GPIO_Init+0x1fe>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a47      	ldr	r2, [pc, #284]	@ (8003a0c <HAL_GPIO_Init+0x2f8>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00d      	beq.n	800390e <HAL_GPIO_Init+0x1fa>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a46      	ldr	r2, [pc, #280]	@ (8003a10 <HAL_GPIO_Init+0x2fc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d007      	beq.n	800390a <HAL_GPIO_Init+0x1f6>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a45      	ldr	r2, [pc, #276]	@ (8003a14 <HAL_GPIO_Init+0x300>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d101      	bne.n	8003906 <HAL_GPIO_Init+0x1f2>
 8003902:	2304      	movs	r3, #4
 8003904:	e008      	b.n	8003918 <HAL_GPIO_Init+0x204>
 8003906:	2307      	movs	r3, #7
 8003908:	e006      	b.n	8003918 <HAL_GPIO_Init+0x204>
 800390a:	2303      	movs	r3, #3
 800390c:	e004      	b.n	8003918 <HAL_GPIO_Init+0x204>
 800390e:	2302      	movs	r3, #2
 8003910:	e002      	b.n	8003918 <HAL_GPIO_Init+0x204>
 8003912:	2301      	movs	r3, #1
 8003914:	e000      	b.n	8003918 <HAL_GPIO_Init+0x204>
 8003916:	2300      	movs	r3, #0
 8003918:	69fa      	ldr	r2, [r7, #28]
 800391a:	f002 0203 	and.w	r2, r2, #3
 800391e:	0092      	lsls	r2, r2, #2
 8003920:	4093      	lsls	r3, r2
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4313      	orrs	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003928:	4935      	ldr	r1, [pc, #212]	@ (8003a00 <HAL_GPIO_Init+0x2ec>)
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	089b      	lsrs	r3, r3, #2
 800392e:	3302      	adds	r3, #2
 8003930:	69ba      	ldr	r2, [r7, #24]
 8003932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003936:	4b38      	ldr	r3, [pc, #224]	@ (8003a18 <HAL_GPIO_Init+0x304>)
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	43db      	mvns	r3, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4013      	ands	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d003      	beq.n	800395a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003952:	69ba      	ldr	r2, [r7, #24]
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800395a:	4a2f      	ldr	r2, [pc, #188]	@ (8003a18 <HAL_GPIO_Init+0x304>)
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003960:	4b2d      	ldr	r3, [pc, #180]	@ (8003a18 <HAL_GPIO_Init+0x304>)
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800397c:	69ba      	ldr	r2, [r7, #24]
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003984:	4a24      	ldr	r2, [pc, #144]	@ (8003a18 <HAL_GPIO_Init+0x304>)
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800398a:	4b23      	ldr	r3, [pc, #140]	@ (8003a18 <HAL_GPIO_Init+0x304>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003990:	693b      	ldr	r3, [r7, #16]
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4313      	orrs	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ae:	4a1a      	ldr	r2, [pc, #104]	@ (8003a18 <HAL_GPIO_Init+0x304>)
 80039b0:	69bb      	ldr	r3, [r7, #24]
 80039b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039b4:	4b18      	ldr	r3, [pc, #96]	@ (8003a18 <HAL_GPIO_Init+0x304>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	43db      	mvns	r3, r3
 80039be:	69ba      	ldr	r2, [r7, #24]
 80039c0:	4013      	ands	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d003      	beq.n	80039d8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80039d0:	69ba      	ldr	r2, [r7, #24]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039d8:	4a0f      	ldr	r2, [pc, #60]	@ (8003a18 <HAL_GPIO_Init+0x304>)
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3301      	adds	r3, #1
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	2b0f      	cmp	r3, #15
 80039e8:	f67f aea2 	bls.w	8003730 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80039ec:	bf00      	nop
 80039ee:	bf00      	nop
 80039f0:	3724      	adds	r7, #36	@ 0x24
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr
 80039fa:	bf00      	nop
 80039fc:	40023800 	.word	0x40023800
 8003a00:	40013800 	.word	0x40013800
 8003a04:	40020000 	.word	0x40020000
 8003a08:	40020400 	.word	0x40020400
 8003a0c:	40020800 	.word	0x40020800
 8003a10:	40020c00 	.word	0x40020c00
 8003a14:	40021000 	.word	0x40021000
 8003a18:	40013c00 	.word	0x40013c00

08003a1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b087      	sub	sp, #28
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003a26:	2300      	movs	r3, #0
 8003a28:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a32:	2300      	movs	r3, #0
 8003a34:	617b      	str	r3, [r7, #20]
 8003a36:	e0bb      	b.n	8003bb0 <HAL_GPIO_DeInit+0x194>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003a38:	2201      	movs	r2, #1
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	4013      	ands	r3, r2
 8003a48:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	f040 80ab 	bne.w	8003baa <HAL_GPIO_DeInit+0x18e>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003a54:	4a5c      	ldr	r2, [pc, #368]	@ (8003bc8 <HAL_GPIO_DeInit+0x1ac>)
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	089b      	lsrs	r3, r3, #2
 8003a5a:	3302      	adds	r3, #2
 8003a5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a60:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003a62:	697b      	ldr	r3, [r7, #20]
 8003a64:	f003 0303 	and.w	r3, r3, #3
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	220f      	movs	r2, #15
 8003a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a70:	68ba      	ldr	r2, [r7, #8]
 8003a72:	4013      	ands	r3, r2
 8003a74:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a54      	ldr	r2, [pc, #336]	@ (8003bcc <HAL_GPIO_DeInit+0x1b0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d019      	beq.n	8003ab2 <HAL_GPIO_DeInit+0x96>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a53      	ldr	r2, [pc, #332]	@ (8003bd0 <HAL_GPIO_DeInit+0x1b4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d013      	beq.n	8003aae <HAL_GPIO_DeInit+0x92>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a52      	ldr	r2, [pc, #328]	@ (8003bd4 <HAL_GPIO_DeInit+0x1b8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d00d      	beq.n	8003aaa <HAL_GPIO_DeInit+0x8e>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a51      	ldr	r2, [pc, #324]	@ (8003bd8 <HAL_GPIO_DeInit+0x1bc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d007      	beq.n	8003aa6 <HAL_GPIO_DeInit+0x8a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a50      	ldr	r2, [pc, #320]	@ (8003bdc <HAL_GPIO_DeInit+0x1c0>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d101      	bne.n	8003aa2 <HAL_GPIO_DeInit+0x86>
 8003a9e:	2304      	movs	r3, #4
 8003aa0:	e008      	b.n	8003ab4 <HAL_GPIO_DeInit+0x98>
 8003aa2:	2307      	movs	r3, #7
 8003aa4:	e006      	b.n	8003ab4 <HAL_GPIO_DeInit+0x98>
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e004      	b.n	8003ab4 <HAL_GPIO_DeInit+0x98>
 8003aaa:	2302      	movs	r3, #2
 8003aac:	e002      	b.n	8003ab4 <HAL_GPIO_DeInit+0x98>
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_GPIO_DeInit+0x98>
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	f002 0203 	and.w	r2, r2, #3
 8003aba:	0092      	lsls	r2, r2, #2
 8003abc:	4093      	lsls	r3, r2
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d132      	bne.n	8003b2a <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003ac4:	4b46      	ldr	r3, [pc, #280]	@ (8003be0 <HAL_GPIO_DeInit+0x1c4>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	43db      	mvns	r3, r3
 8003acc:	4944      	ldr	r1, [pc, #272]	@ (8003be0 <HAL_GPIO_DeInit+0x1c4>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003ad2:	4b43      	ldr	r3, [pc, #268]	@ (8003be0 <HAL_GPIO_DeInit+0x1c4>)
 8003ad4:	685a      	ldr	r2, [r3, #4]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	4941      	ldr	r1, [pc, #260]	@ (8003be0 <HAL_GPIO_DeInit+0x1c4>)
 8003adc:	4013      	ands	r3, r2
 8003ade:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003ae0:	4b3f      	ldr	r3, [pc, #252]	@ (8003be0 <HAL_GPIO_DeInit+0x1c4>)
 8003ae2:	68da      	ldr	r2, [r3, #12]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	43db      	mvns	r3, r3
 8003ae8:	493d      	ldr	r1, [pc, #244]	@ (8003be0 <HAL_GPIO_DeInit+0x1c4>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003aee:	4b3c      	ldr	r3, [pc, #240]	@ (8003be0 <HAL_GPIO_DeInit+0x1c4>)
 8003af0:	689a      	ldr	r2, [r3, #8]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	43db      	mvns	r3, r3
 8003af6:	493a      	ldr	r1, [pc, #232]	@ (8003be0 <HAL_GPIO_DeInit+0x1c4>)
 8003af8:	4013      	ands	r3, r2
 8003afa:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f003 0303 	and.w	r3, r3, #3
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	220f      	movs	r2, #15
 8003b06:	fa02 f303 	lsl.w	r3, r2, r3
 8003b0a:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003b0c:	4a2e      	ldr	r2, [pc, #184]	@ (8003bc8 <HAL_GPIO_DeInit+0x1ac>)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	089b      	lsrs	r3, r3, #2
 8003b12:	3302      	adds	r3, #2
 8003b14:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	43da      	mvns	r2, r3
 8003b1c:	482a      	ldr	r0, [pc, #168]	@ (8003bc8 <HAL_GPIO_DeInit+0x1ac>)
 8003b1e:	697b      	ldr	r3, [r7, #20]
 8003b20:	089b      	lsrs	r3, r3, #2
 8003b22:	400a      	ands	r2, r1
 8003b24:	3302      	adds	r3, #2
 8003b26:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2103      	movs	r1, #3
 8003b34:	fa01 f303 	lsl.w	r3, r1, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	401a      	ands	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	08da      	lsrs	r2, r3, #3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	3208      	adds	r2, #8
 8003b48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b4c:	697b      	ldr	r3, [r7, #20]
 8003b4e:	f003 0307 	and.w	r3, r3, #7
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	220f      	movs	r2, #15
 8003b56:	fa02 f303 	lsl.w	r3, r2, r3
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	697a      	ldr	r2, [r7, #20]
 8003b5e:	08d2      	lsrs	r2, r2, #3
 8003b60:	4019      	ands	r1, r3
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	3208      	adds	r2, #8
 8003b66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	697b      	ldr	r3, [r7, #20]
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	2103      	movs	r1, #3
 8003b74:	fa01 f303 	lsl.w	r3, r1, r3
 8003b78:	43db      	mvns	r3, r3
 8003b7a:	401a      	ands	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	2101      	movs	r1, #1
 8003b86:	697b      	ldr	r3, [r7, #20]
 8003b88:	fa01 f303 	lsl.w	r3, r1, r3
 8003b8c:	43db      	mvns	r3, r3
 8003b8e:	401a      	ands	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	689a      	ldr	r2, [r3, #8]
 8003b98:	697b      	ldr	r3, [r7, #20]
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	2103      	movs	r1, #3
 8003b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ba2:	43db      	mvns	r3, r3
 8003ba4:	401a      	ands	r2, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	3301      	adds	r3, #1
 8003bae:	617b      	str	r3, [r7, #20]
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	2b0f      	cmp	r3, #15
 8003bb4:	f67f af40 	bls.w	8003a38 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003bb8:	bf00      	nop
 8003bba:	bf00      	nop
 8003bbc:	371c      	adds	r7, #28
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc4:	4770      	bx	lr
 8003bc6:	bf00      	nop
 8003bc8:	40013800 	.word	0x40013800
 8003bcc:	40020000 	.word	0x40020000
 8003bd0:	40020400 	.word	0x40020400
 8003bd4:	40020800 	.word	0x40020800
 8003bd8:	40020c00 	.word	0x40020c00
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40013c00 	.word	0x40013c00

08003be4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	460b      	mov	r3, r1
 8003bee:	807b      	strh	r3, [r7, #2]
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003bf4:	787b      	ldrb	r3, [r7, #1]
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d003      	beq.n	8003c02 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c00:	e003      	b.n	8003c0a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c02:	887b      	ldrh	r3, [r7, #2]
 8003c04:	041a      	lsls	r2, r3, #16
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	619a      	str	r2, [r3, #24]
}
 8003c0a:	bf00      	nop
 8003c0c:	370c      	adds	r7, #12
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d101      	bne.n	8003c28 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003c24:	2301      	movs	r3, #1
 8003c26:	e07b      	b.n	8003d20 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d108      	bne.n	8003c42 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c38:	d009      	beq.n	8003c4e <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	61da      	str	r2, [r3, #28]
 8003c40:	e005      	b.n	8003c4e <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003c5a:	b2db      	uxtb	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff fa31 	bl	80030d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2202      	movs	r2, #2
 8003c72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c84:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003c96:	431a      	orrs	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	68db      	ldr	r3, [r3, #12]
 8003c9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003ca0:	431a      	orrs	r2, r3
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	f003 0302 	and.w	r3, r3, #2
 8003caa:	431a      	orrs	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	695b      	ldr	r3, [r3, #20]
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	699b      	ldr	r3, [r3, #24]
 8003cba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	69db      	ldr	r3, [r3, #28]
 8003cc4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003cc8:	431a      	orrs	r2, r3
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003cd2:	ea42 0103 	orr.w	r1, r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cda:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	699b      	ldr	r3, [r3, #24]
 8003cea:	0c1b      	lsrs	r3, r3, #16
 8003cec:	f003 0104 	and.w	r1, r3, #4
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf4:	f003 0210 	and.w	r2, r3, #16
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	69da      	ldr	r2, [r3, #28]
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2200      	movs	r2, #0
 8003d14:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2201      	movs	r2, #1
 8003d1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d101      	bne.n	8003d3a <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e01a      	b.n	8003d70 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2202      	movs	r2, #2
 8003d3e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003d50:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fa04 	bl	8003160 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8003d6e:	2300      	movs	r3, #0
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3708      	adds	r7, #8
 8003d74:	46bd      	mov	sp, r7
 8003d76:	bd80      	pop	{r7, pc}

08003d78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b088      	sub	sp, #32
 8003d7c:	af00      	add	r7, sp, #0
 8003d7e:	60f8      	str	r0, [r7, #12]
 8003d80:	60b9      	str	r1, [r7, #8]
 8003d82:	603b      	str	r3, [r7, #0]
 8003d84:	4613      	mov	r3, r2
 8003d86:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d101      	bne.n	8003d9a <HAL_SPI_Transmit+0x22>
 8003d96:	2302      	movs	r3, #2
 8003d98:	e12d      	b.n	8003ff6 <HAL_SPI_Transmit+0x27e>
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2201      	movs	r2, #1
 8003d9e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003da2:	f7ff fba1 	bl	80034e8 <HAL_GetTick>
 8003da6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003da8:	88fb      	ldrh	r3, [r7, #6]
 8003daa:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003db2:	b2db      	uxtb	r3, r3
 8003db4:	2b01      	cmp	r3, #1
 8003db6:	d002      	beq.n	8003dbe <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003db8:	2302      	movs	r3, #2
 8003dba:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dbc:	e116      	b.n	8003fec <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_SPI_Transmit+0x52>
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d102      	bne.n	8003dd0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003dce:	e10d      	b.n	8003fec <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	68ba      	ldr	r2, [r7, #8]
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	88fa      	ldrh	r2, [r7, #6]
 8003de8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	88fa      	ldrh	r2, [r7, #6]
 8003dee:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e16:	d10f      	bne.n	8003e38 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e26:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	681a      	ldr	r2, [r3, #0]
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003e36:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e42:	2b40      	cmp	r3, #64	@ 0x40
 8003e44:	d007      	beq.n	8003e56 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	681a      	ldr	r2, [r3, #0]
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003e54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e5e:	d14f      	bne.n	8003f00 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d002      	beq.n	8003e6e <HAL_SPI_Transmit+0xf6>
 8003e68:	8afb      	ldrh	r3, [r7, #22]
 8003e6a:	2b01      	cmp	r3, #1
 8003e6c:	d142      	bne.n	8003ef4 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e72:	881a      	ldrh	r2, [r3, #0]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e7e:	1c9a      	adds	r2, r3, #2
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e88:	b29b      	uxth	r3, r3
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	b29a      	uxth	r2, r3
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003e92:	e02f      	b.n	8003ef4 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d112      	bne.n	8003ec8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ea6:	881a      	ldrh	r2, [r3, #0]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb2:	1c9a      	adds	r2, r3, #2
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ebc:	b29b      	uxth	r3, r3
 8003ebe:	3b01      	subs	r3, #1
 8003ec0:	b29a      	uxth	r2, r3
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ec6:	e015      	b.n	8003ef4 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ec8:	f7ff fb0e 	bl	80034e8 <HAL_GetTick>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	69bb      	ldr	r3, [r7, #24]
 8003ed0:	1ad3      	subs	r3, r2, r3
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	d803      	bhi.n	8003ee0 <HAL_SPI_Transmit+0x168>
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ede:	d102      	bne.n	8003ee6 <HAL_SPI_Transmit+0x16e>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d106      	bne.n	8003ef4 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003ee6:	2303      	movs	r3, #3
 8003ee8:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003ef2:	e07b      	b.n	8003fec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1ca      	bne.n	8003e94 <HAL_SPI_Transmit+0x11c>
 8003efe:	e050      	b.n	8003fa2 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d002      	beq.n	8003f0e <HAL_SPI_Transmit+0x196>
 8003f08:	8afb      	ldrh	r3, [r7, #22]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d144      	bne.n	8003f98 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	330c      	adds	r3, #12
 8003f18:	7812      	ldrb	r2, [r2, #0]
 8003f1a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f20:	1c5a      	adds	r2, r3, #1
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003f34:	e030      	b.n	8003f98 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	f003 0302 	and.w	r3, r3, #2
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d113      	bne.n	8003f6c <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	330c      	adds	r3, #12
 8003f4e:	7812      	ldrb	r2, [r2, #0]
 8003f50:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003f6a:	e015      	b.n	8003f98 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f6c:	f7ff fabc 	bl	80034e8 <HAL_GetTick>
 8003f70:	4602      	mov	r2, r0
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	683a      	ldr	r2, [r7, #0]
 8003f78:	429a      	cmp	r2, r3
 8003f7a:	d803      	bhi.n	8003f84 <HAL_SPI_Transmit+0x20c>
 8003f7c:	683b      	ldr	r3, [r7, #0]
 8003f7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f82:	d102      	bne.n	8003f8a <HAL_SPI_Transmit+0x212>
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d106      	bne.n	8003f98 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	2201      	movs	r2, #1
 8003f92:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003f96:	e029      	b.n	8003fec <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d1c9      	bne.n	8003f36 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	6839      	ldr	r1, [r7, #0]
 8003fa6:	68f8      	ldr	r0, [r7, #12]
 8003fa8:	f000 fbe0 	bl	800476c <SPI_EndRxTxTransaction>
 8003fac:	4603      	mov	r3, r0
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	613b      	str	r3, [r7, #16]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	689b      	ldr	r3, [r3, #8]
 8003fd2:	613b      	str	r3, [r7, #16]
 8003fd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	77fb      	strb	r3, [r7, #31]
 8003fe2:	e003      	b.n	8003fec <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003ff4:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3720      	adds	r7, #32
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b088      	sub	sp, #32
 8004002:	af02      	add	r7, sp, #8
 8004004:	60f8      	str	r0, [r7, #12]
 8004006:	60b9      	str	r1, [r7, #8]
 8004008:	603b      	str	r3, [r7, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800400e:	2300      	movs	r3, #0
 8004010:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d002      	beq.n	8004024 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 800401e:	2302      	movs	r3, #2
 8004020:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004022:	e0fb      	b.n	800421c <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800402c:	d112      	bne.n	8004054 <HAL_SPI_Receive+0x56>
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10e      	bne.n	8004054 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2204      	movs	r2, #4
 800403a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	9300      	str	r3, [sp, #0]
 8004044:	4613      	mov	r3, r2
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	68b9      	ldr	r1, [r7, #8]
 800404a:	68f8      	ldr	r0, [r7, #12]
 800404c:	f000 f8ef 	bl	800422e <HAL_SPI_TransmitReceive>
 8004050:	4603      	mov	r3, r0
 8004052:	e0e8      	b.n	8004226 <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800405a:	2b01      	cmp	r3, #1
 800405c:	d101      	bne.n	8004062 <HAL_SPI_Receive+0x64>
 800405e:	2302      	movs	r3, #2
 8004060:	e0e1      	b.n	8004226 <HAL_SPI_Receive+0x228>
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800406a:	f7ff fa3d 	bl	80034e8 <HAL_GetTick>
 800406e:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d002      	beq.n	800407c <HAL_SPI_Receive+0x7e>
 8004076:	88fb      	ldrh	r3, [r7, #6]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d102      	bne.n	8004082 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004080:	e0cc      	b.n	800421c <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	2204      	movs	r2, #4
 8004086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	88fa      	ldrh	r2, [r7, #6]
 800409a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	88fa      	ldrh	r2, [r7, #6]
 80040a0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	2200      	movs	r2, #0
 80040b2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80040c8:	d10f      	bne.n	80040ea <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80040e8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f4:	2b40      	cmp	r3, #64	@ 0x40
 80040f6:	d007      	beq.n	8004108 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004106:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d16a      	bne.n	80041e6 <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004110:	e032      	b.n	8004178 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	f003 0301 	and.w	r3, r3, #1
 800411c:	2b01      	cmp	r3, #1
 800411e:	d115      	bne.n	800414c <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f103 020c 	add.w	r2, r3, #12
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412c:	7812      	ldrb	r2, [r2, #0]
 800412e:	b2d2      	uxtb	r2, r2
 8004130:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004136:	1c5a      	adds	r2, r3, #1
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800414a:	e015      	b.n	8004178 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800414c:	f7ff f9cc 	bl	80034e8 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	693b      	ldr	r3, [r7, #16]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d803      	bhi.n	8004164 <HAL_SPI_Receive+0x166>
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d102      	bne.n	800416a <HAL_SPI_Receive+0x16c>
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 800416a:	2303      	movs	r3, #3
 800416c:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8004176:	e051      	b.n	800421c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800417c:	b29b      	uxth	r3, r3
 800417e:	2b00      	cmp	r3, #0
 8004180:	d1c7      	bne.n	8004112 <HAL_SPI_Receive+0x114>
 8004182:	e035      	b.n	80041f0 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f003 0301 	and.w	r3, r3, #1
 800418e:	2b01      	cmp	r3, #1
 8004190:	d113      	bne.n	80041ba <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	68da      	ldr	r2, [r3, #12]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800419c:	b292      	uxth	r2, r2
 800419e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041a4:	1c9a      	adds	r2, r3, #2
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ae:	b29b      	uxth	r3, r3
 80041b0:	3b01      	subs	r3, #1
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80041b8:	e015      	b.n	80041e6 <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80041ba:	f7ff f995 	bl	80034e8 <HAL_GetTick>
 80041be:	4602      	mov	r2, r0
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	1ad3      	subs	r3, r2, r3
 80041c4:	683a      	ldr	r2, [r7, #0]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d803      	bhi.n	80041d2 <HAL_SPI_Receive+0x1d4>
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041d0:	d102      	bne.n	80041d8 <HAL_SPI_Receive+0x1da>
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d106      	bne.n	80041e6 <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 80041d8:	2303      	movs	r3, #3
 80041da:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80041e4:	e01a      	b.n	800421c <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ea:	b29b      	uxth	r3, r3
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d1c9      	bne.n	8004184 <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	6839      	ldr	r1, [r7, #0]
 80041f4:	68f8      	ldr	r0, [r7, #12]
 80041f6:	f000 fa53 	bl	80046a0 <SPI_EndRxTransaction>
 80041fa:	4603      	mov	r3, r0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d002      	beq.n	8004206 <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	2220      	movs	r2, #32
 8004204:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800420a:	2b00      	cmp	r3, #0
 800420c:	d002      	beq.n	8004214 <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	75fb      	strb	r3, [r7, #23]
 8004212:	e003      	b.n	800421c <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2201      	movs	r2, #1
 8004218:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004224:	7dfb      	ldrb	r3, [r7, #23]
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b08c      	sub	sp, #48	@ 0x30
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	607a      	str	r2, [r7, #4]
 800423a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800423c:	2301      	movs	r3, #1
 800423e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004240:	2300      	movs	r3, #0
 8004242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800424c:	2b01      	cmp	r3, #1
 800424e:	d101      	bne.n	8004254 <HAL_SPI_TransmitReceive+0x26>
 8004250:	2302      	movs	r3, #2
 8004252:	e198      	b.n	8004586 <HAL_SPI_TransmitReceive+0x358>
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2201      	movs	r2, #1
 8004258:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800425c:	f7ff f944 	bl	80034e8 <HAL_GetTick>
 8004260:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004268:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	685b      	ldr	r3, [r3, #4]
 8004270:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004272:	887b      	ldrh	r3, [r7, #2]
 8004274:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004276:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800427a:	2b01      	cmp	r3, #1
 800427c:	d00f      	beq.n	800429e <HAL_SPI_TransmitReceive+0x70>
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004284:	d107      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d103      	bne.n	8004296 <HAL_SPI_TransmitReceive+0x68>
 800428e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004292:	2b04      	cmp	r3, #4
 8004294:	d003      	beq.n	800429e <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004296:	2302      	movs	r3, #2
 8004298:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800429c:	e16d      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d005      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x82>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d002      	beq.n	80042b0 <HAL_SPI_TransmitReceive+0x82>
 80042aa:	887b      	ldrh	r3, [r7, #2]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d103      	bne.n	80042b8 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80042b6:	e160      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80042be:	b2db      	uxtb	r3, r3
 80042c0:	2b04      	cmp	r3, #4
 80042c2:	d003      	beq.n	80042cc <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2205      	movs	r2, #5
 80042c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2200      	movs	r2, #0
 80042d0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	887a      	ldrh	r2, [r7, #2]
 80042dc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	887a      	ldrh	r2, [r7, #2]
 80042e2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68ba      	ldr	r2, [r7, #8]
 80042e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	887a      	ldrh	r2, [r7, #2]
 80042ee:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	887a      	ldrh	r2, [r7, #2]
 80042f4:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	2200      	movs	r2, #0
 80042fa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	2200      	movs	r2, #0
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800430c:	2b40      	cmp	r3, #64	@ 0x40
 800430e:	d007      	beq.n	8004320 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800431e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004328:	d17c      	bne.n	8004424 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d002      	beq.n	8004338 <HAL_SPI_TransmitReceive+0x10a>
 8004332:	8b7b      	ldrh	r3, [r7, #26]
 8004334:	2b01      	cmp	r3, #1
 8004336:	d16a      	bne.n	800440e <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800433c:	881a      	ldrh	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004348:	1c9a      	adds	r2, r3, #2
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004352:	b29b      	uxth	r3, r3
 8004354:	3b01      	subs	r3, #1
 8004356:	b29a      	uxth	r2, r3
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800435c:	e057      	b.n	800440e <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f003 0302 	and.w	r3, r3, #2
 8004368:	2b02      	cmp	r3, #2
 800436a:	d11b      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x176>
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004370:	b29b      	uxth	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d016      	beq.n	80043a4 <HAL_SPI_TransmitReceive+0x176>
 8004376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004378:	2b01      	cmp	r3, #1
 800437a:	d113      	bne.n	80043a4 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004380:	881a      	ldrh	r2, [r3, #0]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	1c9a      	adds	r2, r3, #2
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004396:	b29b      	uxth	r3, r3
 8004398:	3b01      	subs	r3, #1
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80043a0:	2300      	movs	r3, #0
 80043a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d119      	bne.n	80043e6 <HAL_SPI_TransmitReceive+0x1b8>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d014      	beq.n	80043e6 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	68da      	ldr	r2, [r3, #12]
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043c6:	b292      	uxth	r2, r2
 80043c8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80043ce:	1c9a      	adds	r2, r3, #2
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	3b01      	subs	r3, #1
 80043dc:	b29a      	uxth	r2, r3
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80043e2:	2301      	movs	r3, #1
 80043e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80043e6:	f7ff f87f 	bl	80034e8 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80043f2:	429a      	cmp	r2, r3
 80043f4:	d80b      	bhi.n	800440e <HAL_SPI_TransmitReceive+0x1e0>
 80043f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fc:	d007      	beq.n	800440e <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 80043fe:	2303      	movs	r3, #3
 8004400:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800440c:	e0b5      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004412:	b29b      	uxth	r3, r3
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1a2      	bne.n	800435e <HAL_SPI_TransmitReceive+0x130>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800441c:	b29b      	uxth	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d19d      	bne.n	800435e <HAL_SPI_TransmitReceive+0x130>
 8004422:	e080      	b.n	8004526 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <HAL_SPI_TransmitReceive+0x204>
 800442c:	8b7b      	ldrh	r3, [r7, #26]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d16f      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	330c      	adds	r3, #12
 800443c:	7812      	ldrb	r2, [r2, #0]
 800443e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004444:	1c5a      	adds	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800444e:	b29b      	uxth	r3, r3
 8004450:	3b01      	subs	r3, #1
 8004452:	b29a      	uxth	r2, r3
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004458:	e05b      	b.n	8004512 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	689b      	ldr	r3, [r3, #8]
 8004460:	f003 0302 	and.w	r3, r3, #2
 8004464:	2b02      	cmp	r3, #2
 8004466:	d11c      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x274>
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800446c:	b29b      	uxth	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d017      	beq.n	80044a2 <HAL_SPI_TransmitReceive+0x274>
 8004472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004474:	2b01      	cmp	r3, #1
 8004476:	d114      	bne.n	80044a2 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	330c      	adds	r3, #12
 8004482:	7812      	ldrb	r2, [r2, #0]
 8004484:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800448a:	1c5a      	adds	r2, r3, #1
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004494:	b29b      	uxth	r3, r3
 8004496:	3b01      	subs	r3, #1
 8004498:	b29a      	uxth	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800449e:	2300      	movs	r3, #0
 80044a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d119      	bne.n	80044e4 <HAL_SPI_TransmitReceive+0x2b6>
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d014      	beq.n	80044e4 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68da      	ldr	r2, [r3, #12]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044c4:	b2d2      	uxtb	r2, r2
 80044c6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80044d6:	b29b      	uxth	r3, r3
 80044d8:	3b01      	subs	r3, #1
 80044da:	b29a      	uxth	r2, r3
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80044e0:	2301      	movs	r3, #1
 80044e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80044e4:	f7ff f800 	bl	80034e8 <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d803      	bhi.n	80044fc <HAL_SPI_TransmitReceive+0x2ce>
 80044f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044fa:	d102      	bne.n	8004502 <HAL_SPI_TransmitReceive+0x2d4>
 80044fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d107      	bne.n	8004512 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8004502:	2303      	movs	r3, #3
 8004504:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8004510:	e033      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004516:	b29b      	uxth	r3, r3
 8004518:	2b00      	cmp	r3, #0
 800451a:	d19e      	bne.n	800445a <HAL_SPI_TransmitReceive+0x22c>
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004520:	b29b      	uxth	r3, r3
 8004522:	2b00      	cmp	r3, #0
 8004524:	d199      	bne.n	800445a <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004528:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800452a:	68f8      	ldr	r0, [r7, #12]
 800452c:	f000 f91e 	bl	800476c <SPI_EndRxTxTransaction>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d006      	beq.n	8004544 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2220      	movs	r2, #32
 8004540:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8004542:	e01a      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	689b      	ldr	r3, [r3, #8]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800454c:	2300      	movs	r3, #0
 800454e:	617b      	str	r3, [r7, #20]
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	617b      	str	r3, [r7, #20]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004566:	2b00      	cmp	r3, #0
 8004568:	d003      	beq.n	8004572 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004570:	e003      	b.n	800457a <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8004582:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8004586:	4618      	mov	r0, r3
 8004588:	3730      	adds	r7, #48	@ 0x30
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}
	...

08004590 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004590:	b580      	push	{r7, lr}
 8004592:	b088      	sub	sp, #32
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	603b      	str	r3, [r7, #0]
 800459c:	4613      	mov	r3, r2
 800459e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80045a0:	f7fe ffa2 	bl	80034e8 <HAL_GetTick>
 80045a4:	4602      	mov	r2, r0
 80045a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045a8:	1a9b      	subs	r3, r3, r2
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	4413      	add	r3, r2
 80045ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80045b0:	f7fe ff9a 	bl	80034e8 <HAL_GetTick>
 80045b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80045b6:	4b39      	ldr	r3, [pc, #228]	@ (800469c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	015b      	lsls	r3, r3, #5
 80045bc:	0d1b      	lsrs	r3, r3, #20
 80045be:	69fa      	ldr	r2, [r7, #28]
 80045c0:	fb02 f303 	mul.w	r3, r2, r3
 80045c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80045c6:	e054      	b.n	8004672 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d050      	beq.n	8004672 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80045d0:	f7fe ff8a 	bl	80034e8 <HAL_GetTick>
 80045d4:	4602      	mov	r2, r0
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	1ad3      	subs	r3, r2, r3
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d902      	bls.n	80045e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80045e0:	69fb      	ldr	r3, [r7, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d13d      	bne.n	8004662 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	685a      	ldr	r2, [r3, #4]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80045f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045fe:	d111      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	689b      	ldr	r3, [r3, #8]
 8004604:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004608:	d004      	beq.n	8004614 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004612:	d107      	bne.n	8004624 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004622:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004628:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800462c:	d10f      	bne.n	800464e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	681a      	ldr	r2, [r3, #0]
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800463c:	601a      	str	r2, [r3, #0]
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800464c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2200      	movs	r2, #0
 800465a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e017      	b.n	8004692 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004662:	697b      	ldr	r3, [r7, #20]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d101      	bne.n	800466c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004668:	2300      	movs	r3, #0
 800466a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	3b01      	subs	r3, #1
 8004670:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	689a      	ldr	r2, [r3, #8]
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	4013      	ands	r3, r2
 800467c:	68ba      	ldr	r2, [r7, #8]
 800467e:	429a      	cmp	r2, r3
 8004680:	bf0c      	ite	eq
 8004682:	2301      	moveq	r3, #1
 8004684:	2300      	movne	r3, #0
 8004686:	b2db      	uxtb	r3, r3
 8004688:	461a      	mov	r2, r3
 800468a:	79fb      	ldrb	r3, [r7, #7]
 800468c:	429a      	cmp	r2, r3
 800468e:	d19b      	bne.n	80045c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004690:	2300      	movs	r3, #0
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
 800469a:	bf00      	nop
 800469c:	20000000 	.word	0x20000000

080046a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b086      	sub	sp, #24
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	60f8      	str	r0, [r7, #12]
 80046a8:	60b9      	str	r1, [r7, #8]
 80046aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046b4:	d111      	bne.n	80046da <SPI_EndRxTransaction+0x3a>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80046be:	d004      	beq.n	80046ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046c8:	d107      	bne.n	80046da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80046e2:	d12a      	bne.n	800473a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	689b      	ldr	r3, [r3, #8]
 80046e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046ec:	d012      	beq.n	8004714 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	9300      	str	r3, [sp, #0]
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	2200      	movs	r2, #0
 80046f6:	2180      	movs	r1, #128	@ 0x80
 80046f8:	68f8      	ldr	r0, [r7, #12]
 80046fa:	f7ff ff49 	bl	8004590 <SPI_WaitFlagStateUntilTimeout>
 80046fe:	4603      	mov	r3, r0
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02d      	beq.n	8004760 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004708:	f043 0220 	orr.w	r2, r3, #32
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004710:	2303      	movs	r3, #3
 8004712:	e026      	b.n	8004762 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	2200      	movs	r2, #0
 800471c:	2101      	movs	r1, #1
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff ff36 	bl	8004590 <SPI_WaitFlagStateUntilTimeout>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d01a      	beq.n	8004760 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e013      	b.n	8004762 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	9300      	str	r3, [sp, #0]
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	2200      	movs	r2, #0
 8004742:	2101      	movs	r1, #1
 8004744:	68f8      	ldr	r0, [r7, #12]
 8004746:	f7ff ff23 	bl	8004590 <SPI_WaitFlagStateUntilTimeout>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d007      	beq.n	8004760 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004754:	f043 0220 	orr.w	r2, r3, #32
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800475c:	2303      	movs	r3, #3
 800475e:	e000      	b.n	8004762 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	3710      	adds	r7, #16
 8004766:	46bd      	mov	sp, r7
 8004768:	bd80      	pop	{r7, pc}
	...

0800476c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b088      	sub	sp, #32
 8004770:	af02      	add	r7, sp, #8
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	2201      	movs	r2, #1
 8004780:	2102      	movs	r1, #2
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f7ff ff04 	bl	8004590 <SPI_WaitFlagStateUntilTimeout>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d007      	beq.n	800479e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004792:	f043 0220 	orr.w	r2, r3, #32
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e032      	b.n	8004804 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800479e:	4b1b      	ldr	r3, [pc, #108]	@ (800480c <SPI_EndRxTxTransaction+0xa0>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a1b      	ldr	r2, [pc, #108]	@ (8004810 <SPI_EndRxTxTransaction+0xa4>)
 80047a4:	fba2 2303 	umull	r2, r3, r2, r3
 80047a8:	0d5b      	lsrs	r3, r3, #21
 80047aa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80047ae:	fb02 f303 	mul.w	r3, r2, r3
 80047b2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80047bc:	d112      	bne.n	80047e4 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	9300      	str	r3, [sp, #0]
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	2200      	movs	r2, #0
 80047c6:	2180      	movs	r1, #128	@ 0x80
 80047c8:	68f8      	ldr	r0, [r7, #12]
 80047ca:	f7ff fee1 	bl	8004590 <SPI_WaitFlagStateUntilTimeout>
 80047ce:	4603      	mov	r3, r0
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d016      	beq.n	8004802 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e00f      	b.n	8004804 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	3b01      	subs	r3, #1
 80047ee:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	689b      	ldr	r3, [r3, #8]
 80047f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047fa:	2b80      	cmp	r3, #128	@ 0x80
 80047fc:	d0f2      	beq.n	80047e4 <SPI_EndRxTxTransaction+0x78>
 80047fe:	e000      	b.n	8004802 <SPI_EndRxTxTransaction+0x96>
        break;
 8004800:	bf00      	nop
  }

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	20000000 	.word	0x20000000
 8004810:	165e9f81 	.word	0x165e9f81

08004814 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	60f8      	str	r0, [r7, #12]
 800481c:	60b9      	str	r1, [r7, #8]
 800481e:	4613      	mov	r3, r2
 8004820:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004828:	b2db      	uxtb	r3, r3
 800482a:	2b20      	cmp	r3, #32
 800482c:	d121      	bne.n	8004872 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d002      	beq.n	800483a <HAL_UART_Transmit_IT+0x26>
 8004834:	88fb      	ldrh	r3, [r7, #6]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d101      	bne.n	800483e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e01a      	b.n	8004874 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	68ba      	ldr	r2, [r7, #8]
 8004842:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	88fa      	ldrh	r2, [r7, #6]
 8004848:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	88fa      	ldrh	r2, [r7, #6]
 800484e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2200      	movs	r2, #0
 8004854:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2221      	movs	r2, #33	@ 0x21
 800485a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68da      	ldr	r2, [r3, #12]
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800486c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800486e:	2300      	movs	r3, #0
 8004870:	e000      	b.n	8004874 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8004872:	2302      	movs	r3, #2
  }
}
 8004874:	4618      	mov	r0, r3
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_vsniprintf_r>:
 8004880:	b530      	push	{r4, r5, lr}
 8004882:	4614      	mov	r4, r2
 8004884:	2c00      	cmp	r4, #0
 8004886:	b09b      	sub	sp, #108	@ 0x6c
 8004888:	4605      	mov	r5, r0
 800488a:	461a      	mov	r2, r3
 800488c:	da05      	bge.n	800489a <_vsniprintf_r+0x1a>
 800488e:	238b      	movs	r3, #139	@ 0x8b
 8004890:	6003      	str	r3, [r0, #0]
 8004892:	f04f 30ff 	mov.w	r0, #4294967295
 8004896:	b01b      	add	sp, #108	@ 0x6c
 8004898:	bd30      	pop	{r4, r5, pc}
 800489a:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800489e:	f8ad 300c 	strh.w	r3, [sp, #12]
 80048a2:	bf14      	ite	ne
 80048a4:	f104 33ff 	addne.w	r3, r4, #4294967295
 80048a8:	4623      	moveq	r3, r4
 80048aa:	9302      	str	r3, [sp, #8]
 80048ac:	9305      	str	r3, [sp, #20]
 80048ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80048b2:	9100      	str	r1, [sp, #0]
 80048b4:	9104      	str	r1, [sp, #16]
 80048b6:	f8ad 300e 	strh.w	r3, [sp, #14]
 80048ba:	4669      	mov	r1, sp
 80048bc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80048be:	f000 f9af 	bl	8004c20 <_svfiprintf_r>
 80048c2:	1c43      	adds	r3, r0, #1
 80048c4:	bfbc      	itt	lt
 80048c6:	238b      	movlt	r3, #139	@ 0x8b
 80048c8:	602b      	strlt	r3, [r5, #0]
 80048ca:	2c00      	cmp	r4, #0
 80048cc:	d0e3      	beq.n	8004896 <_vsniprintf_r+0x16>
 80048ce:	9b00      	ldr	r3, [sp, #0]
 80048d0:	2200      	movs	r2, #0
 80048d2:	701a      	strb	r2, [r3, #0]
 80048d4:	e7df      	b.n	8004896 <_vsniprintf_r+0x16>
	...

080048d8 <vsniprintf>:
 80048d8:	b507      	push	{r0, r1, r2, lr}
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	4613      	mov	r3, r2
 80048de:	460a      	mov	r2, r1
 80048e0:	4601      	mov	r1, r0
 80048e2:	4803      	ldr	r0, [pc, #12]	@ (80048f0 <vsniprintf+0x18>)
 80048e4:	6800      	ldr	r0, [r0, #0]
 80048e6:	f7ff ffcb 	bl	8004880 <_vsniprintf_r>
 80048ea:	b003      	add	sp, #12
 80048ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80048f0:	20000008 	.word	0x20000008

080048f4 <memset>:
 80048f4:	4402      	add	r2, r0
 80048f6:	4603      	mov	r3, r0
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d100      	bne.n	80048fe <memset+0xa>
 80048fc:	4770      	bx	lr
 80048fe:	f803 1b01 	strb.w	r1, [r3], #1
 8004902:	e7f9      	b.n	80048f8 <memset+0x4>

08004904 <__errno>:
 8004904:	4b01      	ldr	r3, [pc, #4]	@ (800490c <__errno+0x8>)
 8004906:	6818      	ldr	r0, [r3, #0]
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000008 	.word	0x20000008

08004910 <__libc_init_array>:
 8004910:	b570      	push	{r4, r5, r6, lr}
 8004912:	4d0d      	ldr	r5, [pc, #52]	@ (8004948 <__libc_init_array+0x38>)
 8004914:	4c0d      	ldr	r4, [pc, #52]	@ (800494c <__libc_init_array+0x3c>)
 8004916:	1b64      	subs	r4, r4, r5
 8004918:	10a4      	asrs	r4, r4, #2
 800491a:	2600      	movs	r6, #0
 800491c:	42a6      	cmp	r6, r4
 800491e:	d109      	bne.n	8004934 <__libc_init_array+0x24>
 8004920:	4d0b      	ldr	r5, [pc, #44]	@ (8004950 <__libc_init_array+0x40>)
 8004922:	4c0c      	ldr	r4, [pc, #48]	@ (8004954 <__libc_init_array+0x44>)
 8004924:	f000 fc66 	bl	80051f4 <_init>
 8004928:	1b64      	subs	r4, r4, r5
 800492a:	10a4      	asrs	r4, r4, #2
 800492c:	2600      	movs	r6, #0
 800492e:	42a6      	cmp	r6, r4
 8004930:	d105      	bne.n	800493e <__libc_init_array+0x2e>
 8004932:	bd70      	pop	{r4, r5, r6, pc}
 8004934:	f855 3b04 	ldr.w	r3, [r5], #4
 8004938:	4798      	blx	r3
 800493a:	3601      	adds	r6, #1
 800493c:	e7ee      	b.n	800491c <__libc_init_array+0xc>
 800493e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004942:	4798      	blx	r3
 8004944:	3601      	adds	r6, #1
 8004946:	e7f2      	b.n	800492e <__libc_init_array+0x1e>
 8004948:	08006074 	.word	0x08006074
 800494c:	08006074 	.word	0x08006074
 8004950:	08006074 	.word	0x08006074
 8004954:	08006078 	.word	0x08006078

08004958 <__retarget_lock_acquire_recursive>:
 8004958:	4770      	bx	lr

0800495a <__retarget_lock_release_recursive>:
 800495a:	4770      	bx	lr

0800495c <memcpy>:
 800495c:	440a      	add	r2, r1
 800495e:	4291      	cmp	r1, r2
 8004960:	f100 33ff 	add.w	r3, r0, #4294967295
 8004964:	d100      	bne.n	8004968 <memcpy+0xc>
 8004966:	4770      	bx	lr
 8004968:	b510      	push	{r4, lr}
 800496a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800496e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004972:	4291      	cmp	r1, r2
 8004974:	d1f9      	bne.n	800496a <memcpy+0xe>
 8004976:	bd10      	pop	{r4, pc}

08004978 <_free_r>:
 8004978:	b538      	push	{r3, r4, r5, lr}
 800497a:	4605      	mov	r5, r0
 800497c:	2900      	cmp	r1, #0
 800497e:	d041      	beq.n	8004a04 <_free_r+0x8c>
 8004980:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004984:	1f0c      	subs	r4, r1, #4
 8004986:	2b00      	cmp	r3, #0
 8004988:	bfb8      	it	lt
 800498a:	18e4      	addlt	r4, r4, r3
 800498c:	f000 f8e0 	bl	8004b50 <__malloc_lock>
 8004990:	4a1d      	ldr	r2, [pc, #116]	@ (8004a08 <_free_r+0x90>)
 8004992:	6813      	ldr	r3, [r2, #0]
 8004994:	b933      	cbnz	r3, 80049a4 <_free_r+0x2c>
 8004996:	6063      	str	r3, [r4, #4]
 8004998:	6014      	str	r4, [r2, #0]
 800499a:	4628      	mov	r0, r5
 800499c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80049a0:	f000 b8dc 	b.w	8004b5c <__malloc_unlock>
 80049a4:	42a3      	cmp	r3, r4
 80049a6:	d908      	bls.n	80049ba <_free_r+0x42>
 80049a8:	6820      	ldr	r0, [r4, #0]
 80049aa:	1821      	adds	r1, r4, r0
 80049ac:	428b      	cmp	r3, r1
 80049ae:	bf01      	itttt	eq
 80049b0:	6819      	ldreq	r1, [r3, #0]
 80049b2:	685b      	ldreq	r3, [r3, #4]
 80049b4:	1809      	addeq	r1, r1, r0
 80049b6:	6021      	streq	r1, [r4, #0]
 80049b8:	e7ed      	b.n	8004996 <_free_r+0x1e>
 80049ba:	461a      	mov	r2, r3
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	b10b      	cbz	r3, 80049c4 <_free_r+0x4c>
 80049c0:	42a3      	cmp	r3, r4
 80049c2:	d9fa      	bls.n	80049ba <_free_r+0x42>
 80049c4:	6811      	ldr	r1, [r2, #0]
 80049c6:	1850      	adds	r0, r2, r1
 80049c8:	42a0      	cmp	r0, r4
 80049ca:	d10b      	bne.n	80049e4 <_free_r+0x6c>
 80049cc:	6820      	ldr	r0, [r4, #0]
 80049ce:	4401      	add	r1, r0
 80049d0:	1850      	adds	r0, r2, r1
 80049d2:	4283      	cmp	r3, r0
 80049d4:	6011      	str	r1, [r2, #0]
 80049d6:	d1e0      	bne.n	800499a <_free_r+0x22>
 80049d8:	6818      	ldr	r0, [r3, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	6053      	str	r3, [r2, #4]
 80049de:	4408      	add	r0, r1
 80049e0:	6010      	str	r0, [r2, #0]
 80049e2:	e7da      	b.n	800499a <_free_r+0x22>
 80049e4:	d902      	bls.n	80049ec <_free_r+0x74>
 80049e6:	230c      	movs	r3, #12
 80049e8:	602b      	str	r3, [r5, #0]
 80049ea:	e7d6      	b.n	800499a <_free_r+0x22>
 80049ec:	6820      	ldr	r0, [r4, #0]
 80049ee:	1821      	adds	r1, r4, r0
 80049f0:	428b      	cmp	r3, r1
 80049f2:	bf04      	itt	eq
 80049f4:	6819      	ldreq	r1, [r3, #0]
 80049f6:	685b      	ldreq	r3, [r3, #4]
 80049f8:	6063      	str	r3, [r4, #4]
 80049fa:	bf04      	itt	eq
 80049fc:	1809      	addeq	r1, r1, r0
 80049fe:	6021      	streq	r1, [r4, #0]
 8004a00:	6054      	str	r4, [r2, #4]
 8004a02:	e7ca      	b.n	800499a <_free_r+0x22>
 8004a04:	bd38      	pop	{r3, r4, r5, pc}
 8004a06:	bf00      	nop
 8004a08:	20000524 	.word	0x20000524

08004a0c <sbrk_aligned>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4e0f      	ldr	r6, [pc, #60]	@ (8004a4c <sbrk_aligned+0x40>)
 8004a10:	460c      	mov	r4, r1
 8004a12:	6831      	ldr	r1, [r6, #0]
 8004a14:	4605      	mov	r5, r0
 8004a16:	b911      	cbnz	r1, 8004a1e <sbrk_aligned+0x12>
 8004a18:	f000 fba6 	bl	8005168 <_sbrk_r>
 8004a1c:	6030      	str	r0, [r6, #0]
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	f000 fba1 	bl	8005168 <_sbrk_r>
 8004a26:	1c43      	adds	r3, r0, #1
 8004a28:	d103      	bne.n	8004a32 <sbrk_aligned+0x26>
 8004a2a:	f04f 34ff 	mov.w	r4, #4294967295
 8004a2e:	4620      	mov	r0, r4
 8004a30:	bd70      	pop	{r4, r5, r6, pc}
 8004a32:	1cc4      	adds	r4, r0, #3
 8004a34:	f024 0403 	bic.w	r4, r4, #3
 8004a38:	42a0      	cmp	r0, r4
 8004a3a:	d0f8      	beq.n	8004a2e <sbrk_aligned+0x22>
 8004a3c:	1a21      	subs	r1, r4, r0
 8004a3e:	4628      	mov	r0, r5
 8004a40:	f000 fb92 	bl	8005168 <_sbrk_r>
 8004a44:	3001      	adds	r0, #1
 8004a46:	d1f2      	bne.n	8004a2e <sbrk_aligned+0x22>
 8004a48:	e7ef      	b.n	8004a2a <sbrk_aligned+0x1e>
 8004a4a:	bf00      	nop
 8004a4c:	20000520 	.word	0x20000520

08004a50 <_malloc_r>:
 8004a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a54:	1ccd      	adds	r5, r1, #3
 8004a56:	f025 0503 	bic.w	r5, r5, #3
 8004a5a:	3508      	adds	r5, #8
 8004a5c:	2d0c      	cmp	r5, #12
 8004a5e:	bf38      	it	cc
 8004a60:	250c      	movcc	r5, #12
 8004a62:	2d00      	cmp	r5, #0
 8004a64:	4606      	mov	r6, r0
 8004a66:	db01      	blt.n	8004a6c <_malloc_r+0x1c>
 8004a68:	42a9      	cmp	r1, r5
 8004a6a:	d904      	bls.n	8004a76 <_malloc_r+0x26>
 8004a6c:	230c      	movs	r3, #12
 8004a6e:	6033      	str	r3, [r6, #0]
 8004a70:	2000      	movs	r0, #0
 8004a72:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a76:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004b4c <_malloc_r+0xfc>
 8004a7a:	f000 f869 	bl	8004b50 <__malloc_lock>
 8004a7e:	f8d8 3000 	ldr.w	r3, [r8]
 8004a82:	461c      	mov	r4, r3
 8004a84:	bb44      	cbnz	r4, 8004ad8 <_malloc_r+0x88>
 8004a86:	4629      	mov	r1, r5
 8004a88:	4630      	mov	r0, r6
 8004a8a:	f7ff ffbf 	bl	8004a0c <sbrk_aligned>
 8004a8e:	1c43      	adds	r3, r0, #1
 8004a90:	4604      	mov	r4, r0
 8004a92:	d158      	bne.n	8004b46 <_malloc_r+0xf6>
 8004a94:	f8d8 4000 	ldr.w	r4, [r8]
 8004a98:	4627      	mov	r7, r4
 8004a9a:	2f00      	cmp	r7, #0
 8004a9c:	d143      	bne.n	8004b26 <_malloc_r+0xd6>
 8004a9e:	2c00      	cmp	r4, #0
 8004aa0:	d04b      	beq.n	8004b3a <_malloc_r+0xea>
 8004aa2:	6823      	ldr	r3, [r4, #0]
 8004aa4:	4639      	mov	r1, r7
 8004aa6:	4630      	mov	r0, r6
 8004aa8:	eb04 0903 	add.w	r9, r4, r3
 8004aac:	f000 fb5c 	bl	8005168 <_sbrk_r>
 8004ab0:	4581      	cmp	r9, r0
 8004ab2:	d142      	bne.n	8004b3a <_malloc_r+0xea>
 8004ab4:	6821      	ldr	r1, [r4, #0]
 8004ab6:	1a6d      	subs	r5, r5, r1
 8004ab8:	4629      	mov	r1, r5
 8004aba:	4630      	mov	r0, r6
 8004abc:	f7ff ffa6 	bl	8004a0c <sbrk_aligned>
 8004ac0:	3001      	adds	r0, #1
 8004ac2:	d03a      	beq.n	8004b3a <_malloc_r+0xea>
 8004ac4:	6823      	ldr	r3, [r4, #0]
 8004ac6:	442b      	add	r3, r5
 8004ac8:	6023      	str	r3, [r4, #0]
 8004aca:	f8d8 3000 	ldr.w	r3, [r8]
 8004ace:	685a      	ldr	r2, [r3, #4]
 8004ad0:	bb62      	cbnz	r2, 8004b2c <_malloc_r+0xdc>
 8004ad2:	f8c8 7000 	str.w	r7, [r8]
 8004ad6:	e00f      	b.n	8004af8 <_malloc_r+0xa8>
 8004ad8:	6822      	ldr	r2, [r4, #0]
 8004ada:	1b52      	subs	r2, r2, r5
 8004adc:	d420      	bmi.n	8004b20 <_malloc_r+0xd0>
 8004ade:	2a0b      	cmp	r2, #11
 8004ae0:	d917      	bls.n	8004b12 <_malloc_r+0xc2>
 8004ae2:	1961      	adds	r1, r4, r5
 8004ae4:	42a3      	cmp	r3, r4
 8004ae6:	6025      	str	r5, [r4, #0]
 8004ae8:	bf18      	it	ne
 8004aea:	6059      	strne	r1, [r3, #4]
 8004aec:	6863      	ldr	r3, [r4, #4]
 8004aee:	bf08      	it	eq
 8004af0:	f8c8 1000 	streq.w	r1, [r8]
 8004af4:	5162      	str	r2, [r4, r5]
 8004af6:	604b      	str	r3, [r1, #4]
 8004af8:	4630      	mov	r0, r6
 8004afa:	f000 f82f 	bl	8004b5c <__malloc_unlock>
 8004afe:	f104 000b 	add.w	r0, r4, #11
 8004b02:	1d23      	adds	r3, r4, #4
 8004b04:	f020 0007 	bic.w	r0, r0, #7
 8004b08:	1ac2      	subs	r2, r0, r3
 8004b0a:	bf1c      	itt	ne
 8004b0c:	1a1b      	subne	r3, r3, r0
 8004b0e:	50a3      	strne	r3, [r4, r2]
 8004b10:	e7af      	b.n	8004a72 <_malloc_r+0x22>
 8004b12:	6862      	ldr	r2, [r4, #4]
 8004b14:	42a3      	cmp	r3, r4
 8004b16:	bf0c      	ite	eq
 8004b18:	f8c8 2000 	streq.w	r2, [r8]
 8004b1c:	605a      	strne	r2, [r3, #4]
 8004b1e:	e7eb      	b.n	8004af8 <_malloc_r+0xa8>
 8004b20:	4623      	mov	r3, r4
 8004b22:	6864      	ldr	r4, [r4, #4]
 8004b24:	e7ae      	b.n	8004a84 <_malloc_r+0x34>
 8004b26:	463c      	mov	r4, r7
 8004b28:	687f      	ldr	r7, [r7, #4]
 8004b2a:	e7b6      	b.n	8004a9a <_malloc_r+0x4a>
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	42a3      	cmp	r3, r4
 8004b32:	d1fb      	bne.n	8004b2c <_malloc_r+0xdc>
 8004b34:	2300      	movs	r3, #0
 8004b36:	6053      	str	r3, [r2, #4]
 8004b38:	e7de      	b.n	8004af8 <_malloc_r+0xa8>
 8004b3a:	230c      	movs	r3, #12
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	4630      	mov	r0, r6
 8004b40:	f000 f80c 	bl	8004b5c <__malloc_unlock>
 8004b44:	e794      	b.n	8004a70 <_malloc_r+0x20>
 8004b46:	6005      	str	r5, [r0, #0]
 8004b48:	e7d6      	b.n	8004af8 <_malloc_r+0xa8>
 8004b4a:	bf00      	nop
 8004b4c:	20000524 	.word	0x20000524

08004b50 <__malloc_lock>:
 8004b50:	4801      	ldr	r0, [pc, #4]	@ (8004b58 <__malloc_lock+0x8>)
 8004b52:	f7ff bf01 	b.w	8004958 <__retarget_lock_acquire_recursive>
 8004b56:	bf00      	nop
 8004b58:	2000051c 	.word	0x2000051c

08004b5c <__malloc_unlock>:
 8004b5c:	4801      	ldr	r0, [pc, #4]	@ (8004b64 <__malloc_unlock+0x8>)
 8004b5e:	f7ff befc 	b.w	800495a <__retarget_lock_release_recursive>
 8004b62:	bf00      	nop
 8004b64:	2000051c 	.word	0x2000051c

08004b68 <__ssputs_r>:
 8004b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b6c:	688e      	ldr	r6, [r1, #8]
 8004b6e:	461f      	mov	r7, r3
 8004b70:	42be      	cmp	r6, r7
 8004b72:	680b      	ldr	r3, [r1, #0]
 8004b74:	4682      	mov	sl, r0
 8004b76:	460c      	mov	r4, r1
 8004b78:	4690      	mov	r8, r2
 8004b7a:	d82d      	bhi.n	8004bd8 <__ssputs_r+0x70>
 8004b7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004b80:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004b84:	d026      	beq.n	8004bd4 <__ssputs_r+0x6c>
 8004b86:	6965      	ldr	r5, [r4, #20]
 8004b88:	6909      	ldr	r1, [r1, #16]
 8004b8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004b8e:	eba3 0901 	sub.w	r9, r3, r1
 8004b92:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004b96:	1c7b      	adds	r3, r7, #1
 8004b98:	444b      	add	r3, r9
 8004b9a:	106d      	asrs	r5, r5, #1
 8004b9c:	429d      	cmp	r5, r3
 8004b9e:	bf38      	it	cc
 8004ba0:	461d      	movcc	r5, r3
 8004ba2:	0553      	lsls	r3, r2, #21
 8004ba4:	d527      	bpl.n	8004bf6 <__ssputs_r+0x8e>
 8004ba6:	4629      	mov	r1, r5
 8004ba8:	f7ff ff52 	bl	8004a50 <_malloc_r>
 8004bac:	4606      	mov	r6, r0
 8004bae:	b360      	cbz	r0, 8004c0a <__ssputs_r+0xa2>
 8004bb0:	6921      	ldr	r1, [r4, #16]
 8004bb2:	464a      	mov	r2, r9
 8004bb4:	f7ff fed2 	bl	800495c <memcpy>
 8004bb8:	89a3      	ldrh	r3, [r4, #12]
 8004bba:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc2:	81a3      	strh	r3, [r4, #12]
 8004bc4:	6126      	str	r6, [r4, #16]
 8004bc6:	6165      	str	r5, [r4, #20]
 8004bc8:	444e      	add	r6, r9
 8004bca:	eba5 0509 	sub.w	r5, r5, r9
 8004bce:	6026      	str	r6, [r4, #0]
 8004bd0:	60a5      	str	r5, [r4, #8]
 8004bd2:	463e      	mov	r6, r7
 8004bd4:	42be      	cmp	r6, r7
 8004bd6:	d900      	bls.n	8004bda <__ssputs_r+0x72>
 8004bd8:	463e      	mov	r6, r7
 8004bda:	6820      	ldr	r0, [r4, #0]
 8004bdc:	4632      	mov	r2, r6
 8004bde:	4641      	mov	r1, r8
 8004be0:	f000 faa8 	bl	8005134 <memmove>
 8004be4:	68a3      	ldr	r3, [r4, #8]
 8004be6:	1b9b      	subs	r3, r3, r6
 8004be8:	60a3      	str	r3, [r4, #8]
 8004bea:	6823      	ldr	r3, [r4, #0]
 8004bec:	4433      	add	r3, r6
 8004bee:	6023      	str	r3, [r4, #0]
 8004bf0:	2000      	movs	r0, #0
 8004bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bf6:	462a      	mov	r2, r5
 8004bf8:	f000 fac6 	bl	8005188 <_realloc_r>
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	2800      	cmp	r0, #0
 8004c00:	d1e0      	bne.n	8004bc4 <__ssputs_r+0x5c>
 8004c02:	6921      	ldr	r1, [r4, #16]
 8004c04:	4650      	mov	r0, sl
 8004c06:	f7ff feb7 	bl	8004978 <_free_r>
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	f8ca 3000 	str.w	r3, [sl]
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c16:	81a3      	strh	r3, [r4, #12]
 8004c18:	f04f 30ff 	mov.w	r0, #4294967295
 8004c1c:	e7e9      	b.n	8004bf2 <__ssputs_r+0x8a>
	...

08004c20 <_svfiprintf_r>:
 8004c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c24:	4698      	mov	r8, r3
 8004c26:	898b      	ldrh	r3, [r1, #12]
 8004c28:	061b      	lsls	r3, r3, #24
 8004c2a:	b09d      	sub	sp, #116	@ 0x74
 8004c2c:	4607      	mov	r7, r0
 8004c2e:	460d      	mov	r5, r1
 8004c30:	4614      	mov	r4, r2
 8004c32:	d510      	bpl.n	8004c56 <_svfiprintf_r+0x36>
 8004c34:	690b      	ldr	r3, [r1, #16]
 8004c36:	b973      	cbnz	r3, 8004c56 <_svfiprintf_r+0x36>
 8004c38:	2140      	movs	r1, #64	@ 0x40
 8004c3a:	f7ff ff09 	bl	8004a50 <_malloc_r>
 8004c3e:	6028      	str	r0, [r5, #0]
 8004c40:	6128      	str	r0, [r5, #16]
 8004c42:	b930      	cbnz	r0, 8004c52 <_svfiprintf_r+0x32>
 8004c44:	230c      	movs	r3, #12
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	f04f 30ff 	mov.w	r0, #4294967295
 8004c4c:	b01d      	add	sp, #116	@ 0x74
 8004c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c52:	2340      	movs	r3, #64	@ 0x40
 8004c54:	616b      	str	r3, [r5, #20]
 8004c56:	2300      	movs	r3, #0
 8004c58:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c5a:	2320      	movs	r3, #32
 8004c5c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004c60:	f8cd 800c 	str.w	r8, [sp, #12]
 8004c64:	2330      	movs	r3, #48	@ 0x30
 8004c66:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004e04 <_svfiprintf_r+0x1e4>
 8004c6a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004c6e:	f04f 0901 	mov.w	r9, #1
 8004c72:	4623      	mov	r3, r4
 8004c74:	469a      	mov	sl, r3
 8004c76:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004c7a:	b10a      	cbz	r2, 8004c80 <_svfiprintf_r+0x60>
 8004c7c:	2a25      	cmp	r2, #37	@ 0x25
 8004c7e:	d1f9      	bne.n	8004c74 <_svfiprintf_r+0x54>
 8004c80:	ebba 0b04 	subs.w	fp, sl, r4
 8004c84:	d00b      	beq.n	8004c9e <_svfiprintf_r+0x7e>
 8004c86:	465b      	mov	r3, fp
 8004c88:	4622      	mov	r2, r4
 8004c8a:	4629      	mov	r1, r5
 8004c8c:	4638      	mov	r0, r7
 8004c8e:	f7ff ff6b 	bl	8004b68 <__ssputs_r>
 8004c92:	3001      	adds	r0, #1
 8004c94:	f000 80a7 	beq.w	8004de6 <_svfiprintf_r+0x1c6>
 8004c98:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004c9a:	445a      	add	r2, fp
 8004c9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8004c9e:	f89a 3000 	ldrb.w	r3, [sl]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 809f 	beq.w	8004de6 <_svfiprintf_r+0x1c6>
 8004ca8:	2300      	movs	r3, #0
 8004caa:	f04f 32ff 	mov.w	r2, #4294967295
 8004cae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004cb2:	f10a 0a01 	add.w	sl, sl, #1
 8004cb6:	9304      	str	r3, [sp, #16]
 8004cb8:	9307      	str	r3, [sp, #28]
 8004cba:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004cbe:	931a      	str	r3, [sp, #104]	@ 0x68
 8004cc0:	4654      	mov	r4, sl
 8004cc2:	2205      	movs	r2, #5
 8004cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc8:	484e      	ldr	r0, [pc, #312]	@ (8004e04 <_svfiprintf_r+0x1e4>)
 8004cca:	f7fb fa91 	bl	80001f0 <memchr>
 8004cce:	9a04      	ldr	r2, [sp, #16]
 8004cd0:	b9d8      	cbnz	r0, 8004d0a <_svfiprintf_r+0xea>
 8004cd2:	06d0      	lsls	r0, r2, #27
 8004cd4:	bf44      	itt	mi
 8004cd6:	2320      	movmi	r3, #32
 8004cd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004cdc:	0711      	lsls	r1, r2, #28
 8004cde:	bf44      	itt	mi
 8004ce0:	232b      	movmi	r3, #43	@ 0x2b
 8004ce2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ce6:	f89a 3000 	ldrb.w	r3, [sl]
 8004cea:	2b2a      	cmp	r3, #42	@ 0x2a
 8004cec:	d015      	beq.n	8004d1a <_svfiprintf_r+0xfa>
 8004cee:	9a07      	ldr	r2, [sp, #28]
 8004cf0:	4654      	mov	r4, sl
 8004cf2:	2000      	movs	r0, #0
 8004cf4:	f04f 0c0a 	mov.w	ip, #10
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004cfe:	3b30      	subs	r3, #48	@ 0x30
 8004d00:	2b09      	cmp	r3, #9
 8004d02:	d94b      	bls.n	8004d9c <_svfiprintf_r+0x17c>
 8004d04:	b1b0      	cbz	r0, 8004d34 <_svfiprintf_r+0x114>
 8004d06:	9207      	str	r2, [sp, #28]
 8004d08:	e014      	b.n	8004d34 <_svfiprintf_r+0x114>
 8004d0a:	eba0 0308 	sub.w	r3, r0, r8
 8004d0e:	fa09 f303 	lsl.w	r3, r9, r3
 8004d12:	4313      	orrs	r3, r2
 8004d14:	9304      	str	r3, [sp, #16]
 8004d16:	46a2      	mov	sl, r4
 8004d18:	e7d2      	b.n	8004cc0 <_svfiprintf_r+0xa0>
 8004d1a:	9b03      	ldr	r3, [sp, #12]
 8004d1c:	1d19      	adds	r1, r3, #4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	9103      	str	r1, [sp, #12]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	bfbb      	ittet	lt
 8004d26:	425b      	neglt	r3, r3
 8004d28:	f042 0202 	orrlt.w	r2, r2, #2
 8004d2c:	9307      	strge	r3, [sp, #28]
 8004d2e:	9307      	strlt	r3, [sp, #28]
 8004d30:	bfb8      	it	lt
 8004d32:	9204      	strlt	r2, [sp, #16]
 8004d34:	7823      	ldrb	r3, [r4, #0]
 8004d36:	2b2e      	cmp	r3, #46	@ 0x2e
 8004d38:	d10a      	bne.n	8004d50 <_svfiprintf_r+0x130>
 8004d3a:	7863      	ldrb	r3, [r4, #1]
 8004d3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004d3e:	d132      	bne.n	8004da6 <_svfiprintf_r+0x186>
 8004d40:	9b03      	ldr	r3, [sp, #12]
 8004d42:	1d1a      	adds	r2, r3, #4
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	9203      	str	r2, [sp, #12]
 8004d48:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004d4c:	3402      	adds	r4, #2
 8004d4e:	9305      	str	r3, [sp, #20]
 8004d50:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004e14 <_svfiprintf_r+0x1f4>
 8004d54:	7821      	ldrb	r1, [r4, #0]
 8004d56:	2203      	movs	r2, #3
 8004d58:	4650      	mov	r0, sl
 8004d5a:	f7fb fa49 	bl	80001f0 <memchr>
 8004d5e:	b138      	cbz	r0, 8004d70 <_svfiprintf_r+0x150>
 8004d60:	9b04      	ldr	r3, [sp, #16]
 8004d62:	eba0 000a 	sub.w	r0, r0, sl
 8004d66:	2240      	movs	r2, #64	@ 0x40
 8004d68:	4082      	lsls	r2, r0
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	3401      	adds	r4, #1
 8004d6e:	9304      	str	r3, [sp, #16]
 8004d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004d74:	4824      	ldr	r0, [pc, #144]	@ (8004e08 <_svfiprintf_r+0x1e8>)
 8004d76:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004d7a:	2206      	movs	r2, #6
 8004d7c:	f7fb fa38 	bl	80001f0 <memchr>
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d036      	beq.n	8004df2 <_svfiprintf_r+0x1d2>
 8004d84:	4b21      	ldr	r3, [pc, #132]	@ (8004e0c <_svfiprintf_r+0x1ec>)
 8004d86:	bb1b      	cbnz	r3, 8004dd0 <_svfiprintf_r+0x1b0>
 8004d88:	9b03      	ldr	r3, [sp, #12]
 8004d8a:	3307      	adds	r3, #7
 8004d8c:	f023 0307 	bic.w	r3, r3, #7
 8004d90:	3308      	adds	r3, #8
 8004d92:	9303      	str	r3, [sp, #12]
 8004d94:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004d96:	4433      	add	r3, r6
 8004d98:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d9a:	e76a      	b.n	8004c72 <_svfiprintf_r+0x52>
 8004d9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8004da0:	460c      	mov	r4, r1
 8004da2:	2001      	movs	r0, #1
 8004da4:	e7a8      	b.n	8004cf8 <_svfiprintf_r+0xd8>
 8004da6:	2300      	movs	r3, #0
 8004da8:	3401      	adds	r4, #1
 8004daa:	9305      	str	r3, [sp, #20]
 8004dac:	4619      	mov	r1, r3
 8004dae:	f04f 0c0a 	mov.w	ip, #10
 8004db2:	4620      	mov	r0, r4
 8004db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004db8:	3a30      	subs	r2, #48	@ 0x30
 8004dba:	2a09      	cmp	r2, #9
 8004dbc:	d903      	bls.n	8004dc6 <_svfiprintf_r+0x1a6>
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d0c6      	beq.n	8004d50 <_svfiprintf_r+0x130>
 8004dc2:	9105      	str	r1, [sp, #20]
 8004dc4:	e7c4      	b.n	8004d50 <_svfiprintf_r+0x130>
 8004dc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8004dca:	4604      	mov	r4, r0
 8004dcc:	2301      	movs	r3, #1
 8004dce:	e7f0      	b.n	8004db2 <_svfiprintf_r+0x192>
 8004dd0:	ab03      	add	r3, sp, #12
 8004dd2:	9300      	str	r3, [sp, #0]
 8004dd4:	462a      	mov	r2, r5
 8004dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8004e10 <_svfiprintf_r+0x1f0>)
 8004dd8:	a904      	add	r1, sp, #16
 8004dda:	4638      	mov	r0, r7
 8004ddc:	f3af 8000 	nop.w
 8004de0:	1c42      	adds	r2, r0, #1
 8004de2:	4606      	mov	r6, r0
 8004de4:	d1d6      	bne.n	8004d94 <_svfiprintf_r+0x174>
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	065b      	lsls	r3, r3, #25
 8004dea:	f53f af2d 	bmi.w	8004c48 <_svfiprintf_r+0x28>
 8004dee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004df0:	e72c      	b.n	8004c4c <_svfiprintf_r+0x2c>
 8004df2:	ab03      	add	r3, sp, #12
 8004df4:	9300      	str	r3, [sp, #0]
 8004df6:	462a      	mov	r2, r5
 8004df8:	4b05      	ldr	r3, [pc, #20]	@ (8004e10 <_svfiprintf_r+0x1f0>)
 8004dfa:	a904      	add	r1, sp, #16
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	f000 f879 	bl	8004ef4 <_printf_i>
 8004e02:	e7ed      	b.n	8004de0 <_svfiprintf_r+0x1c0>
 8004e04:	08006036 	.word	0x08006036
 8004e08:	08006040 	.word	0x08006040
 8004e0c:	00000000 	.word	0x00000000
 8004e10:	08004b69 	.word	0x08004b69
 8004e14:	0800603c 	.word	0x0800603c

08004e18 <_printf_common>:
 8004e18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e1c:	4616      	mov	r6, r2
 8004e1e:	4698      	mov	r8, r3
 8004e20:	688a      	ldr	r2, [r1, #8]
 8004e22:	690b      	ldr	r3, [r1, #16]
 8004e24:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	bfb8      	it	lt
 8004e2c:	4613      	movlt	r3, r2
 8004e2e:	6033      	str	r3, [r6, #0]
 8004e30:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004e34:	4607      	mov	r7, r0
 8004e36:	460c      	mov	r4, r1
 8004e38:	b10a      	cbz	r2, 8004e3e <_printf_common+0x26>
 8004e3a:	3301      	adds	r3, #1
 8004e3c:	6033      	str	r3, [r6, #0]
 8004e3e:	6823      	ldr	r3, [r4, #0]
 8004e40:	0699      	lsls	r1, r3, #26
 8004e42:	bf42      	ittt	mi
 8004e44:	6833      	ldrmi	r3, [r6, #0]
 8004e46:	3302      	addmi	r3, #2
 8004e48:	6033      	strmi	r3, [r6, #0]
 8004e4a:	6825      	ldr	r5, [r4, #0]
 8004e4c:	f015 0506 	ands.w	r5, r5, #6
 8004e50:	d106      	bne.n	8004e60 <_printf_common+0x48>
 8004e52:	f104 0a19 	add.w	sl, r4, #25
 8004e56:	68e3      	ldr	r3, [r4, #12]
 8004e58:	6832      	ldr	r2, [r6, #0]
 8004e5a:	1a9b      	subs	r3, r3, r2
 8004e5c:	42ab      	cmp	r3, r5
 8004e5e:	dc26      	bgt.n	8004eae <_printf_common+0x96>
 8004e60:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004e64:	6822      	ldr	r2, [r4, #0]
 8004e66:	3b00      	subs	r3, #0
 8004e68:	bf18      	it	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	0692      	lsls	r2, r2, #26
 8004e6e:	d42b      	bmi.n	8004ec8 <_printf_common+0xb0>
 8004e70:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004e74:	4641      	mov	r1, r8
 8004e76:	4638      	mov	r0, r7
 8004e78:	47c8      	blx	r9
 8004e7a:	3001      	adds	r0, #1
 8004e7c:	d01e      	beq.n	8004ebc <_printf_common+0xa4>
 8004e7e:	6823      	ldr	r3, [r4, #0]
 8004e80:	6922      	ldr	r2, [r4, #16]
 8004e82:	f003 0306 	and.w	r3, r3, #6
 8004e86:	2b04      	cmp	r3, #4
 8004e88:	bf02      	ittt	eq
 8004e8a:	68e5      	ldreq	r5, [r4, #12]
 8004e8c:	6833      	ldreq	r3, [r6, #0]
 8004e8e:	1aed      	subeq	r5, r5, r3
 8004e90:	68a3      	ldr	r3, [r4, #8]
 8004e92:	bf0c      	ite	eq
 8004e94:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004e98:	2500      	movne	r5, #0
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	bfc4      	itt	gt
 8004e9e:	1a9b      	subgt	r3, r3, r2
 8004ea0:	18ed      	addgt	r5, r5, r3
 8004ea2:	2600      	movs	r6, #0
 8004ea4:	341a      	adds	r4, #26
 8004ea6:	42b5      	cmp	r5, r6
 8004ea8:	d11a      	bne.n	8004ee0 <_printf_common+0xc8>
 8004eaa:	2000      	movs	r0, #0
 8004eac:	e008      	b.n	8004ec0 <_printf_common+0xa8>
 8004eae:	2301      	movs	r3, #1
 8004eb0:	4652      	mov	r2, sl
 8004eb2:	4641      	mov	r1, r8
 8004eb4:	4638      	mov	r0, r7
 8004eb6:	47c8      	blx	r9
 8004eb8:	3001      	adds	r0, #1
 8004eba:	d103      	bne.n	8004ec4 <_printf_common+0xac>
 8004ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ec0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ec4:	3501      	adds	r5, #1
 8004ec6:	e7c6      	b.n	8004e56 <_printf_common+0x3e>
 8004ec8:	18e1      	adds	r1, r4, r3
 8004eca:	1c5a      	adds	r2, r3, #1
 8004ecc:	2030      	movs	r0, #48	@ 0x30
 8004ece:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004ed2:	4422      	add	r2, r4
 8004ed4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004ed8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004edc:	3302      	adds	r3, #2
 8004ede:	e7c7      	b.n	8004e70 <_printf_common+0x58>
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	4641      	mov	r1, r8
 8004ee6:	4638      	mov	r0, r7
 8004ee8:	47c8      	blx	r9
 8004eea:	3001      	adds	r0, #1
 8004eec:	d0e6      	beq.n	8004ebc <_printf_common+0xa4>
 8004eee:	3601      	adds	r6, #1
 8004ef0:	e7d9      	b.n	8004ea6 <_printf_common+0x8e>
	...

08004ef4 <_printf_i>:
 8004ef4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ef8:	7e0f      	ldrb	r7, [r1, #24]
 8004efa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004efc:	2f78      	cmp	r7, #120	@ 0x78
 8004efe:	4691      	mov	r9, r2
 8004f00:	4680      	mov	r8, r0
 8004f02:	460c      	mov	r4, r1
 8004f04:	469a      	mov	sl, r3
 8004f06:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004f0a:	d807      	bhi.n	8004f1c <_printf_i+0x28>
 8004f0c:	2f62      	cmp	r7, #98	@ 0x62
 8004f0e:	d80a      	bhi.n	8004f26 <_printf_i+0x32>
 8004f10:	2f00      	cmp	r7, #0
 8004f12:	f000 80d2 	beq.w	80050ba <_printf_i+0x1c6>
 8004f16:	2f58      	cmp	r7, #88	@ 0x58
 8004f18:	f000 80b9 	beq.w	800508e <_printf_i+0x19a>
 8004f1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f20:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004f24:	e03a      	b.n	8004f9c <_printf_i+0xa8>
 8004f26:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004f2a:	2b15      	cmp	r3, #21
 8004f2c:	d8f6      	bhi.n	8004f1c <_printf_i+0x28>
 8004f2e:	a101      	add	r1, pc, #4	@ (adr r1, 8004f34 <_printf_i+0x40>)
 8004f30:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f34:	08004f8d 	.word	0x08004f8d
 8004f38:	08004fa1 	.word	0x08004fa1
 8004f3c:	08004f1d 	.word	0x08004f1d
 8004f40:	08004f1d 	.word	0x08004f1d
 8004f44:	08004f1d 	.word	0x08004f1d
 8004f48:	08004f1d 	.word	0x08004f1d
 8004f4c:	08004fa1 	.word	0x08004fa1
 8004f50:	08004f1d 	.word	0x08004f1d
 8004f54:	08004f1d 	.word	0x08004f1d
 8004f58:	08004f1d 	.word	0x08004f1d
 8004f5c:	08004f1d 	.word	0x08004f1d
 8004f60:	080050a1 	.word	0x080050a1
 8004f64:	08004fcb 	.word	0x08004fcb
 8004f68:	0800505b 	.word	0x0800505b
 8004f6c:	08004f1d 	.word	0x08004f1d
 8004f70:	08004f1d 	.word	0x08004f1d
 8004f74:	080050c3 	.word	0x080050c3
 8004f78:	08004f1d 	.word	0x08004f1d
 8004f7c:	08004fcb 	.word	0x08004fcb
 8004f80:	08004f1d 	.word	0x08004f1d
 8004f84:	08004f1d 	.word	0x08004f1d
 8004f88:	08005063 	.word	0x08005063
 8004f8c:	6833      	ldr	r3, [r6, #0]
 8004f8e:	1d1a      	adds	r2, r3, #4
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	6032      	str	r2, [r6, #0]
 8004f94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004f98:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e09d      	b.n	80050dc <_printf_i+0x1e8>
 8004fa0:	6833      	ldr	r3, [r6, #0]
 8004fa2:	6820      	ldr	r0, [r4, #0]
 8004fa4:	1d19      	adds	r1, r3, #4
 8004fa6:	6031      	str	r1, [r6, #0]
 8004fa8:	0606      	lsls	r6, r0, #24
 8004faa:	d501      	bpl.n	8004fb0 <_printf_i+0xbc>
 8004fac:	681d      	ldr	r5, [r3, #0]
 8004fae:	e003      	b.n	8004fb8 <_printf_i+0xc4>
 8004fb0:	0645      	lsls	r5, r0, #25
 8004fb2:	d5fb      	bpl.n	8004fac <_printf_i+0xb8>
 8004fb4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004fb8:	2d00      	cmp	r5, #0
 8004fba:	da03      	bge.n	8004fc4 <_printf_i+0xd0>
 8004fbc:	232d      	movs	r3, #45	@ 0x2d
 8004fbe:	426d      	negs	r5, r5
 8004fc0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004fc4:	4859      	ldr	r0, [pc, #356]	@ (800512c <_printf_i+0x238>)
 8004fc6:	230a      	movs	r3, #10
 8004fc8:	e011      	b.n	8004fee <_printf_i+0xfa>
 8004fca:	6821      	ldr	r1, [r4, #0]
 8004fcc:	6833      	ldr	r3, [r6, #0]
 8004fce:	0608      	lsls	r0, r1, #24
 8004fd0:	f853 5b04 	ldr.w	r5, [r3], #4
 8004fd4:	d402      	bmi.n	8004fdc <_printf_i+0xe8>
 8004fd6:	0649      	lsls	r1, r1, #25
 8004fd8:	bf48      	it	mi
 8004fda:	b2ad      	uxthmi	r5, r5
 8004fdc:	2f6f      	cmp	r7, #111	@ 0x6f
 8004fde:	4853      	ldr	r0, [pc, #332]	@ (800512c <_printf_i+0x238>)
 8004fe0:	6033      	str	r3, [r6, #0]
 8004fe2:	bf14      	ite	ne
 8004fe4:	230a      	movne	r3, #10
 8004fe6:	2308      	moveq	r3, #8
 8004fe8:	2100      	movs	r1, #0
 8004fea:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004fee:	6866      	ldr	r6, [r4, #4]
 8004ff0:	60a6      	str	r6, [r4, #8]
 8004ff2:	2e00      	cmp	r6, #0
 8004ff4:	bfa2      	ittt	ge
 8004ff6:	6821      	ldrge	r1, [r4, #0]
 8004ff8:	f021 0104 	bicge.w	r1, r1, #4
 8004ffc:	6021      	strge	r1, [r4, #0]
 8004ffe:	b90d      	cbnz	r5, 8005004 <_printf_i+0x110>
 8005000:	2e00      	cmp	r6, #0
 8005002:	d04b      	beq.n	800509c <_printf_i+0x1a8>
 8005004:	4616      	mov	r6, r2
 8005006:	fbb5 f1f3 	udiv	r1, r5, r3
 800500a:	fb03 5711 	mls	r7, r3, r1, r5
 800500e:	5dc7      	ldrb	r7, [r0, r7]
 8005010:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005014:	462f      	mov	r7, r5
 8005016:	42bb      	cmp	r3, r7
 8005018:	460d      	mov	r5, r1
 800501a:	d9f4      	bls.n	8005006 <_printf_i+0x112>
 800501c:	2b08      	cmp	r3, #8
 800501e:	d10b      	bne.n	8005038 <_printf_i+0x144>
 8005020:	6823      	ldr	r3, [r4, #0]
 8005022:	07df      	lsls	r7, r3, #31
 8005024:	d508      	bpl.n	8005038 <_printf_i+0x144>
 8005026:	6923      	ldr	r3, [r4, #16]
 8005028:	6861      	ldr	r1, [r4, #4]
 800502a:	4299      	cmp	r1, r3
 800502c:	bfde      	ittt	le
 800502e:	2330      	movle	r3, #48	@ 0x30
 8005030:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005034:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005038:	1b92      	subs	r2, r2, r6
 800503a:	6122      	str	r2, [r4, #16]
 800503c:	f8cd a000 	str.w	sl, [sp]
 8005040:	464b      	mov	r3, r9
 8005042:	aa03      	add	r2, sp, #12
 8005044:	4621      	mov	r1, r4
 8005046:	4640      	mov	r0, r8
 8005048:	f7ff fee6 	bl	8004e18 <_printf_common>
 800504c:	3001      	adds	r0, #1
 800504e:	d14a      	bne.n	80050e6 <_printf_i+0x1f2>
 8005050:	f04f 30ff 	mov.w	r0, #4294967295
 8005054:	b004      	add	sp, #16
 8005056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800505a:	6823      	ldr	r3, [r4, #0]
 800505c:	f043 0320 	orr.w	r3, r3, #32
 8005060:	6023      	str	r3, [r4, #0]
 8005062:	4833      	ldr	r0, [pc, #204]	@ (8005130 <_printf_i+0x23c>)
 8005064:	2778      	movs	r7, #120	@ 0x78
 8005066:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	6831      	ldr	r1, [r6, #0]
 800506e:	061f      	lsls	r7, r3, #24
 8005070:	f851 5b04 	ldr.w	r5, [r1], #4
 8005074:	d402      	bmi.n	800507c <_printf_i+0x188>
 8005076:	065f      	lsls	r7, r3, #25
 8005078:	bf48      	it	mi
 800507a:	b2ad      	uxthmi	r5, r5
 800507c:	6031      	str	r1, [r6, #0]
 800507e:	07d9      	lsls	r1, r3, #31
 8005080:	bf44      	itt	mi
 8005082:	f043 0320 	orrmi.w	r3, r3, #32
 8005086:	6023      	strmi	r3, [r4, #0]
 8005088:	b11d      	cbz	r5, 8005092 <_printf_i+0x19e>
 800508a:	2310      	movs	r3, #16
 800508c:	e7ac      	b.n	8004fe8 <_printf_i+0xf4>
 800508e:	4827      	ldr	r0, [pc, #156]	@ (800512c <_printf_i+0x238>)
 8005090:	e7e9      	b.n	8005066 <_printf_i+0x172>
 8005092:	6823      	ldr	r3, [r4, #0]
 8005094:	f023 0320 	bic.w	r3, r3, #32
 8005098:	6023      	str	r3, [r4, #0]
 800509a:	e7f6      	b.n	800508a <_printf_i+0x196>
 800509c:	4616      	mov	r6, r2
 800509e:	e7bd      	b.n	800501c <_printf_i+0x128>
 80050a0:	6833      	ldr	r3, [r6, #0]
 80050a2:	6825      	ldr	r5, [r4, #0]
 80050a4:	6961      	ldr	r1, [r4, #20]
 80050a6:	1d18      	adds	r0, r3, #4
 80050a8:	6030      	str	r0, [r6, #0]
 80050aa:	062e      	lsls	r6, r5, #24
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	d501      	bpl.n	80050b4 <_printf_i+0x1c0>
 80050b0:	6019      	str	r1, [r3, #0]
 80050b2:	e002      	b.n	80050ba <_printf_i+0x1c6>
 80050b4:	0668      	lsls	r0, r5, #25
 80050b6:	d5fb      	bpl.n	80050b0 <_printf_i+0x1bc>
 80050b8:	8019      	strh	r1, [r3, #0]
 80050ba:	2300      	movs	r3, #0
 80050bc:	6123      	str	r3, [r4, #16]
 80050be:	4616      	mov	r6, r2
 80050c0:	e7bc      	b.n	800503c <_printf_i+0x148>
 80050c2:	6833      	ldr	r3, [r6, #0]
 80050c4:	1d1a      	adds	r2, r3, #4
 80050c6:	6032      	str	r2, [r6, #0]
 80050c8:	681e      	ldr	r6, [r3, #0]
 80050ca:	6862      	ldr	r2, [r4, #4]
 80050cc:	2100      	movs	r1, #0
 80050ce:	4630      	mov	r0, r6
 80050d0:	f7fb f88e 	bl	80001f0 <memchr>
 80050d4:	b108      	cbz	r0, 80050da <_printf_i+0x1e6>
 80050d6:	1b80      	subs	r0, r0, r6
 80050d8:	6060      	str	r0, [r4, #4]
 80050da:	6863      	ldr	r3, [r4, #4]
 80050dc:	6123      	str	r3, [r4, #16]
 80050de:	2300      	movs	r3, #0
 80050e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050e4:	e7aa      	b.n	800503c <_printf_i+0x148>
 80050e6:	6923      	ldr	r3, [r4, #16]
 80050e8:	4632      	mov	r2, r6
 80050ea:	4649      	mov	r1, r9
 80050ec:	4640      	mov	r0, r8
 80050ee:	47d0      	blx	sl
 80050f0:	3001      	adds	r0, #1
 80050f2:	d0ad      	beq.n	8005050 <_printf_i+0x15c>
 80050f4:	6823      	ldr	r3, [r4, #0]
 80050f6:	079b      	lsls	r3, r3, #30
 80050f8:	d413      	bmi.n	8005122 <_printf_i+0x22e>
 80050fa:	68e0      	ldr	r0, [r4, #12]
 80050fc:	9b03      	ldr	r3, [sp, #12]
 80050fe:	4298      	cmp	r0, r3
 8005100:	bfb8      	it	lt
 8005102:	4618      	movlt	r0, r3
 8005104:	e7a6      	b.n	8005054 <_printf_i+0x160>
 8005106:	2301      	movs	r3, #1
 8005108:	4632      	mov	r2, r6
 800510a:	4649      	mov	r1, r9
 800510c:	4640      	mov	r0, r8
 800510e:	47d0      	blx	sl
 8005110:	3001      	adds	r0, #1
 8005112:	d09d      	beq.n	8005050 <_printf_i+0x15c>
 8005114:	3501      	adds	r5, #1
 8005116:	68e3      	ldr	r3, [r4, #12]
 8005118:	9903      	ldr	r1, [sp, #12]
 800511a:	1a5b      	subs	r3, r3, r1
 800511c:	42ab      	cmp	r3, r5
 800511e:	dcf2      	bgt.n	8005106 <_printf_i+0x212>
 8005120:	e7eb      	b.n	80050fa <_printf_i+0x206>
 8005122:	2500      	movs	r5, #0
 8005124:	f104 0619 	add.w	r6, r4, #25
 8005128:	e7f5      	b.n	8005116 <_printf_i+0x222>
 800512a:	bf00      	nop
 800512c:	08006047 	.word	0x08006047
 8005130:	08006058 	.word	0x08006058

08005134 <memmove>:
 8005134:	4288      	cmp	r0, r1
 8005136:	b510      	push	{r4, lr}
 8005138:	eb01 0402 	add.w	r4, r1, r2
 800513c:	d902      	bls.n	8005144 <memmove+0x10>
 800513e:	4284      	cmp	r4, r0
 8005140:	4623      	mov	r3, r4
 8005142:	d807      	bhi.n	8005154 <memmove+0x20>
 8005144:	1e43      	subs	r3, r0, #1
 8005146:	42a1      	cmp	r1, r4
 8005148:	d008      	beq.n	800515c <memmove+0x28>
 800514a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800514e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005152:	e7f8      	b.n	8005146 <memmove+0x12>
 8005154:	4402      	add	r2, r0
 8005156:	4601      	mov	r1, r0
 8005158:	428a      	cmp	r2, r1
 800515a:	d100      	bne.n	800515e <memmove+0x2a>
 800515c:	bd10      	pop	{r4, pc}
 800515e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005166:	e7f7      	b.n	8005158 <memmove+0x24>

08005168 <_sbrk_r>:
 8005168:	b538      	push	{r3, r4, r5, lr}
 800516a:	4d06      	ldr	r5, [pc, #24]	@ (8005184 <_sbrk_r+0x1c>)
 800516c:	2300      	movs	r3, #0
 800516e:	4604      	mov	r4, r0
 8005170:	4608      	mov	r0, r1
 8005172:	602b      	str	r3, [r5, #0]
 8005174:	f7fe f842 	bl	80031fc <_sbrk>
 8005178:	1c43      	adds	r3, r0, #1
 800517a:	d102      	bne.n	8005182 <_sbrk_r+0x1a>
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	b103      	cbz	r3, 8005182 <_sbrk_r+0x1a>
 8005180:	6023      	str	r3, [r4, #0]
 8005182:	bd38      	pop	{r3, r4, r5, pc}
 8005184:	20000518 	.word	0x20000518

08005188 <_realloc_r>:
 8005188:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800518c:	4680      	mov	r8, r0
 800518e:	4615      	mov	r5, r2
 8005190:	460c      	mov	r4, r1
 8005192:	b921      	cbnz	r1, 800519e <_realloc_r+0x16>
 8005194:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005198:	4611      	mov	r1, r2
 800519a:	f7ff bc59 	b.w	8004a50 <_malloc_r>
 800519e:	b92a      	cbnz	r2, 80051ac <_realloc_r+0x24>
 80051a0:	f7ff fbea 	bl	8004978 <_free_r>
 80051a4:	2400      	movs	r4, #0
 80051a6:	4620      	mov	r0, r4
 80051a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80051ac:	f000 f81a 	bl	80051e4 <_malloc_usable_size_r>
 80051b0:	4285      	cmp	r5, r0
 80051b2:	4606      	mov	r6, r0
 80051b4:	d802      	bhi.n	80051bc <_realloc_r+0x34>
 80051b6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80051ba:	d8f4      	bhi.n	80051a6 <_realloc_r+0x1e>
 80051bc:	4629      	mov	r1, r5
 80051be:	4640      	mov	r0, r8
 80051c0:	f7ff fc46 	bl	8004a50 <_malloc_r>
 80051c4:	4607      	mov	r7, r0
 80051c6:	2800      	cmp	r0, #0
 80051c8:	d0ec      	beq.n	80051a4 <_realloc_r+0x1c>
 80051ca:	42b5      	cmp	r5, r6
 80051cc:	462a      	mov	r2, r5
 80051ce:	4621      	mov	r1, r4
 80051d0:	bf28      	it	cs
 80051d2:	4632      	movcs	r2, r6
 80051d4:	f7ff fbc2 	bl	800495c <memcpy>
 80051d8:	4621      	mov	r1, r4
 80051da:	4640      	mov	r0, r8
 80051dc:	f7ff fbcc 	bl	8004978 <_free_r>
 80051e0:	463c      	mov	r4, r7
 80051e2:	e7e0      	b.n	80051a6 <_realloc_r+0x1e>

080051e4 <_malloc_usable_size_r>:
 80051e4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80051e8:	1f18      	subs	r0, r3, #4
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bfbc      	itt	lt
 80051ee:	580b      	ldrlt	r3, [r1, r0]
 80051f0:	18c0      	addlt	r0, r0, r3
 80051f2:	4770      	bx	lr

080051f4 <_init>:
 80051f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f6:	bf00      	nop
 80051f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051fa:	bc08      	pop	{r3}
 80051fc:	469e      	mov	lr, r3
 80051fe:	4770      	bx	lr

08005200 <_fini>:
 8005200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005202:	bf00      	nop
 8005204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005206:	bc08      	pop	{r3}
 8005208:	469e      	mov	lr, r3
 800520a:	4770      	bx	lr
